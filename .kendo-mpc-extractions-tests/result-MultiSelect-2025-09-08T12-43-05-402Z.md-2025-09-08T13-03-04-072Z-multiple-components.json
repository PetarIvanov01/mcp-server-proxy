{
  "componentName": "result-MultiSelect-2025-09-08T12-43-05-402Z.md",
  "imports": [
    "import { MultiSelect } from '@progress/kendo-react-dropdowns';",
    "import { Editor, EditorTools } from '@progress/kendo-react-editor';",
    "import { Editor } from '@progress/kendo-react-editor';",
    "import { EditorTools } from '@progress/kendo-react-editor';"
  ],
  "examples": [
    {
      "title": "Example 1",
      "code": "import React from 'react';\nimport { MultiSelect } from '@progress/kendo-react-dropdowns';\n\nconst App = () => {\n    return <MultiSelect data={['Option 1', 'Option 2']} />;\n};\n\nexport default App;",
      "description": "React component implementation example"
    },
    {
      "title": "Example 2",
      "code": "import { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;",
      "description": "React component implementation example"
    }
  ],
  "props": {
    "accessKey": {
      "name": "accessKey",
      "fullName": "",
      "summary": "|- Specifies the `accessKey` of the MultiSelect.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "adaptive": {
      "name": "adaptive",
      "fullName": "",
      "summary": ">- Providing different rendering of the popup element based on the screen dimensions.",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "adaptiveFilter": {
      "name": "adaptiveFilter",
      "fullName": "",
      "summary": "Sets the value of the adaptive filtering input of the of MultiSelect.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "adaptiveSubtitle": {
      "name": "adaptiveSubtitle",
      "fullName": "",
      "summary": "\"Specifies the text that is rendered as subtitle in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "adaptiveTitle": {
      "name": "adaptiveTitle",
      "fullName": "",
      "summary": "\"Specifies the text that is rendered as title in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\\r\\nIf not provided, the title will be the same as the label.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "allowCustom": {
      "name": "allowCustom",
      "fullName": "",
      "summary": ">- Specifies whether the MultiSelect allows user-defined values that are not present in the dataset ([see example]({% slug custom_values_multiselect %})). Defaults to `false` .",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "ariaDescribedBy": {
      "name": "ariaDescribedBy",
      "fullName": "",
      "summary": "\"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "ariaLabel": {
      "name": "ariaLabel",
      "fullName": "",
      "summary": "Specifies the accessible label of the interactive component.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "ariaLabelledBy": {
      "name": "ariaLabelledBy",
      "fullName": "",
      "summary": "Identifies the element(s) which will label the component.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "autoClose": {
      "name": "autoClose",
      "fullName": "",
      "summary": ">- Determines whether to close the options list of the MultiSelect after the item selection is finished.",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "className": {
      "name": "className",
      "fullName": "",
      "summary": "Sets additional classes to the MultiSelect.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "data": {
      "name": "data",
      "fullName": "",
      "summary": ">- Sets the data of the MultiSelect ([see example]({% slug binding_multiselect %})).",
      "syntax": {
        "return": {
          "type": "Array<any>"
        }
      }
    },
    "dataItemKey": {
      "name": "dataItemKey",
      "fullName": "",
      "summary": ">- Sets the key for comparing the data items of the MultiSelect ([see example]({% slug binding_multiselect %}#toc-datasets-of-objects)). If `dataItemKey` is not set, the MultiSelect compares the items by reference.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "defaultValue": {
      "name": "defaultValue",
      "fullName": "",
      "summary": "|- Sets the default value of the MultiSelect. Similar to the native `select` HTML element.",
      "syntax": {
        "return": {
          "type": "Array<any>"
        }
      }
    },
    "dir": {
      "name": "dir",
      "fullName": "",
      "summary": "|- Represents the `dir` HTML attribute.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "disabled": {
      "name": "disabled",
      "fullName": "",
      "summary": "Sets the disabled state of the MultiSelect.",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "fillMode": {
      "name": "fillMode",
      "fullName": "",
      "summary": "\"Configures the \\n`fillMode`\\n of the MultiSelect.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- flat\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"flat\" | \"solid\" | \"outline\""
        }
      }
    },
    "filter": {
      "name": "filter",
      "fullName": "",
      "summary": ">- Sets the value of filtering input. Useful for making the filtering input a [controlled",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "filterable": {
      "name": "filterable",
      "fullName": "",
      "summary": ">- Enables the filtering functionality of the MultiSelect ([more information and examples]({% slug filtering_multiselect %})).",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "focusedItemIndex": {
      "name": "focusedItemIndex",
      "fullName": "",
      "summary": "\"If set, the MultiSelect will use it to get the focused item index.\\r\\n\\r\\nDefault functionality returns the first item which starts with the input text.\"",
      "syntax": {
        "return": {
          "type": "'(data: any, inputText: string, textField?: string) => number'"
        }
      }
    },
    "footer": {
      "name": "footer",
      "fullName": "",
      "summary": ">- Sets the footer component of the MultiSelect ([see example]({% slug customrendering_multiselect %}#toc-headers-and-footers)).",
      "syntax": {
        "return": {
          "type": "ReactNode"
        }
      }
    },
    "groupField": {
      "name": "groupField",
      "fullName": "",
      "summary": ">- Sets the data item field that represents the start of a group. Applicable to objects data.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "groupHeaderItemRender": {
      "name": "groupHeaderItemRender",
      "fullName": "",
      "summary": ">- Fires when a DropDownList's group header item is about to be rendered. Used to override the default appearance of the group's headers.",
      "syntax": {
        "return": {
          "type": ">-"
        }
      }
    },
    "groupStickyHeaderItemRender": {
      "name": "groupStickyHeaderItemRender",
      "fullName": "",
      "summary": ">- Fires when a DropDownList's sticky group header item is about to be rendered. Used to override the default appearance of the sticky group header of the component.",
      "syntax": {
        "return": {
          "type": ">-"
        }
      }
    },
    "header": {
      "name": "header",
      "fullName": "",
      "summary": ">- Sets the header component of the MultiSelect ([see example]({% slug customrendering_multiselect %}#toc-headers-and-footers)).",
      "syntax": {
        "return": {
          "type": "ReactNode"
        }
      }
    },
    "id": {
      "name": "id",
      "fullName": "",
      "summary": "Specifies the id of the component.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "inputAttributes": {
      "name": "inputAttributes",
      "fullName": "",
      "summary": "\"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"",
      "syntax": {
        "return": {
          "type": "InputHTMLAttributes"
        }
      }
    },
    "itemRender": {
      "name": "itemRender",
      "fullName": "",
      "summary": ">- Fires when a MultiSelect item is about to be rendered ([see example]({% slug customrendering_multiselect %}#toc-items)). Used to override the default appearance of the list items.",
      "syntax": {
        "return": {
          "type": ">-"
        }
      }
    },
    "label": {
      "name": "label",
      "fullName": "",
      "summary": "Renders a floating label for the MultiSelect.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "listNoDataRender": {
      "name": "listNoDataRender",
      "fullName": "",
      "summary": ">- Fires when the element which indicates no data in the popup is about to be rendered ([see example]({% slug customrendering_multiselect %}#toc-no-data)). Used to override the default appearance of the element.",
      "syntax": {
        "return": {
          "type": ">-"
        }
      }
    },
    "loading": {
      "name": "loading",
      "fullName": "",
      "summary": ">- Sets the loading state of the MultiSelect ([see example]({% slug filtering_multiselect %}#toc-basic-configuration)).",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "name": {
      "name": "name",
      "fullName": "",
      "summary": "\"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "onBlur": {
      "name": "onBlur",
      "fullName": "",
      "summary": "Fires each time the MultiSelect gets blurred.",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectBlurEvent) => void'"
        }
      }
    },
    "onCancel": {
      "name": "onCancel",
      "fullName": "",
      "summary": ">- Fires each time the popup of the MultiSelect is about to cancel in ([adaptive mode]({% slug adaptive_rendering_multiselect %})).",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectCancelEvent) => void'"
        }
      }
    },
    "onChange": {
      "name": "onChange",
      "fullName": "",
      "summary": ">- Fires each time the value of the MultiSelect is about to change ([see examples]({% slug binding_multiselect %})).",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectChangeEvent) => void'"
        }
      }
    },
    "onClose": {
      "name": "onClose",
      "fullName": "",
      "summary": "Fires each time the popup of the MultiSelect is about to close.",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectCloseEvent) => void'"
        }
      }
    },
    "onFilterChange": {
      "name": "onFilterChange",
      "fullName": "",
      "summary": ">- Fires each time the user types in the filter input ([see example]({% slug filtering_multiselect %}#toc-basic-configuration)). You can filter the source based on the passed filtration value.",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectFilterChangeEvent) => void'"
        }
      }
    },
    "onFocus": {
      "name": "onFocus",
      "fullName": "",
      "summary": "Fires each time the user focuses the MultiSelect.",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectFocusEvent) => void'"
        }
      }
    },
    "onOpen": {
      "name": "onOpen",
      "fullName": "",
      "summary": "Fires each time the popup of the MultiSelect is about to open.",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectOpenEvent) => void'"
        }
      }
    },
    "onPageChange": {
      "name": "onPageChange",
      "fullName": "",
      "summary": ">- Fires when both the virtual scrolling of the MultiSelect is enabled and when the component requires data for another page ([see example]({% slug virtualization_multiselect %})).",
      "syntax": {
        "return": {
          "type": "'(event: MultiSelectPageChangeEvent) => void'"
        }
      }
    },
    "opened": {
      "name": "opened",
      "fullName": "",
      "summary": "Sets the opened and closed state of the MultiSelect.",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "placeholder": {
      "name": "placeholder",
      "fullName": "",
      "summary": "The hint that is displayed when the MultiSelect is empty.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "popupSettings": {
      "name": "popupSettings",
      "fullName": "",
      "summary": "Configures the popup of the MultiSelect.",
      "syntax": {
        "return": {
          "type": "DropDownsPopupSettings"
        }
      }
    },
    "prefix": {
      "name": "prefix",
      "fullName": "",
      "summary": "Sets a custom prefix to the MultiSelect component.",
      "syntax": {
        "return": {
          "type": "CustomComponent"
        }
      }
    },
    "required": {
      "name": "required",
      "fullName": "",
      "summary": "\"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "rounded": {
      "name": "rounded",
      "fullName": "",
      "summary": "\"Configures the \\n`roundness`\\n of the MultiSelect.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"small\" | \"medium\" | \"large\" | \"full\""
        }
      }
    },
    "size": {
      "name": "size",
      "fullName": "",
      "summary": "\"Configures the \\n`size`\\n of the MultiSelect.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"small\" | \"medium\" | \"large\""
        }
      }
    },
    "skipDisabledItems": {
      "name": "skipDisabledItems",
      "fullName": "",
      "summary": ">- Defines if MultiSelect's disabled items will be skipped or focused when navigating through the list of items using a keyboard. Defaults to `true` .",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "style": {
      "name": "style",
      "fullName": "",
      "summary": "The styles that are applied to the MultiSelect.",
      "syntax": {
        "return": {
          "type": "CSSProperties"
        }
      }
    },
    "suffix": {
      "name": "suffix",
      "fullName": "",
      "summary": "Sets a custom suffix to the MultiSelect component.",
      "syntax": {
        "return": {
          "type": "CustomComponent"
        }
      }
    },
    "tabIndex": {
      "name": "tabIndex",
      "fullName": "",
      "summary": "|- Specifies the `tabIndex` of the MultiSelect.",
      "syntax": {
        "return": {
          "type": "number"
        }
      }
    },
    "tagRender": {
      "name": "tagRender",
      "fullName": "",
      "summary": ">- Fires when a tag element is about to be rendered ([see example]({% slug customrendering_multiselect %}#toc-tags)). Used to override the default appearance of the element.",
      "syntax": {
        "return": {
          "type": ">-"
        }
      }
    },
    "tags": {
      "name": "tags",
      "fullName": "",
      "summary": ">- Sets the tags of the MultiSelect ([see example]({% slug customtags_multiselect %})).",
      "syntax": {
        "return": {
          "type": "Array<TagData>"
        }
      }
    },
    "textField": {
      "name": "textField",
      "fullName": "",
      "summary": ">- Sets the data item field that represents the item text ([see example]({% slug binding_multiselect %}#toc-datasets-of-objects)). If the data contains only primitive values, do not define it.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "valid": {
      "name": "valid",
      "fullName": "",
      "summary": "\"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "validationMessage": {
      "name": "validationMessage",
      "fullName": "",
      "summary": "\"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "validityStyles": {
      "name": "validityStyles",
      "fullName": "",
      "summary": "\"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "value": {
      "name": "value",
      "fullName": "",
      "summary": ">- Sets the value of the MultiSelect ([see example]({% slug binding_multiselect %})). It can either be of the primitive (string, numbers) or of the complex (objects) type.",
      "syntax": {
        "return": {
          "type": "Array<any>"
        }
      }
    },
    "virtual": {
      "name": "virtual",
      "fullName": "",
      "summary": ">- Configures the virtual scrolling of the MultiSelect ([see example]({% slug virtualization_multiselect %})).",
      "syntax": {
        "return": {
          "type": "VirtualizationSettings"
        }
      }
    },
    "props": {
      "name": "props",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "MultiSelectProps | RefAttributes"
        }
      }
    }
  }
}