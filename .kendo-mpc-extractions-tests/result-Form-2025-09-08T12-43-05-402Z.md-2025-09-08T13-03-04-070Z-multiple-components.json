{
  "componentName": "result-Form-2025-09-08T12-43-05-402Z.md",
  "imports": [
    "import { Form, Field, FormElement, FieldRenderProps, FormRenderProps, FieldWrapper } from '@progress/kendo-react-form';",
    "import { Error } from '@progress/kendo-react-labels';",
    "import { Input } from '@progress/kendo-react-inputs';",
    "import { Button } from '@progress/kendo-react-buttons';",
    "import { Editor, EditorTools } from '@progress/kendo-react-editor';",
    "import { Form } from '@progress/kendo-react-form';",
    "import { Field } from '@progress/kendo-react-form';",
    "import { FormElement } from '@progress/kendo-react-form';",
    "import { FieldRenderProps } from '@progress/kendo-react-form';",
    "import { FormRenderProps } from '@progress/kendo-react-form';",
    "import { FieldWrapper } from '@progress/kendo-react-form';",
    "import { Editor } from '@progress/kendo-react-editor';",
    "import { EditorTools } from '@progress/kendo-react-editor';"
  ],
  "examples": [
    {
      "title": "Example 1",
      "code": "import * as React from 'react';\nimport { Form, Field, FormElement, FieldRenderProps, FormRenderProps, FieldWrapper } from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\nconst App = () => {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <div className=\"k-form-buttons\">\n                        <Button disabled={!formRenderProps.allowSubmit}>Submit</Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n};\nexport default App;",
      "description": "React component implementation example"
    },
    {
      "title": "Example 2",
      "code": "import { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;",
      "description": "React component implementation example"
    }
  ],
  "props": {
    "_fields": {
      "name": "_fields",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_key": {
      "name": "_key",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_modified": {
      "name": "_modified",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_submitted": {
      "name": "_submitted",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_touched": {
      "name": "_touched",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_unmounted": {
      "name": "_unmounted",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_validatorsByField": {
      "name": "_validatorsByField",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_values": {
      "name": "_values",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "_visited": {
      "name": "_visited",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "licenseMessage": {
      "name": "licenseMessage",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "onChange": {
      "name": "onChange",
      "fullName": "",
      "summary": "\"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"",
      "syntax": {
        "return": {
          "type": "'(name: string, options: Object) => void'"
        }
      }
    },
    "onReset": {
      "name": "onReset",
      "fullName": "",
      "summary": "\"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"",
      "syntax": {
        "return": {
          "type": "() => void"
        }
      }
    },
    "showLicenseWatermark": {
      "name": "showLicenseWatermark",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "FormProps": {
      "name": "FormProps",
      "fullName": "",
      "summary": "Represents the props of the KendoReact Form component.",
      "syntax": {
        "return": {
          "type": ""
        }
      }
    }
  }
}