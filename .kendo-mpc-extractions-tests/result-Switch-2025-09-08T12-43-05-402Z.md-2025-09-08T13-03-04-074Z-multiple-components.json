{
  "componentName": "result-Switch-2025-09-08T12-43-05-402Z.md",
  "imports": [
    "import { Switch } from '@progress/kendo-react-inputs';",
    "import { Editor, EditorTools } from '@progress/kendo-react-editor';",
    "import { Editor } from '@progress/kendo-react-editor';",
    "import { EditorTools } from '@progress/kendo-react-editor';"
  ],
  "examples": [
    {
      "title": "Example 1",
      "code": "import * as React from 'react';\nimport { Switch } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <div className=\"k-d-flex k-align-items-center\">\n            <span>Switch</span>\n            <Switch />\n        </div>\n    );\n}",
      "description": "React component implementation example"
    },
    {
      "title": "Example 2",
      "code": "import { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;",
      "description": "React component implementation example"
    }
  ],
  "props": {
    "props": {
      "name": "props",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "SwitchProps | RefAttributes"
        }
      }
    },
    "accessKey": {
      "name": "accessKey",
      "fullName": "",
      "summary": "|- Specifies the `accessKey` of the Switch.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "ariaDescribedBy": {
      "name": "ariaDescribedBy",
      "fullName": "",
      "summary": "\"Identifies the element(s) which will describe the component.\\r\\nFor example these elements could contain error or hint message.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "ariaLabel": {
      "name": "ariaLabel",
      "fullName": "",
      "summary": "Specifies the accessible label of the Switch.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "ariaLabelledBy": {
      "name": "ariaLabelledBy",
      "fullName": "",
      "summary": "Identifies the element(s) which will label the component.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "checked": {
      "name": "checked",
      "fullName": "",
      "summary": ">- Sets the current value of the Switch ([see example]({% slug controlled_switch %})).",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "className": {
      "name": "className",
      "fullName": "",
      "summary": "Adds custom CSS classes to the Switch.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "defaultChecked": {
      "name": "defaultChecked",
      "fullName": "",
      "summary": ">- Sets the value of the Switch when it is initially displayed ([see example]({% slug default_state %})).",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "defaultValue": {
      "name": "defaultValue",
      "fullName": "",
      "summary": "Specifies the default value of the Switch.",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "dir": {
      "name": "dir",
      "fullName": "",
      "summary": "|- Specifies the `dir` property of the wrapping element of the Switch.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "disabled": {
      "name": "disabled",
      "fullName": "",
      "summary": "|- Disables the Switch when set to `true` ([see example]({% slug disabled_switch %})).",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "id": {
      "name": "id",
      "fullName": "",
      "summary": "|- Specifies the `id` of the Switch.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "name": {
      "name": "name",
      "fullName": "",
      "summary": "\"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "offLabel": {
      "name": "offLabel",
      "fullName": "",
      "summary": "Sets a custom label for the **Off** state.",
      "syntax": {
        "return": {
          "type": "ReactNode"
        }
      }
    },
    "onBlur": {
      "name": "onBlur",
      "fullName": "",
      "summary": "Fires when the Switch is blurred.",
      "syntax": {
        "return": {
          "type": "'(event: FocusEvent<HTMLSpanElement, Element>) => void'"
        }
      }
    },
    "onChange": {
      "name": "onChange",
      "fullName": "",
      "summary": "Fires when the value of the Switch changes.",
      "syntax": {
        "return": {
          "type": "'(event: SwitchChangeEvent) => void'"
        }
      }
    },
    "onFocus": {
      "name": "onFocus",
      "fullName": "",
      "summary": "Fires when the Switch is focused.",
      "syntax": {
        "return": {
          "type": "'(event: FocusEvent<HTMLSpanElement, Element>) => void'"
        }
      }
    },
    "onLabel": {
      "name": "onLabel",
      "fullName": "",
      "summary": "Sets a custom label for the **On** state.",
      "syntax": {
        "return": {
          "type": "ReactNode"
        }
      }
    },
    "required": {
      "name": "required",
      "fullName": "",
      "summary": "\"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "size": {
      "name": "size",
      "fullName": "",
      "summary": "\"Configures the \\n`size`\\n of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"small\" | \"medium\" | \"large\""
        }
      }
    },
    "tabIndex": {
      "name": "tabIndex",
      "fullName": "",
      "summary": ">- Specifies the [ `tabIndex`",
      "syntax": {
        "return": {
          "type": "number"
        }
      }
    },
    "thumbRounded": {
      "name": "thumbRounded",
      "fullName": "",
      "summary": "\"Configures the \\n`thumbRounded`\\n property of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a thumbRounded \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"small\" | \"medium\" | \"large\" | \"full\""
        }
      }
    },
    "trackRounded": {
      "name": "trackRounded",
      "fullName": "",
      "summary": "\"Configures the \\n`trackRounded`\\n of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a trackRounded \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"small\" | \"medium\" | \"large\" | \"full\""
        }
      }
    },
    "valid": {
      "name": "valid",
      "fullName": "",
      "summary": "\"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "validationMessage": {
      "name": "validationMessage",
      "fullName": "",
      "summary": "\"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "validityStyles": {
      "name": "validityStyles",
      "fullName": "",
      "summary": "\"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "value": {
      "name": "value",
      "fullName": "",
      "summary": "Specifies the value of the Switch.",
      "syntax": {
        "return": {
          "type": "null | string | number | boolean | Array<string>"
        }
      }
    }
  }
}