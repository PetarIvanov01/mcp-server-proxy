{
  "componentName": "result-Tooltip-2025-09-08T12-43-05-402Z.md",
  "imports": [
    "import { Tooltip } from '@progress/kendo-react-tooltip';",
    "import { Editor, EditorTools } from '@progress/kendo-react-editor';",
    "import { Editor } from '@progress/kendo-react-editor';",
    "import { EditorTools } from '@progress/kendo-react-editor';"
  ],
  "examples": [
    {
      "title": "Example 1",
      "code": "import * as React from 'react';\nimport { Tooltip } from '@progress/kendo-react-tooltip';\n\nexport default function App() {\n    return (\n        <Tooltip content=\"Tooltip content\">\n            <button>Hover me</button>\n        </Tooltip>\n    );\n}",
      "description": "React component implementation example"
    },
    {
      "title": "Example 2",
      "code": "import { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;",
      "description": "React component implementation example"
    }
  ],
  "props": {
    "anchorElement": {
      "name": "anchorElement",
      "fullName": "",
      "summary": "\"Sets the anchor element of the Tooltip.\\r\\n\\r\\nThe available options are:\\r\\n- (Default) \\n`pointer`\\n&mdash;Positions the Tooltip where the cursor is located.\\r\\n- \\n`target`\\n&mdash;Positions the Tooltip relative to the target element.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "appendTo": {
      "name": "appendTo",
      "fullName": "",
      "summary": "\"Defines the container to which the Tooltip will be appended.\\r\\nDefaults to [\\n`body`\\n](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body).\\r\\nIf set to \\n`null`\\n, the Tooltip will not use React Portal.\"",
      "syntax": {
        "return": {
          "type": "null | HTMLElement"
        }
      }
    },
    "children": {
      "name": "children",
      "fullName": "",
      "summary": "\"Specifies the children elements of the Tooltip.\\r\\nUsed to define the content of the Tooltip.\"",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "className": {
      "name": "className",
      "fullName": "",
      "summary": "Specifies additional CSS classes for the Tooltip animation container.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "filter": {
      "name": "filter",
      "fullName": "",
      "summary": ">- Callback function to determine if the Tooltip should be displayed for a specific target element ([see example]({% slug filter_elements_tooltip %})).",
      "syntax": {
        "return": {
          "type": "'(target: HTMLElement) => void'"
        }
      }
    },
    "id": {
      "name": "id",
      "fullName": "",
      "summary": "\"Specifies the \\n`id`\\n of the wrapping element of the Tooltip component.\\r\\nUsed to uniquely identify the Tooltip element in the DOM.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "onClose": {
      "name": "onClose",
      "fullName": "",
      "summary": "\"Fires when the Tooltip is hidden.\\r\\nProvides the event details.\"",
      "syntax": {
        "return": {
          "type": "'(event: TooltipEvent) => void'"
        }
      }
    },
    "onOpen": {
      "name": "onOpen",
      "fullName": "",
      "summary": "\"Fires when the Tooltip is shown.\\r\\nProvides the event details.\"",
      "syntax": {
        "return": {
          "type": "'(event: TooltipEvent) => void'"
        }
      }
    },
    "onPosition": {
      "name": "onPosition",
      "fullName": "",
      "summary": "\"Callback function triggered when the Tooltip calculates its position.\\r\\nAllows customization of the \\n`top`\\n and \\n`left`\\n position values.\"",
      "syntax": {
        "return": {
          "type": "'(event: TooltipPositionEvent) => { left: number, top: number }'"
        }
      }
    },
    "open": {
      "name": "open",
      "fullName": "",
      "summary": "\"Controls the visibility of the Tooltip.\\r\\nWhen set, the Tooltip operates in controlled mode ([see example]({% slug controlledmode_tooltip %})).\\r\\nRequires the \\n`targetElement`\\n property to be set.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "openDelay": {
      "name": "openDelay",
      "fullName": "",
      "summary": "Specifies a delay in milliseconds before the Tooltip is displayed.",
      "syntax": {
        "return": {
          "type": "number"
        }
      }
    },
    "parentTitle": {
      "name": "parentTitle",
      "fullName": "",
      "summary": "|- Enables the Tooltip to display the title of any parent element with a `title` attribute.",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "position": {
      "name": "position",
      "fullName": "",
      "summary": "\"Sets the position of the Tooltip ([see example]({% slug positioning_tooltip %})).\\r\\n\\r\\nThe available options are:\\r\\n- (Default) \\n`auto`\\n&mdash;Automatically positions the Tooltip based on available space.\\r\\n- \\n`right`\\n&mdash;Positions the Tooltip to the right of the element.\\r\\n- \\n`left`\\n&mdash;Positions the Tooltip to the left of the element.\\r\\n- \\n`bottom`\\n&mdash;Positions the Tooltip below the element.\\r\\n- \\n`top`\\n&mdash;Positions the Tooltip above the element.\"",
      "syntax": {
        "return": {
          "type": "TooltipPosition"
        }
      }
    },
    "setCalloutOnPositionAuto": {
      "name": "setCalloutOnPositionAuto",
      "fullName": "",
      "summary": "\"Specifies the starting point of the Tooltip callout when the position is set to \\n`auto`\\n.\\r\\nAccepts a pixel value.\"",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "showCallout": {
      "name": "showCallout",
      "fullName": "",
      "summary": "Determines whether the Tooltip callout (arrow) is displayed.",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "showOption": {
      "name": "showOption",
      "fullName": "",
      "summary": "\"Configures when the Tooltip will be displayed.\\r\\nThe available options are:\\r\\n- \\n`hover`\\n&mdash;Displays the Tooltip when the mouse hovers over the target element (default).\\r\\n- \\n`click`\\n&mdash;Displays the Tooltip when the target element is clicked.\\r\\n- \\n`focus`\\n&mdash;Displays the Tooltip when the target element is focused.\\r\\n- \\n`keys`\\n&mdash;Displays the Tooltip when a specific key is pressed while the target element is focused.\\r\\n- \\n`none`\\n&mdash;Disables the Tooltip display.\"",
      "syntax": {
        "return": {
          "type": "TooltipShowOptions"
        }
      }
    },
    "style": {
      "name": "style",
      "fullName": "",
      "summary": "Specifies the styles applied to the Tooltip animation container.",
      "syntax": {
        "return": {
          "type": "CSSProperties"
        }
      }
    },
    "targetElement": {
      "name": "targetElement",
      "fullName": "",
      "summary": "\"Specifies the target element for the Tooltip.\\r\\nRequired when the Tooltip is in controlled mode.\"",
      "syntax": {
        "return": {
          "type": "any"
        }
      }
    },
    "tooltipClassName": {
      "name": "tooltipClassName",
      "fullName": "",
      "summary": "Specifies additional CSS classes for the Tooltip DOM element.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "tooltipStyle": {
      "name": "tooltipStyle",
      "fullName": "",
      "summary": "Specifies the styles applied to the Tooltip DOM element.",
      "syntax": {
        "return": {
          "type": "CSSProperties"
        }
      }
    },
    "updateInterval": {
      "name": "updateInterval",
      "fullName": "",
      "summary": "\"Specifies the interval in milliseconds for the Tooltip to check for title changes.\\r\\nBy default, the Tooltip does not track title updates.\"",
      "syntax": {
        "return": {
          "type": "number"
        }
      }
    }
  }
}