{
  "componentName": "result-TextArea-2025-09-08T12-43-05-402Z.md",
  "imports": [
    "import { TextArea } from '@progress/kendo-react-inputs';",
    "import { Editor, EditorTools } from '@progress/kendo-react-editor';",
    "import { Editor } from '@progress/kendo-react-editor';",
    "import { EditorTools } from '@progress/kendo-react-editor';"
  ],
  "examples": [
    {
      "title": "Example 1",
      "code": "import * as React from 'react';\nimport { TextArea } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <TextArea />\n    );\n}",
      "description": "React component implementation example"
    },
    {
      "title": "Example 2",
      "code": "import { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;",
      "description": "React component implementation example"
    }
  ],
  "props": {
    "ariaDescribedBy": {
      "name": "ariaDescribedBy",
      "fullName": "",
      "summary": "\"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "ariaLabelledBy": {
      "name": "ariaLabelledBy",
      "fullName": "",
      "summary": "Identifies the element(s) which will label the component.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "autoFocus": {
      "name": "autoFocus",
      "fullName": "",
      "summary": "|- Represents the `autoFocus` HTML attribute that will be applied to the input element of the TextArea. (Defaults to `false` )",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "autoSize": {
      "name": "autoSize",
      "fullName": "",
      "summary": "\"Specifies if the textarea element will resize its height automatically ([see example]({% slug sizing_textarea %})).\\r\\nDefaults to \\n`false`\\n.\\r\\n\\r\\nSetting the value of the prop to \\n`true`\\n will make the TextArea component to ignore the resize behavior of the \\n`resizable`\\n prop.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "className": {
      "name": "className",
      "fullName": "",
      "summary": "Specifies a list of CSS classes that will be added to the TextArea.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "defaultValue": {
      "name": "defaultValue",
      "fullName": "",
      "summary": ">- The default value of the TextArea ([see example]({% slug default_textarea %})).",
      "syntax": {
        "return": {
          "type": "string | number | Array<string>"
        }
      }
    },
    "dir": {
      "name": "dir",
      "fullName": "",
      "summary": "|- Represents the `dir` HTML attribute.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "disabled": {
      "name": "disabled",
      "fullName": "",
      "summary": ">- Specifies if the TextArea is disabled ([see example]({% slug disabled_textarea %})).",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "fillMode": {
      "name": "fillMode",
      "fullName": "",
      "summary": "\"Configures the \\n`fillMode`\\n of the TextArea.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"flat\" | \"solid\" | \"outline\""
        }
      }
    },
    "id": {
      "name": "id",
      "fullName": "",
      "summary": "|- Sets the `id` of the TextArea.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "inputAttributes": {
      "name": "inputAttributes",
      "fullName": "",
      "summary": "\"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"",
      "syntax": {
        "return": {
          "type": "InputHTMLAttributes"
        }
      }
    },
    "name": {
      "name": "name",
      "fullName": "",
      "summary": "\"Specifies the \\n`name`\\n property of the \\n`textarea`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "onBlur": {
      "name": "onBlur",
      "fullName": "",
      "summary": "The event handler that will be fired when TextArea is blurred.",
      "syntax": {
        "return": {
          "type": "'(event: TextAreaBlurEvent) => void'"
        }
      }
    },
    "onChange": {
      "name": "onChange",
      "fullName": "",
      "summary": "The event handler that will be fired when the changes the selected value.",
      "syntax": {
        "return": {
          "type": "'(event: TextAreaChangeEvent) => void'"
        }
      }
    },
    "onFocus": {
      "name": "onFocus",
      "fullName": "",
      "summary": "The event handler that will be fired when TextArea is focused.",
      "syntax": {
        "return": {
          "type": "'(event: TextAreaFocusEvent) => void'"
        }
      }
    },
    "placeholder": {
      "name": "placeholder",
      "fullName": "",
      "summary": "The hint that is displayed when the TextArea is empty.",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "prefix": {
      "name": "prefix",
      "fullName": "",
      "summary": "Sets a custom prefix to the TextArea component.",
      "syntax": {
        "return": {
          "type": "CustomComponent"
        }
      }
    },
    "readOnly": {
      "name": "readOnly",
      "fullName": "",
      "summary": "Sets the read-only state of the TextArea.",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "required": {
      "name": "required",
      "fullName": "",
      "summary": "\"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "resizable": {
      "name": "resizable",
      "fullName": "",
      "summary": "\"Defines the resize behavior of the TextArea.\\r\\nThe available options are:\\r\\n- none &mdash; The TextArea cannot be resized.\\r\\n- vertical &mdash; The TextArea can be resized vertically.\\r\\n- horizontal &mdash; The TextArea can be resized horizontally.\\r\\n- both(default) &mdash; The TextArea can be resized both vertically and horizontally.\\r\\n\\r\\n\\r\\nTo be able to resize the TextArea, you should not set the \\n`autoSize`\\n property to \\n`true`\\n.\\r\\nTo be able to resize the component horizontally, add the following inline style to the TextArea:\\r\\n\\r\\n\\n```html\\r\\n<TextArea resizable='horizontal' style={{width: 'auto'}}  />\\r\\n```\"",
      "syntax": {
        "return": {
          "type": "'\"horizontal\" | \"vertical\" | \"none\" | \"both\"'"
        }
      }
    },
    "rounded": {
      "name": "rounded",
      "fullName": "",
      "summary": "\"Configures the \\n`roundness`\\n of the TextArea.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"small\" | \"medium\" | \"large\" | \"full\""
        }
      }
    },
    "rows": {
      "name": "rows",
      "fullName": "",
      "summary": ">- Specifies an exact height size for the TextArea to take ([see example]({% slug sizing_textarea %})).",
      "syntax": {
        "return": {
          "type": "number"
        }
      }
    },
    "size": {
      "name": "size",
      "fullName": "",
      "summary": "\"Configures the \\n`size`\\n of the TextArea.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"",
      "syntax": {
        "return": {
          "type": "null | \"small\" | \"medium\" | \"large\""
        }
      }
    },
    "style": {
      "name": "style",
      "fullName": "",
      "summary": "Sets additional CSS styles to the TextArea.",
      "syntax": {
        "return": {
          "type": "CSSProperties"
        }
      }
    },
    "suffix": {
      "name": "suffix",
      "fullName": "",
      "summary": "Sets a custom suffix to the TextArea component.",
      "syntax": {
        "return": {
          "type": "CustomComponent"
        }
      }
    },
    "tabIndex": {
      "name": "tabIndex",
      "fullName": "",
      "summary": "\"Sets the \\n`tabIndex`\\n property of the TextArea.\\r\\nDefaults to \\n`0`\\n.\"",
      "syntax": {
        "return": {
          "type": "number"
        }
      }
    },
    "valid": {
      "name": "valid",
      "fullName": "",
      "summary": "\"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "validationMessage": {
      "name": "validationMessage",
      "fullName": "",
      "summary": "\"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "string"
        }
      }
    },
    "validityStyles": {
      "name": "validityStyles",
      "fullName": "",
      "summary": "\"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"",
      "syntax": {
        "return": {
          "type": "boolean"
        }
      }
    },
    "value": {
      "name": "value",
      "fullName": "",
      "summary": ">- Sets the value to be submitted ([see example]({% slug controlled_textarea %})).",
      "syntax": {
        "return": {
          "type": "string | number | Array<string>"
        }
      }
    },
    "props": {
      "name": "props",
      "fullName": "",
      "summary": "",
      "syntax": {
        "return": {
          "type": "TextAreaProps | RefAttributes"
        }
      }
    }
  }
}