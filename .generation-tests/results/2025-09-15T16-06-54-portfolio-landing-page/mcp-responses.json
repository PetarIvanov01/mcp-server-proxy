{
  "Chip": "## API Reference Item\n- Name: ChipProps.selected\n- Type: Property\n- Summary: Determines if the Chip is selected.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Chip } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return <Chip selected={true}>Selected Chip</Chip>;\n}\n\n```\n\n\n## API Reference Item\n- Name: Chip\n- Type: Function\n- Summary: Represents the Chip component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Chip } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Chip text=\"Chip\" />\n    );\n}\n\n```\n\n\n## Additional Context\n### ChipProps (children)\nname: ChipProps\nfullName: ChipProps\nsummary: Represents the properties of [Chip]({% slug api_buttons_chip %}) component.\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - ariaDescribedBy\n  - ariaLabel\n  - avatar\n  - children\n  - className\n  - dataItem\n  - dir\n  - disabled\n  - fillMode\n  - icon\n  - id\n  - onBlur\n  - onClick\n  - onDoubleClick\n  - onFocus\n  - onKeyDown\n  - onMouseDown\n  - onMouseEnter\n  - onMouseLeave\n  - onMouseMove\n  - onMouseOut\n  - onMouseOver\n  - onMouseUp\n  - onRemove\n  - removable\n  - removeIcon\n  - removeSvgIcon\n  - rounded\n  - selected\n  - selectedIcon\n  - selectedSvgIcon\n  - size\n  - style\n  - svgIcon\n  - tabIndex\n  - text\n  - themeColor\n  - value\n\n---\n### Chip.Chip.props (children)\nname: props\nfullName: Chip.Chip.props\nsyntax:\n  return:\n    type: ChipProps | RefAttributes\n\n\nCustom Select Icon\n\nYou can specify a select icon by using the <a href=\"/kendo-react-ui-develop/components/buttons/api/chipprops#selectedicon\">selectedIcon</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom Remove Icon Customization\n\nThe Chip component provides the following options for customizing its look and feel:\n\nDisplay avatar, custom classes and icons\nSelect icon\nCustom remove icon\nCustom content\n\nDisplay avatar, custom classes and icons\n\nYou can specify a display avatar or custom classes, icons by using the <a href=\"/kendo-react-ui-develop/components/buttons/api/chipprops#icon\">icon</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom Select Icon\n\nThe Chip enables you to render an avatar through the <a href=\"/kendo-react-ui-develop/components/buttons/api/chipprops#svg-avatar\">avatar</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nChip with Icons\n\nThe Chip enables you to render a font icon through the <a href=\"/kendo-react-ui-develop/components/buttons/api/chipprops#icon\">icon</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nChip Theme Color\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Typography": "React Typography Demo Preview\n\nThe following example demonstrates the Typography variants and styles in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Typography is part of the <a href=\"/kendo-react-ui-develop/components/common\">KendoReact Common Utilities</a> component library. The procedures for installing, importing, and using the Common Utilities are identical for all components in the package. To learn how to use the Typography and the rest of the Common Utilities, see the <a href=\"/kendo-react-ui-develop/components/common\">Getting Started with the KendoReact Common Utilities</a> guide.\n\nKey Features Key Features\n\n\n<a href=\"/kendo-react-ui-develop/components/common/typography/appearance\">Appearance</a>—You can quickly add additional style to the Typography by choosing from the predefined styling options.\n\nBuilt-in appearance options to adjust the size, fill, and form your date inputs\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled mode</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Avatar": "AppearancePremium\n\nThe <a href=\"/kendo-react-ui/components/gauges\">React Gauge component</a> enables you to set its width and height and customize its color.\n\nDimensions and Resizing\n\nKendoReact Layout Overview\n\nKendoReact Styling Overview\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ExpansionPanel": "## API Reference Item\n- Name: ExpansionPanel\n- Type: Function\n- Summary: Represents the [KendoReact ExpansionPanel component]({% slug overview_expansionpanel %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ExpansionPanel, ExpansionPanelContent, ExpansionPanelActionEvent } from '@progress/kendo-react-layout';\nimport { Reveal } from '@progress/kendo-react-animation';\n\nconst imgPath = 'https://demos.telerik.com/kendo-react-ui/assets/layout/countries/brazil.jpg';\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    return (\n        <>\n            <ExpansionPanel\n                title=\"Brazil\"\n                subtitle=\"South America\"\n                expanded={expanded}\n                onAction={(event: ExpansionPanelActionEvent) => {\n                    setExpanded(!event.expanded);\n                }}\n            >\n                <Reveal>\n                    {expanded && (\n                        <ExpansionPanelContent>\n                            <div className=\"content\">\n                                <div className=\"image-container\">\n                                    <img src={imgPath} alt=\"KendoReact Layout Brazil\" />\n                                </div>\n                                <span>\n                                    The word “Brazil” likely comes from the Portuguese word for brazilwood, a tree that\n                                    once grew plentifully along the Brazilian coast. In Portuguese, brazilwood is called\n                                    pau-brasil, with the word brasil commonly given the etymology “red like an ember”,\n                                    formed from brasa (“ember”) and the suffix -il (from -iculum or -ilium). As\n                                    brazilwood produces a deep red dye, it was highly valued by the European textile\n                                    industry and was the earliest commercially exploited product from Brazil. Throughout\n                                    the 16th century, massive amounts of brazilwood were harvested by indigenous peoples\n                                    (mostly Tupi) along the Brazilian coast, who sold the timber to European traders\n                                    (mostly Portuguese, but also French) in return for assorted European consumer goods.\n                                </span>\n                            </div>\n                        </ExpansionPanelContent>\n                    )}\n                </Reveal>\n            </ExpansionPanel>\n            <style>\n                {`.wrapper {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n\n            .k-expander {\n                width: 600px;\n            }\n\n            .content {\n                display: flex;\n            }\n\n            .image-container {\n                height: 250px;\n                margin-right: 20px;\n            }\n\n            img {\n                height: 100%;\n            }\n\n            .content-text {\n                display: block;\n                text-align: justify;\n            }\n            `}\n            </style>\n        </>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ExpansionPanel.ExpansionPanel.props (children)\nname: props\nfullName: ExpansionPanel.ExpansionPanel.props\nsyntax:\n  return:\n    type: ExpansionPanelProps | RefAttributes\n\n\n## API Reference Item\n- Name: ExpansionPanelProps.className\n- Type: Property\n- Summary: Sets additional CSS classes to the ExpansionPanel.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ExpansionPanel, ExpansionPanelContent, ExpansionPanelActionEvent } from '@progress/kendo-react-layout';\nimport { Reveal } from '@progress/kendo-react-animation';\n\nconst imgPath = 'https://demos.telerik.com/kendo-react-ui/assets/layout/countries/brazil.jpg';\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    return (\n        <>\n            <ExpansionPanel\n                title=\"Brazil\"\n                subtitle=\"South America\"\n                expanded={expanded}\n                className=\"custom-class\"\n                onAction={(event: ExpansionPanelActionEvent) => {\n                    setExpanded(!event.expanded);\n                }}\n            >\n                <Reveal>\n                    {expanded && (\n                        <ExpansionPanelContent>\n                            <div className=\"content\">\n                                <div className=\"image-container\">\n                                    <img src={imgPath} alt=\"KendoReact Layout Brazil\" />\n                                </div>\n                                <span>\n                                    The word “Brazil” likely comes from the Portuguese word for brazilwood, a tree that\n                                    once grew plentifully along the Brazilian coast. In Portuguese, brazilwood is called\n                                    pau-brasil, with the word brasil commonly given the etymology “red like an ember”,\n                                    formed from brasa (“ember”) and the suffix -il (from -iculum or -ilium). As\n                                    brazilwood produces a deep red dye, it was highly valued by the European textile\n                                    industry and was the earliest commercially exploited product from Brazil. Throughout\n                                    the 16th century, massive amounts of brazilwood were harvested by indigenous peoples\n                                    (mostly Tupi) along the Brazilian coast, who sold the timber to European traders\n                                    (mostly Portuguese, but also French) in return for assorted European consumer goods.\n                                </span>\n                            </div>\n                        </ExpansionPanelContent>\n                    )}\n                </Reveal>\n            </ExpansionPanel>\n            <style>\n                {`.wrapper {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n\n            .k-expander {\n                width: 600px;\n            }\n\n            .content {\n                display: flex;\n            }\n\n            .image-container {\n                height: 250px;\n                margin-right: 20px;\n            }\n\n            img {\n                height: 100%;\n            }\n\n            .content-text {\n                display: block;\n                text-align: justify;\n            }\n            `}\n            </style>\n        </>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: ExpansionPanelProps\n- Type: Interface\n- Summary: The props of the ExpansionPanel component.\n- Syntax: \n\n## Additional Context\n### ExpansionPanelProps.ariaControls (children)\nname: ariaControls\nfullName: ExpansionPanelProps.ariaControls\nsummary: |-\n  Sets \n  `aria-controls`\n  . The value should represent the \n  `id`\n   of the controlled content element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.children (children)\nname: children\nfullName: ExpansionPanelProps.children\nsummary: The React elements that will be rendered inside the ExpansionPanel.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.collapseIcon (children)\nname: collapseIcon\nfullName: ExpansionPanelProps.collapseIcon\nsummary: >-\n  Sets a custom icon via css class(es), for the collapsed state of the\n  ExpansionPanel.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.collapseSVGIcon (children)\nname: collapseSVGIcon\nfullName: ExpansionPanelProps.collapseSVGIcon\nsummary: Sets a custom SVG icon for the collapsed state of the ExpansionPanel.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.dir (children)\nname: dir\nfullName: ExpansionPanelProps.dir\nsummary: |-\n  Sets the \n  `dir`\n   property of the ExpansionPanel.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.disabled (children)\nname: disabled\nfullName: ExpansionPanelProps.disabled\nsummary: |-\n  Sets the \n  `disabled`\n   state of the ExpansionPanel.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.expandIcon (children)\nname: expandIcon\nfullName: ExpansionPanelProps.expandIcon\nsummary: >-\n  Sets a custom icon via css class(es), for the expanded state of the\n  ExpansionPanel.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.expandSVGIcon (children)\nname: expandSVGIcon\nfullName: ExpansionPanelProps.expandSVGIcon\nsummary: Sets a custom SVG icon for the expanded state of the ExpansionPanel.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.expanded (children)\nname: expanded\nfullName: ExpansionPanelProps.expanded\nsummary: |-\n  Sets the \n  `expanded`\n   state of the ExpansionPanel.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.id (children)\nname: id\nfullName: ExpansionPanelProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root ExpansionPanel element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.onAction (children)\nname: onAction\nfullName: ExpansionPanelProps.onAction\nsummary: >-\n  The event handler that will be fired when the expanded state of the\n  ExpansionPanel is about to change.\nsyntax:\n  return:\n    type: '(event: ExpansionPanelActionEvent) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.style (children)\nname: style\nfullName: ExpansionPanelProps.style\nsummary: Sets additional CSS styles to the ExpansionPanel.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.subtitle (children)\nname: subtitle\nfullName: ExpansionPanelProps.subtitle\nsummary: >-\n  Specifies the secondary text in the header of the ExpansionPanel, which is\n  rendered next to the collapse/expand icon.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.tabIndex (children)\nname: tabIndex\nfullName: ExpansionPanelProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   property of the ExpansionPanel.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### ExpansionPanelProps.title (children)\nname: title\nfullName: ExpansionPanelProps.title\nsummary: Specifies the primary text in the header of the ExpansionPanel.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n\nCustom Icons\n\nThe ExpansionPanel provides the option to customize the icon indicators.\nYou can replace both the expand and collapse icons with custom font icons by using the <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#expandicon\">expandIcon</a> and <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#collapseicon\">collapseIcon</a> properties.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe ExpansionPanel is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the ExpansionPanel and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features\n\nCustom Icons\n\nThe ExpansionPanel provides the option to customize the icon indicators.\nYou can replace both the expand and collapse icons with custom font icons by using the <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#expandicon\">expandIcon</a> and <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#collapseicon\">collapseIcon</a> properties.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Toolbar": "## API Reference Item\n- Name: Toolbar\n- Type: Function\n- Summary: Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Toolbar>\n            <span>Toolbar content</span>\n        </Toolbar>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ToolbarProps (children)\nname: ToolbarProps\nfullName: ToolbarProps\nsummary: >-\n  Represents the props of the [KendoReact Toolbar component]({% slug\n  overview_toolbar %}).\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - ariaLabel\n  - buttonScrollSpeed\n  - children\n  - className\n  - dir\n  - fillMode\n  - id\n  - keyboardNavigation\n  - nextButton\n  - onResize\n  - overflow\n  - prevButton\n  - scrollButtons\n  - scrollButtonsPosition\n  - size\n  - style\n  - tabIndex\n\n---\n### Toolbar.Toolbar.props (children)\nname: props\nfullName: Toolbar.Toolbar.props\nsyntax:\n  return:\n    type: ToolbarProps | RefAttributes\n\n\nChip\nA component allowing users to enter information, make selections, filter content, or trigger actions.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/chiplist\">\n\n\n\nChipList\nA component allowing you to maintain a set of selected chips.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/floatingactionbutton\">\n\nfloatingactionbutton\n\nThe KendoReact Data Tools is a collection of customizable, responsive, and interactive UI components that you can use to filter and page data.\n\nExplain dropdown menus like the <a href=\"/kendo-react-ui/components/dropdowns/combobox\">ComboBox</a>, <a href=\"/kendo-react-ui/components/dropdowns/dropdownlist\">DropDownList</a>, or <a href=\"/kendo-react-ui/components/dropdowns/multiselect\">MultiSelect</a>.\nClarify the available selections for <a href=\"/kendo-react-ui/components/inputs/checkbox\">Checkboxes</a> and <a href=\"/kendo-react-ui/components/inputs/radiobutton\">RadioButtons</a>.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Form": "## API Reference Item\n- Name: FormClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Form component]({% slug overview_form %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FieldRenderProps,\n    FormRenderProps,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### FormClassComponent._fields (children)\nname: _fields\nfullName: FormClassComponent._fields\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._key (children)\nname: _key\nfullName: FormClassComponent._key\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._modified (children)\nname: _modified\nfullName: FormClassComponent._modified\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._submitted (children)\nname: _submitted\nfullName: FormClassComponent._submitted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._touched (children)\nname: _touched\nfullName: FormClassComponent._touched\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._unmounted (children)\nname: _unmounted\nfullName: FormClassComponent._unmounted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._validatorsByField (children)\nname: _validatorsByField\nfullName: FormClassComponent._validatorsByField\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._values (children)\nname: _values\nfullName: FormClassComponent._values\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._visited (children)\nname: _visited\nfullName: FormClassComponent._visited\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.licenseMessage (children)\nname: licenseMessage\nfullName: FormClassComponent.licenseMessage\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onChange (children)\nname: onChange\nfullName: FormClassComponent.onChange\nsummary: \"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"\nsyntax:\n  return:\n    type: '(name: string, options: Object) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onReset (children)\nname: onReset\nfullName: FormClassComponent.onReset\nsummary: \"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.showLicenseWatermark (children)\nname: showLicenseWatermark\nfullName: FormClassComponent.showLicenseWatermark\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps (children)\nname: FormProps\nfullName: FormProps\nsummary: Contains the props for the KendoReact Form component.\nsyntax: {}\npackageName: '@progress/kendo-react-form'\nmembers:\n  - ignoreModified\n  - initialValues\n  - onSubmit\n  - onSubmitClick\n  - render\n  - validator\n\n\n## API Reference Item\n- Name: FormProps.validator\n- Type: Property\n- Summary: Validates the entire form and returns error messages.\r\n\r\nReturn a key-value pair where the key is the field path and the value is the error message.\r\nYou can validate nested fields like 'users[0].name'.\r\nOnly synchronous functions are supported.\n- Syntax: \n\n- Return Type: name: FormValidatorType\nfullName: FormValidatorType\nsummary: \"Validates an entire form and returns error messages.\\r\\n\\r\\n* values - Contains the current values from all form fields\\r\\n* valueGetter - Gets field values using field paths like 'user.name'\\r\\n\\r\\nReturns a key-value pair where the key is the field path and the value is the error message.\"\nsyntax:\n  return:\n    type: '(values: any, valueGetter: Function) => KeyValue | undefined'\npackageName: '@progress/kendo-react-form'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Form, Field, FormElement, FieldRenderProps, FormRenderProps, FormFieldSet } from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { getter } from '@progress/kendo-react-common';\n\nconst firstNameGetter: any = getter('user.firstName');\nconst lastNameGetter: any = getter('user.lastName');\n\nconst firstOrLastNameValidator = (values: any) => {\n    if (firstNameGetter(values) || lastNameGetter(values)) {\n        return;\n    }\n\n    return {\n        VALIDATION_SUMMARY: 'Please fill at least one of the following fields.',\n        'user.firstName': 'Please check the validation summary for more information.',\n        'user.lastName': 'Please check the validation summary for more information.'\n    };\n};\n\nconst ValidatedInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div>\n            <Input {...others} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nconst App = () => {\n    const handleSubmit = (dataItem: any) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validator={firstOrLastNameValidator}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FormFieldSet legend={'Please fill in the following information:'}>\n                        {formRenderProps.visited && formRenderProps.errors?.VALIDATION_SUMMARY && (\n                            <div className={'k-messagebox k-messagebox-error'}>\n                                {formRenderProps.errors.VALIDATION_SUMMARY}\n                            </div>\n                        )}\n                        <div className=\"mb-3\">\n                            <Field name={'user.firstName'} component={ValidatedInput} label={'First name'} />\n                        </div>\n                        <div className=\"mb-3\">\n                            <Field name={'user.lastName'} component={ValidatedInput} label={'Last name'} />\n                        </div>\n                    </FormFieldSet>\n                    <div className=\"k-form-buttons\">\n                        <Button disabled={!formRenderProps.allowSubmit}>Submit</Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n};\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Field\n- Type: Function\n- Summary: Represents the Field component that is used inside the KendoReact Form component.\r\nIt uses \n`name`\n property to access field value and meta information from Form state.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FormRenderProps,\n    FieldRenderProps,\n    FormFieldSet,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { Error } from '@progress/kendo-react-labels';\n\nconst requiredValidator = (value: string) => (value ? '' : 'This field is required.');\n\nconst RequiredInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FormFieldSet legend=\"Please fill in the fields:\">\n                        <FieldWrapper>\n                            <div className=\"k-form-field-wrap\">\n                                <Field\n                                    name={'firstName'}\n                                    component={RequiredInput}\n                                    labelClassName={'k-form-label'}\n                                    label={'First name'}\n                                    validator={requiredValidator}\n                                />\n                            </div>\n                        </FieldWrapper>\n                        <FieldWrapper>\n                            <div className=\"k-form-field-wrap\">\n                                <Field\n                                    name={'lastName'}\n                                    component={RequiredInput}\n                                    labelClassName={'k-form-label'}\n                                    label={'Last name'}\n                                    validator={requiredValidator}\n                                />\n                            </div>\n                        </FieldWrapper>\n                    </FormFieldSet>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                        <Button onClick={formRenderProps.onFormReset}>Reset</Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### FieldProps (children)\nname: FieldProps\nfullName: FieldProps\nsummary: Contains the props for the Field component that you use inside forms.\nsyntax: {}\npackageName: '@progress/kendo-react-form'\nmembers:\n  - children\n  - colSpan\n  - component\n  - name\n  - onChange\n  - validator\n\n---\n### Field.Field.props (children)\nname: props\nfullName: Field.Field.props\nsyntax:\n  return:\n    type: 'FieldProps | { [key: string]: any }'\n\n\nWe use form validation to make sure that users provide correct information in terms of format, content length, etc. For example, is the phone number an actual number, did the user put info in all of the required fields, and so on.\n\nHow it Works?\n\nKendoReact supports handling user input in the UI, and displays useful validation messages using the Form, Field, and Error components. Refer to the <a href=\"/kendo-react-ui-develop/components/form/validation\">article on form validation</a> for further details and runnable demos.\n\nField-level Form Validation Form-level Validation\n\nForm-level validation is used to show validation summary of all fields or complex validation constraints between several fields. It is usually shown when the user is ready to proceed to another step or clicks the Submit button.\n\nValidation Summary\n\nThe validation summary displays a list of all validation errors in a single place. You can also use it to display complex validations messages. This approach can be useful when dealing with large forms, especially if the form contains parts that are temporarily hidden.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nRead-only & Disabled Components\n\nValidationPremium\n\nThe Form Wizard uses the KendoReact Form component to check user input. You can block users from moving to the next step until they complete all required fields. You can also choose to check all fields only when a user submits the form.\nThis example shows a multi-step form that checks inputs at each step:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Drawer": "## API Reference Item\n- Name: Drawer\n- Type: Function\n- Summary: Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DrawerProps (children)\nname: DrawerProps\nfullName: DrawerProps\nsummary: >-\n  The properties of the [KendoReact Drawer component]({% slug overview_drawer\n  %}).\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - animation\n  - children\n  - className\n  - dir\n  - drawerClassName\n  - expanded\n  - item\n  - items\n  - mini\n  - miniWidth\n  - mode\n  - onOverlayClick\n  - onSelect\n  - position\n  - style\n  - tabIndex\n  - width\n\n---\n### Drawer.Drawer.props (children)\nname: props\nfullName: Drawer.Drawer.props\nsyntax:\n  return:\n    type: DrawerProps | RefAttributes\n\n\n## API Reference Item\n- Name: DrawerProps.onOverlayClick\n- Type: Property\n- Summary: The event handler that will be fired when the overlay is clicked.\r\nUsed in overlay mode only.\r\n\r\nExample:\r\n\n```jsx\r\n<Drawer onOverlayClick={(e) => console.log('Overlay clicked')} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { inboxIcon, calendarIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst items = [\n    { text: 'Inbox', svgIcon: inboxIcon, selected: true },\n    { text: 'Calendar', svgIcon: calendarIcon },\n    { text: 'Favourites', svgIcon: heartIcon }\n];\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selectedId, setSelectedId] = React.useState<number>(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded((prevState) => !prevState);\n    };\n\n    const handleSelect = (ev: DrawerSelectEvent) => {\n        setSelectedId(ev.itemIndex);\n        setExpanded(false);\n    };\n\n    const handleOverlayClick = () => {\n        console.log('Overlay clicked - closing drawer');\n        setExpanded(false);\n    };\n\n    return (\n        <Drawer\n            expanded={expanded}\n            items={items.map((item, index) => ({\n                ...item,\n                selected: index === selectedId\n            }))}\n            onSelect={handleSelect}\n            onOverlayClick={handleOverlayClick}\n        >\n            <DrawerContent>\n                <Button onClick={handleClick}>Toggle the drawer state</Button>\n            </DrawerContent>\n        </Drawer>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: DrawerProps.position\n- Type: Property\n- Summary: Specifies the position of the Drawer\r\n([see example]({% slug positioning_drawer %})).\r\n\r\nExample:\r\n\n```jsx\r\n<Drawer position=\"end\" />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { inboxIcon, calendarIcon, bellIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Inbox', svgIcon: inboxIcon, selected: true },\n    { separator: true },\n    { text: 'Notifications', svgIcon: bellIcon },\n    { text: 'Calendar', svgIcon: calendarIcon },\n    { separator: true }\n];\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selectedId, setSelectedId] = React.useState<number>(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded((prevState) => !prevState);\n    };\n\n    const handleSelect = (ev: DrawerSelectEvent) => {\n        setSelectedId(ev.itemIndex);\n        setExpanded(false);\n    };\n\n    return (\n        <div>\n            <Drawer\n                expanded={expanded}\n                position={'end'}\n                mode={'push'}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selectedId\n                }))}\n                onSelect={handleSelect}\n            >\n                <DrawerContent>\n                    <div className=\"k-form\">\n                        <div className=\"k-form-field\">\n                            <Button onClick={handleClick}>Toggle the Drawer state</Button>\n                        </div>\n                    </div>\n                </DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: DrawerProps.onSelect\n- Type: Property\n- Summary: Fires when a Drawer item is selected.\r\n\r\nExample:\r\n\n```jsx\r\n<Drawer onSelect={(e) => console.log('Item selected', e)} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { inboxIcon, calendarIcon, heartIcon, linkIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst items = [\n    { text: 'Inbox', svgIcon: inboxIcon, selected: true },\n    { text: 'Calendar', svgIcon: calendarIcon },\n    { text: 'Attachments', svgIcon: linkIcon },\n    { text: 'Favourites', svgIcon: heartIcon }\n];\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selectedId, setSelectedId] = React.useState<number>(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded((prevState) => !prevState);\n    };\n\n    const handleSelect = (ev: DrawerSelectEvent) => {\n        console.log('Item selected:', ev);\n        setSelectedId(ev.itemIndex);\n    };\n\n    return (\n        <Drawer\n            expanded={expanded}\n            position=\"start\"\n            mode=\"push\"\n            items={items.map((item, index) => ({\n                ...item,\n                selected: index === selectedId\n            }))}\n            onSelect={handleSelect}\n        >\n            <DrawerContent>\n                <Button onClick={handleClick}>Toggle the drawer state</Button>\n            </DrawerContent>\n        </Drawer>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DrawerSelectEvent (generic)\nname: DrawerSelectEvent\nfullName: DrawerSelectEvent\nsummary: |-\n  The arguments for the \n  `onSelect`\n   Drawer event.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - itemIndex\n  - itemTarget\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n## API Reference Item\n- Name: DrawerProps.item\n- Type: Property\n- Summary: Overrides the default component responsible for visualizing a single item\r\n([see example]({% slug custom_rendering %})).\r\n\r\nExample:\r\n\n```jsx\r\n<Drawer item={CustomDrawerItem} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent, DrawerItem } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { inboxIcon, calendarIcon, bellIcon, menuIcon } from '@progress/kendo-svg-icons';\nimport { SvgIcon } from '@progress/kendo-react-common';\nconst items = [\n    { text: 'Inbox', svgIcon: inboxIcon, selected: true, route: '/inbox' },\n    { separator: true },\n    { text: 'Notifications', svgIcon: bellIcon, route: '/notifications' },\n    { text: 'Calendar', svgIcon: calendarIcon, route: '/calendar' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState(false);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    const CustomItem = (item) => {\n        return (\n            <DrawerItem {...item}>\n                <div className=\"item-descr-wrap\">\n                    <div>Custom template of the {item.text} item</div>\n                    <span>\n                        Has a custom icon: <SvgIcon icon={item.svgIcon} />\n                    </span>\n                </div>\n            </DrawerItem>\n        );\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n                item={CustomItem}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Inbox = () => {\n    return <div>Inbox Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Notifications = () => {\n    return <div>Notifications Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Calendar = () => {\n    return <div>Calendar Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Inbox />} />\n                    <Route path=\"/notifications\" element={<Notifications />} />\n                    <Route path=\"/calendar\" element={<Calendar />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\nThe KendoReact Drawer component is a dismissible panel for navigating in responsive web applications.\nIt also enables the user to change the content of a specific section of the page.\nThis   is   a  Free React  DrawerThe KendoReact  Drawer   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library. <a href=\"/kendo-react-ui-develop/components/layout/drawer/positioning\">Positioning</a>—Drawer enables you to specify its position relative to the page content.\n<a href=\"/kendo-react-ui-develop/components/layout/drawer/routing\">Routing</a>—You can use the Drawer as a container for navigational components with any router library.\n\nTo configure the expand mode, use the <a href=\"/kendo-react-ui/components/layout/api/drawerprops#mode\">mode</a> property of the Drawer.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nMini View\n\nA compact view can be displayed when the Drawer is collapsed. To toggle between expanded and compact views, use its <a href=\"/kendo-react-ui/components/layout/api/drawerprops#mode\">mini</a> property of the Drawer.\n\nThe Drawer will always be visible displaying only the item icon even when it is collapsed.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "PanelBar": "## API Reference Item\n- Name: PanelBarProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the PanelBar.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <PanelBar style={{ border: '2px solid blue' }}>\n            <PanelBarItem title=\"Projects\">\n                <PanelBarItem title=\"New Business Plan\" />\n                <PanelBarItem title=\"Sales Forecasts\">\n                    <PanelBarItem title=\"Q1 Forecast\" />\n                    <PanelBarItem title=\"Q2 Forecast\" />\n                    <PanelBarItem title=\"Q3 Forecast\" />\n                    <PanelBarItem title=\"Q4 Forecast\" />\n                </PanelBarItem>\n                <PanelBarItem title=\"Sales Reports\" />\n            </PanelBarItem>\n        </PanelBar>\n    );\n}\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: PanelBar\n- Type: Class\n- Summary: Represents the [KendoReact PanelBar component]({% slug overview_panelbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 2\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 3\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 4\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 5\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 6\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 7\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 8\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n\n\n## Additional Context\n### PanelBar.constructor (children)\nname: constructor\nfullName: PanelBar.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar._element (children)\nname: _element\nfullName: PanelBar._element\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.activeDescendant (children)\nname: activeDescendant\nfullName: PanelBar.activeDescendant\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleKeyDown (children)\nname: handleKeyDown\nfullName: PanelBar.handleKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleWrapperBlur (children)\nname: handleWrapperBlur\nfullName: PanelBar.handleWrapperBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleWrapperFocus (children)\nname: handleWrapperFocus\nfullName: PanelBar.handleWrapperFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.nextTickId (children)\nname: nextTickId\nfullName: PanelBar.nextTickId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.children (children)\nname: children\nfullName: PanelBar.children\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.expandMode (children)\nname: expandMode\nfullName: PanelBar.expandMode\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.expandedItems (children)\nname: expandedItems\nfullName: PanelBar.expandedItems\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.selectedItem (children)\nname: selectedItem\nfullName: PanelBar.selectedItem\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.nextTick (children)\nname: nextTick\nfullName: PanelBar.nextTick\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: PanelBarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact PanelBar component]({% slug overview_panelbar %}).\n- Syntax: \n\n## Additional Context\n### PanelBarProps.animation (children)\nname: animation\nfullName: PanelBarProps.animation\nsummary: Sets the animation state of the PanelBar.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.children (children)\nname: children\nfullName: PanelBarProps.children\nsummary: The child can be either a single PanelBarItem or a PanelBarItem array.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.className (children)\nname: className\nfullName: PanelBarProps.className\nsummary: The class name that is set to the PanelBar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.dir (children)\nname: dir\nfullName: PanelBarProps.dir\nsummary: Sets the direction of the PanelBar component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.expandMode (children)\nname: expandMode\nfullName: PanelBarProps.expandMode\nsummary: \"Sets the expand mode of the PanelBar ([see example]({% slug expandmodes_panelbar %})).\\r\\n\\r\\nThe available modes are:\\r\\n- \\n`\\\"single\\\"`\\n&mdash;Allows you to expand only one item at a time. The expanding of an item collapses the item that was previously expanded.\\r\\n- \\n`\\\"multiple\\\"`\\n&mdash;Allows you to expand two or more items at a time. Items can also be toggled.\"\nsyntax:\n  return:\n    type: PanelBarExpandMode\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.expanded (children)\nname: expanded\nfullName: PanelBarProps.expanded\nsummary: |-\n  Sets the initial expanded state of the PanelBar. Takes the \n  `id`\n   of the item.\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.focused (children)\nname: focused\nfullName: PanelBarProps.focused\nsummary: |-\n  Sets the initial focused state of the PanelBar. Takes the \n  `id`\n   of the item.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.isControlled (children)\nname: isControlled\nfullName: PanelBarProps.isControlled\nsummary: Determines if the PanelBar is going to be used in controlled state.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.keepItemsMounted (children)\nname: keepItemsMounted\nfullName: PanelBarProps.keepItemsMounted\nsummary: Determines if the PanelBar items will be mounted after expand collapse.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.onSelect (children)\nname: onSelect\nfullName: PanelBarProps.onSelect\nsummary: >-\n  Fires each time the user makes a selection ([see example]({% slug\n  controlling_state_panelbar %})).\nsyntax:\n  return:\n    type: '(event: PanelBarSelectEventArguments) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.selected (children)\nname: selected\nfullName: PanelBarProps.selected\nsummary: >-\n  If set, overrides the currently selected property in the PanelBar state. Takes\n  the \n\n  `id`\n   of the item.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\nKendoReact PanelBar Overview\n\nThe KendoReact PanelBar displays hierarchical data as a multi-level, expandable component.\nYou can describe the children items by:\n\nUsing nested PanelBarItem components, or\n<a href=\"/kendo-react-ui-develop/components/layout/panelbar/data-binding\">Binding a data collection</a> to the PanelBarItem components. <a href=\"/kendo-react-ui-develop/components/layout/panelbar/animations\">Animations</a>—The PanelBar comes with built-in show and hide animations.\n<a href=\"/kendo-react-ui-develop/components/layout/panelbar/routing\">Routing</a>—You can use the PanelBar as a container for navigational components with any router library.\n<a href=\"/kendo-react-ui-develop/components/layout/globalization\">Globalization</a>—The PanelBar has built-in globalization support.\n\n<a href=\"https://telerik.github.io/kendo-react/kendo-react-tailwind/\" rel=\"noopener\" target=\"_blank\">Open the sample in a new tab</a> to explore its responsive design, built with Tailwind CSS utility classes.\n\nCustomizing Styled KendoReact Components with Tailwind CSS\n\nSince KendoReact components do not natively utilize Tailwind CSS utility classes in their markup, you cannot style them directly using Tailwind CSS class names. Instead, you can customize their visual appearance by overriding the corresponding Kendo UI theme variables with default Tailwind CSS variables or with your own custom variables.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Card": "## API Reference Item\n- Name: CardProps.className\n- Type: Property\n- Summary: Sets additional classes to the Card.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            className=\"custom-card-class\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Card\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### CardProps (children)\nname: CardProps\nfullName: CardProps\nsyntax:\n  return:\n    type: any\n  parameters:\n    - id: 26200\n      name: key\n      type: string\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - dir\n  - orientation\n  - style\n  - type\n\n---\n### Card.Card.props (children)\nname: props\nfullName: Card.Card.props\nsyntax:\n  return:\n    type: Omit<CardProps, \"ref\"> | RefAttributes\n\n\n## API Reference Item\n- Name: CardProps.orientation\n- Type: Property\n- Summary: Sets the Card orientation.\r\n\r\nThe supported values are:\r\n* \n`horizontal`\n - Default\r\n* \n`vertical`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            orientation=\"vertical\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\nThe following example demonstrates the Card in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Card is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Card and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features <a href=\"/kendo-react-ui-develop/components/layout/card/orientation\">Orientation</a>—You can arrange the content of the Card vertically or horizontally.\n<a href=\"/kendo-react-ui-develop/components/layout/card/types\">Types</a>—The predefined types provide a convenient way to change the appearance of the Card.\n<a href=\"/kendo-react-ui-develop/components/layout/card/action_buttons\">Actions</a>—The Card allows you to render custom action buttons and to customize their orientation and layout.\n\nOrientation\n\nThe Card enables you to arrange its content either vertically or horizontally.\nTo set the Card orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/cardprops#orientation\">orientation</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Badge": "## API Reference Item\n- Name: BadgeProps.fillMode\n- Type: Property\n- Summary: Specifies the appearance fill style of the Badge.\r\n\r\nThe possible values are:\r\n* \n`solid`\n (Default)\r\n* \n`outline`\n\r\n* null&mdash;Does not set a fillMode \n`className`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge fillMode=\"outline\" themeColor=\"info\" />\n        </Button>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Badge\n- Type: Function\n- Summary: Represents the [KendoReact Badge component]({% slug overview_badge %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge themeColor=\"info\" />\n        </Button>\n    );\n}\n\n```\n\n\n## Additional Context\n### BadgeProps (children)\nname: BadgeProps\nfullName: BadgeProps\nsummary: >-\n  Represents the props of the [KendoReact Badge component]({% slug\n  overview_badge %}).\nsyntax: {}\npackageName: '@progress/kendo-react-indicators'\nmembers:\n  - align\n  - children\n  - className\n  - cutoutBorder\n  - dir\n  - fillMode\n  - position\n  - rounded\n  - size\n  - style\n  - themeColor\n\n---\n### Badge.Badge.props (children)\nname: props\nfullName: Badge.Badge.props\nsyntax:\n  return:\n    type: BadgeProps | RefAttributes\n\n\n<a href=\"/kendo-react-ui-develop/components/indicators/badge/badge-container\">Badge Container</a>—You can use the KendoReact Badge Container to position and wrap the Badge component.\n<a href=\"/kendo-react-ui-develop/components/indicators/badge/positioning\">Positioning</a>—You can position the KendoReact Badge in relation to its parent container.\n<a href=\"/kendo-react-ui-develop/components/indicators/badge/appearance\">Appearance</a>—You can quickly style the Badge by choosing from the predefined styling options. The Badge component is a visual indicator for UI elements. It enables you to easily show statuses, notifications, and short messages in your app. Badges provide additional contextual information for other elements on the page.\nThe KendoReact Badge is distributed through the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-indicators\" rel=\"noopener\" target=\"_blank\">kendo-react-indicators NPM package</a>. The Badge is part of the <a href=\"/kendo-react-ui-develop/components/indicators\">KendoReact Indicators</a> component library. The procedures for installing, importing, and using the Indicators are identical for all components in the package. To learn how to use the Badge and the rest of the Indicators, see the <a href=\"/kendo-react-ui-develop/components/indicators/get-started\">Getting Started with the KendoReact Indicators</a> guide.\n\nKey Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Error": "## API Reference Item\n- Name: Error.Error(props:ErrorProps)\n- Type: CallSignature\n- Summary: Represents the KendoReact Error component.\r\nRender the error text that will be shown underneath the form editor after a validation.\n- Syntax: \n\n- Return Type: name: Element\nfullName: Element\nsyntax: {}\npackageName: '@progress/kendo-drawing'\n\n\n## API Reference Item\n- Name: ErrorProps.style\n- Type: Property\n- Summary: The styles that are applied to the Error.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Error } from '@progress/kendo-react-labels';\n\nexport default function App() {\n    return (\n        <Error style={{ color: 'red', fontWeight: 'bold' }}>\n            This is an error message.\n        </Error>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: ErrorProps.direction\n- Type: Property\n- Summary: Specifies the alignment of the Error text.\r\n\r\nThe possible values are:\r\n* (Default) \n`start`\n\r\n* \n`end`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input, InputChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [value, setValue] = React.useState<string>('');\n    return (\n        <>\n            <Input value={value} onChange={(e: InputChangeEvent) => setValue(e.value)} />\n            {value === '' && <Error direction=\"end\">Empty values not allowed</Error>}\n        </>\n    );\n}\n\n```\n\n\n<a href=\"/kendo-react-ui/components/animation\">KendoReact Animations</a>\n<a href=\"/kendo-react-ui/components/buttons\">KendoReact Buttons</a>\n\nAnimation\n\nTo enable the ProgressBar animation, set the <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#animation\">animation</a> option to true.\nBy default, animation is set to false.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\nBy default, the animation duration is 400ms. To provide a different duration, set the duration option of ProgressBarAnimation to the desired value.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nBuilt-in content arrangement and positioning options\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled mode</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "StackLayout": "## API Reference Item\n- Name: StackLayoutProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\n- Syntax: \n\n## Additional Context\n### StackLayoutProps.align (children)\nname: align\nfullName: StackLayoutProps.align\nsummary: \"Specifies the horizontal and vertical alignment of the inner StackLayout elements.\\r\\nDemo ([here]({% slug layout_stacklayout %}#toc-horizontal-alignment)) and ([here]({% slug layout_stacklayout %}#toc-vertical-alignment)).\\r\\n\\r\\nThe possible keys are:\\r\\n* \\n`horizontal`\\n&mdash;Defines the possible horizontal alignment of the inner StackLayout elements.\\r\\n  * \\n`start`\\n&mdash;Uses the start point of the container.\\r\\n  * \\n`center`\\n&mdash;Uses the central point of the container.\\r\\n  * \\n`end`\\n&mdash;Uses the end point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the width of the container.\\r\\n* \\n`vertical`\\n&mdash;Defines the possible vertical alignment of the inner StackLayout elements.\\r\\n  * \\n`top`\\n&mdash;Uses the top point of the container.\\r\\n  * \\n`middle`\\n&mdash;Uses the middle point of the container.\\r\\n  * \\n`bottom`\\n&mdash;Uses the bottom point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the height of the container.\"\nsyntax:\n  return:\n    type: StackLayoutAlign\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.children (children)\nname: children\nfullName: StackLayoutProps.children\nsummary: The React elements that will be rendered inside the StackLayout.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.id (children)\nname: id\nfullName: StackLayoutProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root StackLayout element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.orientation (children)\nname: orientation\nfullName: StackLayoutProps.orientation\nsummary: \"Specifies the StackLayout orientation.\\r\\n([see example]({% slug layout_stacklayout %}#toc-orientation)).\\r\\n\\r\\nThe possible values are:\\r\\n* (Default)\\n`horizontal`\\n\\r\\n* \\n`vertical`\"\nsyntax:\n  return:\n    type: StackLayoutOrientation\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.style (children)\nname: style\nfullName: StackLayoutProps.style\nsummary: Sets additional CSS styles to the StackLayout.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: StackLayoutProps.className\n- Type: Property\n- Summary: Sets additional CSS classes to the StackLayout.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout className=\"custom-stacklayout-class\" gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: StackLayout\n- Type: Function\n- Summary: Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\r\nArranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={100}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StackLayout.StackLayout.props (children)\nname: props\nfullName: StackLayout.StackLayout.props\nsyntax:\n  return:\n    type: StackLayoutProps | RefAttributes\n\n\n## API Reference Item\n- Name: StackLayoutProps.gap\n- Type: Property\n- Summary: Specifies the gap between the inner elements ([see example]({% slug layout_stacklayout %}#toc-gaps)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\nThe following example demonstrates the StackLayout component in action and also showcases other KendoReact components—the <a href=\"/kendo-react-ui-develop/components/buttons/buttongroup\">ButtonGroup</a>, <a href=\"/kendo-react-ui-develop/components/layout/avatar\">Avatars</a> and <a href=\"/kendo-react-ui-develop/components/layout/card\">Cards</a> components. The components are arranged in a stack and can be switched from horizontal to vertical orientation.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... The KendoReact StackLayout component allows you to easily align vertically or horizontally multiple elements in a stack.\nIt delivers different orientations, alignments, spacings and other handy options.\nThis   is   a  Free React  StackLayoutThe KendoReact  StackLayout   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\nLayout\n\nThe StackLayout component provides options for controlling its appearance.\nTo customize the layout of the StackLayout, use any of the following configuration options:\n\nOrientation\nGaps\nHorizontal alignment\nVertical alignment\nNested StackLayouts\n\nOrientation\n\nTo set the StackLayout orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#orientation\">orientation</a> property.\nBy default, orientation is set to horizontal.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGaps\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ProgressBar": "## API Reference Item\n- Name: ProgressBarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact ProgressBar component]({% slug overview_progressbar %}).\n- Syntax: \n\n## Additional Context\n### ProgressBarProps.animation (children)\nname: animation\nfullName: ProgressBarProps.animation\nsummary: \"Configures the animation settings of the ProgressBar. Defaults to \\n`false`\\n.\\r\\nIf set to a boolean, it enables or disables the default animation.\\r\\nIf set to a \\n`ProgressBarAnimation`\\n object, it allows customization of the slide animation duration in milliseconds.\"\nsyntax:\n  return:\n    type: boolean | ProgressBarAnimation\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.ariaLabel (children)\nname: ariaLabel\nfullName: ProgressBarProps.ariaLabel\nsummary: Provides an accessible label for the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.className (children)\nname: className\nfullName: ProgressBarProps.className\nsummary: Adds a list of CSS classes to the progress bar element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.dir (children)\nname: dir\nfullName: ProgressBarProps.dir\nsummary: |-\n  Sets the \n  `dir`\n   HTML attribute to switch between LTR and RTL directions.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.disabled (children)\nname: disabled\nfullName: ProgressBarProps.disabled\nsummary: \"Determines whether the progress bar is in a disabled state.\\r\\nSee examples ([here]({% slug progressbar_disabled %})) and ([here]({% slug chunkprogressbar_disabled %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.emptyClassName (children)\nname: emptyClassName\nfullName: ProgressBarProps.emptyClassName\nsummary: \"Adds additional CSS classes to the inner element representing the empty portion of the progress bar.\\r\\nSee examples ([here]({% slug progressbar_appearance %})) and ([here]({% slug chunkprogressbar_appearance %})).\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.emptyStyle (children)\nname: emptyStyle\nfullName: ProgressBarProps.emptyStyle\nsummary: \"Specifies the styles applied to the inner element representing the empty portion of the progress bar.\\r\\nSee examples ([here]({% slug progressbar_appearance %})) and ([here]({% slug chunkprogressbar_appearance %})).\"\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.labelPlacement (children)\nname: labelPlacement\nfullName: ProgressBarProps.labelPlacement\nsummary: |-\n  Specifies the position of the progress status label. Defaults to \n  `end`\n   ([see example]({% slug progressbar_label %})).\nsyntax:\n  return:\n    type: '\"start\" | \"center\" | \"end\"'\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.labelVisible (children)\nname: labelVisible\nfullName: ProgressBarProps.labelVisible\nsummary: |-\n  Determines whether the progress status label is visible. Defaults to \n  `true`\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.max (children)\nname: max\nfullName: ProgressBarProps.max\nsummary: |-\n  Specifies the maximum value of the progress bar. Defaults to \n  `100`\n  .\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.min (children)\nname: min\nfullName: ProgressBarProps.min\nsummary: |-\n  Specifies the minimum value of the progress bar. Defaults to \n  `0`\n  .\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.orientation (children)\nname: orientation\nfullName: ProgressBarProps.orientation\nsummary: \"Specifies the orientation of the progress bar. Can be \\n`horizontal`\\n or \\n`vertical`\\n. Defaults to \\n`horizontal`\\n.\\r\\nSee examples ([here]({% slug progressbar_orientation %})) and ([here]({% slug chunkprogressbar_orientation %})).\"\nsyntax:\n  return:\n    type: '\"horizontal\" | \"vertical\"'\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.progressClassName (children)\nname: progressClassName\nfullName: ProgressBarProps.progressClassName\nsummary: \"Adds additional CSS classes to the inner element representing the full portion of the progress bar.\\r\\nSee examples ([here]({% slug progressbar_appearance %})) and ([here]({% slug chunkprogressbar_appearance %})).\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.progressStyle (children)\nname: progressStyle\nfullName: ProgressBarProps.progressStyle\nsummary: \"Specifies the styles applied to the inner element representing the full portion of the progress bar.\\r\\nSee examples ([here]({% slug progressbar_appearance %})) and ([here]({% slug chunkprogressbar_appearance %})).\"\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.reverse (children)\nname: reverse\nfullName: ProgressBarProps.reverse\nsummary: \"If set to \\n`true`\\n, reverses the direction of the progress bar. Defaults to \\n`false`\\n.\\r\\nSee examples ([here]({% slug progressbar_direction %})) and ([here]({% slug chunkprogressbar_direction %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.style (children)\nname: style\nfullName: ProgressBarProps.style\nsummary: Applies additional CSS styles to the progress bar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-progressbars'\n\n---\n### ProgressBarProps.tabIndex (children)\nname: tabIndex\nfullName: ProgressBarProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   attribute of the progress bar for keyboard navigation.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-progressbars'\n\n\n## API Reference Item\n- Name: ProgressBarProps.value\n- Type: Property\n- Summary: Sets the current value of the progress bar. Must be between the \n`min`\n and \n`max`\n values. Defaults to \n`0`\n.\r\nSet to \n`null`\n to enable the indeterminate state of the progress bar.\r\nSee examples ([here]({% slug overview_progressbar %})) and ([here]({% slug overview_chunkprogressbar %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ProgressBar } from '@progress/kendo-react-progressbars';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    const { value, start, stop, reset } = useInterval(0, 50);\n\n    return (\n        <div>\n            <div className=\"text-center\">\n                <Button type=\"button\" themeColor={'primary'} onClick={start}>\n                    Start\n                </Button>\n                <Button type=\"button\" onClick={stop}>\n                    Stop\n                </Button>\n                <Button type=\"button\" onClick={reset}>\n                    Reset\n                </Button>\n            </div>\n            <br />\n            <div className=\"text-center\">\n                <ProgressBar value={value} />\n            </div>\n        </div>\n    );\n};\n\nfunction useInterval(initialValue, ms) {\n    const [value, setValue] = React.useState(initialValue);\n    const intervalRef = React.useRef<any>(null);\n    let val = 0;\n\n    const start = React.useCallback(() => {\n        if (intervalRef.current !== null) {\n            return;\n        }\n\n        intervalRef.current = setInterval(() => {\n            if (val < 100) {\n                setValue((v) => v + 1);\n                val++;\n            }\n        }, ms);\n    }, [ms, val]);\n\n    const stop = React.useCallback(() => {\n        if (intervalRef.current === null) {\n            return;\n        }\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n    }, []);\n\n    const reset = React.useCallback(() => {\n        setValue(0);\n        val = 0;\n    }, []);\n\n    return { value, start, stop, reset };\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: ProgressBarProps.label\n- Type: Property\n- Summary: Provides a custom label component for the ProgressBar ([see example]({% slug progressbar_label %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ProgressBar, LabelProps } from '@progress/kendo-react-progressbars';\n\nconst CustomLabel = (props: LabelProps) => <span>{props.value}%</span>;\n\nconst App = () => {\n    return <ProgressBar value={50} label={CustomLabel} />;\n};\n\nexport default App;\n\n```\n\n\nLabel\n\nYou can configure the visibility, position of the label as well as customizing the label which indicates the status of the task progress in the ProgressBar.\n\nGetting Started\n\nTo customize the label position and visibility in the ProgressBar, use the <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#labelvisible\">labelVisible</a> and <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#labelplacement\">labelPlacement</a> properties.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSetting Custom Format\n\nSelectorAttributeUsage.k-progressbarrole=progressbarSets the proper role for ProgressBar.aria-label or aria-labelledbyThe Progressbar needs an accessible name to be assigned to it.aria-valuenowOnly present and required if the value is not indeterminate. Set to a decimal value between 0, or aria-valuemin if present, and aria-valuemax indicating the current value of the progress bar.aria-valueminSet to a decimal value representing the minimum value, and less than aria-valuemax. If not present, the default value is 0.aria-valuemaxSet to a decimal value representing the maximum\n\nAnimation\n\nTo enable the ProgressBar animation, set the <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#animation\">animation</a> option to true.\nBy default, animation is set to false.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\nBy default, the animation duration is 400ms. To provide a different duration, set the duration option of ProgressBarAnimation to the desired value.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "AppBar": "## API Reference Item\n- Name: AppBar\n- Type: Function\n- Summary: Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### AppBarProps (children)\nname: AppBarProps\nfullName: AppBarProps\nsummary: \"Represents the props of the [KendoReact AppBar component]({% slug overview_appbar %}).\\r\\nUsed to display information, actions, branding titles and additional navigation on the current screen.\"\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - id\n  - position\n  - positionMode\n  - style\n  - themeColor\n\n---\n### AppBar.AppBar.props (children)\nname: props\nfullName: AppBar.AppBar.props\nsyntax:\n  return:\n    type: AppBarProps | RefAttributes\n\n\n## API Reference Item\n- Name: AppBarProps.themeColor\n- Type: Property\n- Summary: Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\r\n\r\n* The possible values are:\r\n* \n`light`\n (Default)\r\n* 'primary'\r\n* 'secondary'\r\n* 'tertiary'\r\n* 'info'\r\n* 'success'\r\n* 'warning'\r\n* 'error'\r\n* 'dark'\r\n* 'inherit'\r\n* 'inverse'\n- Syntax: \n\n- Return Type: name: AppBarThemeColor\nfullName: AppBarThemeColor\nsummary: \"Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\\r\\n\\r\\n* The possible values are:\\r\\n* \\n`light`\\n (Default)\\r\\n* 'primary'\\r\\n* 'secondary'\\r\\n* 'tertiary'\\r\\n* 'info'\\r\\n* 'success'\\r\\n* 'warning'\\r\\n* 'error'\\r\\n* 'dark'\\r\\n* 'inherit'\\r\\n* 'inverse'\"\nsyntax:\n  return:\n    type: >-\n      \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\" |\n      \"warning\" | \"error\" | \"dark\" | \"light\" | \"inherit\" | \"inverse\"\npackageName: '@progress/kendo-react-layout'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\nThe AppBar provides information and actions related to the current application screen. It is typically used to show page titles, brand identity and can contain navigation items.\nThis   is   a  Free React  AppBarThe KendoReact  AppBar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the AppBar in action. <a href=\"/kendo-react-ui-develop/components/layout/appbar/appearance\">Appearance</a>—The AppBar comes with predefined option that allow you to set its theme color.\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/responsive-design\">Responsive Design</a>—The responsive layout adapts to any device and screen size.\n\nResponsive Design\n\nIn general, responsive layouts adjust and adapt to any device screen size, whether it is a desktop, tablet, or a mobile phone.\nThe following example demonstrates how the AppBar adjusts for different screen sizes by using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\" rel=\"noopener\" target=\"_blank\">CSS media queries</a>. Resize the screen to observe the responsive layout.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ListView": "## API Reference Item\n- Name: ListViewProps.data\n- Type: Property\n- Summary: Sets the data of the ListView.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ListView, ListViewItemProps } from '@progress/kendo-react-listview';\n\nconst data = [{ text: 'Item 1' }, { text: 'Item 2' }];\n\nconst MyItemRender = (props: ListViewItemProps) => {\n    const { text } = props.dataItem;\n\n    return <div>{text}</div>;\n};\n\nexport default function App() {\n    return <ListView data={data} item={MyItemRender} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: ListViewProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact ListView component]({% slug overview_listview %}).\n- Syntax: \n\n## Additional Context\n### ListViewProps.className (children)\nname: className\nfullName: ListViewProps.className\nsummary: Sets a class of the ListView DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.footer (children)\nname: footer\nfullName: ListViewProps.footer\nsummary: Defines the component that renders for the ListView footer.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.header (children)\nname: header\nfullName: ListViewProps.header\nsummary: Defines the component that renders for the ListView header.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.item (children)\nname: item\nfullName: ListViewProps.item\nsummary: Defines the component that renders for each item of the data collection.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.navigatable (children)\nname: navigatable\nfullName: ListViewProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the ListView.\\r\\nBy default, navigation is disabled.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.onScroll (children)\nname: onScroll\nfullName: ListViewProps.onScroll\nsummary: Fires when the ListView has been scrolled.\nsyntax:\n  return:\n    type: '(event: ListViewEvent) => void'\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.style (children)\nname: style\nfullName: ListViewProps.style\nsummary: Sets styles to the ListView container.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-listview'\n\n\nFiltering\n\nThe KendoReact ListView data can be filtered with components like the <a href=\"/kendo-react-ui-develop/components/datatools/filter\">KendoReact Filter</a>. <a href=\"/kendo-react-ui-develop/components/listview/filtering\">Read more about the filtering of the ListView...</a>\n\nSupport Options The KendoReact ListView enables you to display a custom layout of data items.\nThe ListView is ideally suited for displaying a list of items in a consistent manner. You can see commonplace examples of its use in the design structures of the Internet, search engine results, tweets from Twitter, Facebook updates, inbox items in Gmail, card lists in Instagram, and so on.\n\nLocal data operations (using the <a href=\"/kendo-react-ui/components/datatools/api/usedatasource\">useDataSource</a> hook)\n<a href=\"/kendo-react-ui/components/datatools/datasource/data-operations/remote-data\">Remote Data operations</a>\n<a href=\"/kendo-react-ui/components/datatools/datasource/data-operations/bulk-operations\">Bulk Data Operations</a>\n\nHere's a complete example demonstrating data operations:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSorting\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "TextArea": "## API Reference Item\n- Name: TextAreaProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact TextArea component]({% slug overview_textarea %}).\n- Syntax: \n\n## Additional Context\n### TextAreaProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: TextAreaProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: TextAreaProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.autoFocus (children)\nname: autoFocus\nfullName: TextAreaProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the TextArea. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.className (children)\nname: className\nfullName: TextAreaProps.className\nsummary: Specifies a list of CSS classes that will be added to the TextArea.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.defaultValue (children)\nname: defaultValue\nfullName: TextAreaProps.defaultValue\nsummary: >-\n  The default value of the TextArea ([see example]({% slug default_textarea\n  %})).\nsyntax:\n  return:\n    type: string | number | Array<string>\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.dir (children)\nname: dir\nfullName: TextAreaProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.disabled (children)\nname: disabled\nfullName: TextAreaProps.disabled\nsummary: >-\n  Specifies if the TextArea is disabled ([see example]({% slug disabled_textarea\n  %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.fillMode (children)\nname: fillMode\nfullName: TextAreaProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the TextArea.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.id (children)\nname: id\nfullName: TextAreaProps.id\nsummary: |-\n  Sets the \n  `id`\n   of the TextArea.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.inputAttributes (children)\nname: inputAttributes\nfullName: TextAreaProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.name (children)\nname: name\nfullName: TextAreaProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`textarea`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.onBlur (children)\nname: onBlur\nfullName: TextAreaProps.onBlur\nsummary: The event handler that will be fired when TextArea is blurred.\nsyntax:\n  return:\n    type: '(event: TextAreaBlurEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.onChange (children)\nname: onChange\nfullName: TextAreaProps.onChange\nsummary: The event handler that will be fired when the changes the selected value.\nsyntax:\n  return:\n    type: '(event: TextAreaChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.onFocus (children)\nname: onFocus\nfullName: TextAreaProps.onFocus\nsummary: The event handler that will be fired when TextArea is focused.\nsyntax:\n  return:\n    type: '(event: TextAreaFocusEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.placeholder (children)\nname: placeholder\nfullName: TextAreaProps.placeholder\nsummary: The hint that is displayed when the TextArea is empty.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.prefix (children)\nname: prefix\nfullName: TextAreaProps.prefix\nsummary: Sets a custom prefix to the TextArea component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.readOnly (children)\nname: readOnly\nfullName: TextAreaProps.readOnly\nsummary: Sets the read-only state of the TextArea.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.required (children)\nname: required\nfullName: TextAreaProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### TextAreaProps.resizable (children)\nname: resizable\nfullName: TextAreaProps.resizable\nsummary: \"Defines the resize behavior of the TextArea.\\r\\nThe available options are:\\r\\n- none &mdash; The TextArea cannot be resized.\\r\\n- vertical &mdash; The TextArea can be resized vertically.\\r\\n- horizontal &mdash; The TextArea can be resized horizontally.\\r\\n- both(default) &mdash; The TextArea can be resized both vertically and horizontally.\\r\\n\\r\\n\\r\\nTo be able to resize the TextArea, you should not set the \\n`autoSize`\\n property to \\n`true`\\n.\\r\\nTo be able to resize the component horizontally, add the following inline style to the TextArea:\\r\\n\\r\\n\\n```html\\r\\n<TextArea resizable='horizontal' style={{width: 'auto'}}  />\\r\\n```\"\nsyntax:\n  return:\n    type: '\"horizontal\" | \"vertical\" | \"none\" | \"both\"'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.rounded (children)\nname: rounded\nfullName: TextAreaProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the TextArea.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.rows (children)\nname: rows\nfullName: TextAreaProps.rows\nsummary: >-\n  Specifies an exact height size for the TextArea to take ([see example]({% slug\n  sizing_textarea %})).\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.size (children)\nname: size\nfullName: TextAreaProps.size\nsummary: \"Configures the \\n`size`\\n of the TextArea.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.style (children)\nname: style\nfullName: TextAreaProps.style\nsummary: Sets additional CSS styles to the TextArea.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.suffix (children)\nname: suffix\nfullName: TextAreaProps.suffix\nsummary: Sets a custom suffix to the TextArea component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.tabIndex (children)\nname: tabIndex\nfullName: TextAreaProps.tabIndex\nsummary: \"Sets the \\n`tabIndex`\\n property of the TextArea.\\r\\nDefaults to \\n`0`\\n.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextAreaProps.valid (children)\nname: valid\nfullName: TextAreaProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### TextAreaProps.validationMessage (children)\nname: validationMessage\nfullName: TextAreaProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### TextAreaProps.validityStyles (children)\nname: validityStyles\nfullName: TextAreaProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### TextAreaProps.value (children)\nname: value\nfullName: TextAreaProps.value\nsummary: >-\n  Sets the value to be submitted ([see example]({% slug controlled_textarea\n  %})).\nsyntax:\n  return:\n    type: string | number | Array<string>\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: TextAreaProps.autoSize\n- Type: Property\n- Summary: Specifies if the textarea element will resize its height automatically ([see example]({% slug sizing_textarea %})).\r\nDefaults to \n`false`\n.\r\n\r\nSetting the value of the prop to \n`true`\n will make the TextArea component to ignore the resize behavior of the \n`resizable`\n prop.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextArea } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <>\n            <span>Auto resizable textarea</span>\n            <TextArea autoSize={true} />\n        </>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: TextArea\n- Type: Function\n- Summary: Represents the [KendoReact TextArea component]({% slug overview_textarea %}).\r\n\r\n\r\nAccepts properties of type [TextAreaProps]({% slug api_inputs_textareaprops %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextArea } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <TextArea />\n    );\n}\n\n```\n\n\n## Additional Context\n### TextArea.TextArea.props (children)\nname: props\nfullName: TextArea.TextArea.props\nsyntax:\n  return:\n    type: TextAreaProps | RefAttributes\n\n\nYou can resize the TextArea.\nYou can use the character counter to count and limit the input characters.\nYou can use the TextArea with form validation. The KendoReact TextArea component offers a highly customizable interface for the user to submit value on multiple lines.\nIts features cover everything from setting a default value and character counter to form validation.\nThis   is   a  Free React  TextAreaThe KendoReact  TextArea   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\nSizing\n\nYou can easily set the initial height of the TextArea component as well as setting an auto size option as the user types.\n\nSetting the Initial Rows\n\nTo set initial rows of the TextArea, use its <a href=\"/kendo-react-ui-develop/components/inputs/api/textareaprops#rows\">rows</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nAuto-Resizing\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Popup": "## API Reference Item\n- Name: PopupProps.offset\n- Type: Property\n- Summary: Specifies the absolute position of the element ([see example]({% slug alignmentpositioning_popup %})). The Popup opens next to that point. The pivot point of the Popup is defined by the \n`popupAlign`\n configuration option. The boundary detection is applied by using the window viewport.\n- Syntax: \n\n- Return Type: name: Offset\nfullName: Offset\nsummary: The offset position of the Popup.\nsyntax: {}\npackageName: '@progress/kendo-react-popup'\nmembers:\n  - left\n  - top\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    const [show, setShow] = React.useState(false);\n\n    const onClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <Button type=\"button\" onClick={onClick}>\n                {show ? 'Hide' : 'Show'}\n            </Button>\n            <Popup offset={{ left: 100, top: 50 }} anchor={null} show={show}>\n                Popup content.\n            </Popup>\n        </div>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Popup\n- Type: Function\n- Summary: The KendoReact Popup component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { Button, ButtonHandle } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    const anchor = React.useRef<ButtonHandle | null>(null);\n    const [show, setShow] = React.useState(false);\n\n    const onClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <Button type=\"button\" onClick={onClick} ref={anchor}>\n                {show ? 'Hide' : 'Show'}\n            </Button>\n            <Popup anchor={anchor.current?.element} show={show}>\n                Popup content.\n            </Popup>\n        </div>\n    );\n}\n\n```\n\n\n## Additional Context\n### PopupProps (children)\nname: PopupProps\nfullName: PopupProps\nsummary: >-\n  Represents the props of the [KendoReact Popup component]({% slug\n  overview_popup %}).\nsyntax: {}\npackageName: '@progress/kendo-react-popup'\nmembers:\n  - anchor\n  - anchorAlign\n  - animate\n  - appendTo\n  - className\n  - collision\n  - id\n  - margin\n  - offset\n  - onClose\n  - onMouseDownOutside\n  - onOpen\n  - onPosition\n  - popupAlign\n  - popupClass\n  - positionMode\n  - scale\n  - show\n  - style\n\n---\n### Popup.Popup.props (children)\nname: props\nfullName: Popup.Popup.props\nsyntax:\n  return:\n    type: PopupProps | RefAttributes\n\n\n## API Reference Item\n- Name: PopupProps.animate\n- Type: Property\n- Summary: Controls the Popup animation ([see example]({% slug animations_popup %})). By default, the opening and closing animations are enabled.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { Button, ButtonHandle } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    const anchor = React.useRef<ButtonHandle | null>(null);\n    const [show, setShow] = React.useState(false);\n\n    const onClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <Button type=\"button\" onClick={onClick} ref={anchor}>\n                {show ? 'Hide' : 'Show'}\n            </Button>\n            <Popup anchor={anchor.current?.element} show={show} animate={false}>\n                Popup content.\n            </Popup>\n        </div>\n    );\n}\n\n```\n\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nAligning to Absolute Points\n\nTo align the Popup to a specific absolute point that is relative to the document, use the <a href=\"/kendo-react-ui-develop/components/popup/api/popupprops#offset\">offset</a> property. The Popup opens next to the point and uses the specified <a href=\"/kendo-react-ui-develop/components/popup/api/popupprops#popupalign\">popupAlign</a> configuration.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nPositioning\n\nAnimations\n\nThe Popup allows you to enable or disable its opening and closing animation.\nTo control the animation behavior, use the <a href=\"/kendo-react-ui-develop/components/popup/api/popupprops#animate\">animate</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustomizable <a href=\"/kendo-react-ui-develop/components/popup/animations\">Animations</a>\nFull control over the <a href=\"/kendo-react-ui-develop/components/popup/aligning-positioning\">Aligning and Positioning</a>\nAbility to modify all Popup components by using the PopupPropsContext component.\n<a href=\"/kendo-react-ui-develop/components/popup/viewport-boundary\">Boundary Detection</a>\nOut-of-the-box accessibility and keyboard navigation\n\nHow Does the KendoReact Popup Work?\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Grid": "## API Reference Item\n- Name: GridCellsSettings.footerCell\n- Type: Property\n- Summary: Custom component for rendering the footer cell.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn as Column } from '@progress/kendo-react-grid';\nconst products = [\n  {\n      ProductID: 1,\n      ProductName: 'Chai',\n      SupplierID: 1,\n      CategoryID: 1,\n      QuantityPerUnit: '10 boxes x 20 bags',\n      UnitPrice: 18.0,\n      UnitsInStock: 39,\n      UnitsOnOrder: 0,\n      ReorderLevel: 10,\n      Discontinued: false,\n      Category: {\n          CategoryID: 1,\n          CategoryName: 'Beverages',\n          Description: 'Soft drinks, coffees, teas, beers, and ales'\n      }\n  },\n  {\n      ProductID: 2,\n      ProductName: 'Chang',\n      SupplierID: 1,\n      CategoryID: 1,\n      QuantityPerUnit: '24 - 12 oz bottles',\n      UnitPrice: 19.0,\n      UnitsInStock: 17,\n      UnitsOnOrder: 40,\n      ReorderLevel: 25,\n      Discontinued: false,\n      Category: {\n          CategoryID: 1,\n          CategoryName: 'Beverages',\n          Description: 'Soft drinks, coffees, teas, beers, and ales'\n      }\n  },\n  {\n      ProductID: 3,\n      ProductName: 'Aniseed Syrup',\n      SupplierID: 1,\n      CategoryID: 2,\n      QuantityPerUnit: '12 - 550 ml bottles',\n      UnitPrice: 10.0,\n      UnitsInStock: 13,\n      UnitsOnOrder: 70,\n      ReorderLevel: 25,\n      Discontinued: false,\n      Category: {\n          CategoryID: 2,\n          CategoryName: 'Condiments',\n          Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n      }\n  },\n  {\n      ProductID: 4,\n      ProductName: 'Chef Anton\\'s Cajun Seasoning',\n      SupplierID: 2,\n      CategoryID: 2,\n      QuantityPerUnit: '48 - 6 oz jars',\n      UnitPrice: 22.0,\n      UnitsInStock: 53,\n      UnitsOnOrder: 0,\n      ReorderLevel: 0,\n      Discontinued: false,\n      Category: {\n          CategoryID: 2,\n          CategoryName: 'Condiments',\n          Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n      }\n  },\n  {\n      ProductID: 5,\n      ProductName: 'Chef Anton\\'s Gumbo Mix',\n      SupplierID: 2,\n      CategoryID: 2,\n      QuantityPerUnit: '36 boxes',\n      UnitPrice: 21.35,\n      UnitsInStock: 0,\n      UnitsOnOrder: 0,\n      ReorderLevel: 0,\n      Discontinued: true,\n      Category: {\n          CategoryID: 2,\n          CategoryName: 'Condiments',\n          Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n      }\n  },\n  {\n      ProductID: 6,\n      ProductName: 'Grandma\\'s Boysenberry Spread',\n      SupplierID: 3,\n      CategoryID: 2,\n      QuantityPerUnit: '12 - 8 oz jars',\n      UnitPrice: 25.0,\n      UnitsInStock: 120,\n      UnitsOnOrder: 0,\n      ReorderLevel: 25,\n      Discontinued: false,\n      Category: {\n          CategoryID: 2,\n          CategoryName: 'Condiments',\n          Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n      }\n  },\n  {\n      ProductID: 7,\n      ProductName: 'Uncle Bob\\'s Organic Dried Pears',\n      SupplierID: 3,\n      CategoryID: 7,\n      QuantityPerUnit: '12 - 1 lb pkgs.',\n      UnitPrice: 30.0,\n      UnitsInStock: 15,\n      UnitsOnOrder: 0,\n      ReorderLevel: 10,\n      Discontinued: false,\n      Category: {\n          CategoryID: 7,\n          CategoryName: 'Produce',\n          Description: 'Dried fruit and bean curd'\n      }\n  },\n  {\n      ProductID: 8,\n      ProductName: 'Northwoods Cranberry Sauce',\n      SupplierID: 3,\n      CategoryID: 2,\n      QuantityPerUnit: '12 - 12 oz jars',\n      UnitPrice: 40.0,\n      UnitsInStock: 6,\n      UnitsOnOrder: 0,\n      ReorderLevel: 0,\n      Discontinued: false,\n      Category: {\n          CategoryID: 2,\n          CategoryName: 'Condiments',\n          Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n      }\n  },\n  {\n      ProductID: 9,\n      ProductName: 'Mishi Kobe Niku',\n      SupplierID: 4,\n      CategoryID: 6,\n      QuantityPerUnit: '18 - 500 g pkgs.',\n      UnitPrice: 97.0,\n      UnitsInStock: 29,\n      UnitsOnOrder: 0,\n      ReorderLevel: 0,\n      Discontinued: true,\n      Category: {\n          CategoryID: 6,\n          CategoryName: 'Meat/Poultry',\n          Description: 'Prepared meats'\n      }\n  },\n  {\n      ProductID: 10,\n      ProductName: 'Ikura',\n      SupplierID: 4,\n      CategoryID: 8,\n      QuantityPerUnit: '12 - 200 ml jars',\n      UnitPrice: 31.0,\n      UnitsInStock: 31,\n      UnitsOnOrder: 0,\n      ReorderLevel: 0,\n      Discontinued: false,\n      Category: {\n          CategoryID: 8,\n          CategoryName: 'Seafood',\n          Description: 'Seaweed and fish'\n      }\n  }\n];\n\nconst TotalFooterCustomCell = (props) => {\n  const field = props.field || '';\n  const min = products.reduce(\n    (acc, current) => Math.min(acc, current[field]),\n    Number.MAX_VALUE\n  );\n  const max = products.reduce(\n    (acc, current) => Math.max(acc, current[field]),\n    0\n  );\n  return props.field === 'UnitPrice' ? (\n    <td\n      colSpan={props.colSpan}\n      style={{\n        ...props.style,\n        color: '#fac390'\n      }}\n    >\n      min: {min}, max: {max}\n    </td>\n  ) : (\n    <td\n      {...props.tdProps}\n      style={{\n        color: '#f97e6d'\n      }}\n    >\n      {props.index}\n    </td>\n  );\n};\n\nconst App = () => {\n  return (\n    <Grid\n      data={products}\n      autoProcessData={true}\n      dataItemKey=\"ProductID\"\n      cells={{\n        footerCell: TotalFooterCustomCell\n      }}\n    >\n      <Column field=\"ProductID\" title=\"ID\" width=\"50px\" />\n      <Column field=\"ProductName\" title=\"Product Name\" />\n      <Column field=\"UnitsInStock\" title=\"Units In Stock\" filter=\"numeric\" />\n      <Column field=\"Category.CategoryName\" title=\"Category Name\" />\n    </Grid>\n  );\n};\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Grid\n- Type: Function\n- Summary: Represents the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nconst App = () => {\n    return <Grid />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### GridProps (children)\nname: GridProps\nfullName: GridProps\nsummary: >-\n  Represents the props of the [KendoReact Grid component]({% slug overview_grid\n  %}).\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - adaptive\n  - adaptiveTitle\n  - autoProcessData\n  - cells\n  - children\n  - className\n  - clipboard\n  - columnMenu\n  - columnMenuIcon\n  - columnVirtualization\n  - columnsState\n  - contextMenu\n  - data\n  - dataItemKey\n  - defaultColumnsState\n  - defaultDetailExpand\n  - defaultEdit\n  - defaultFilter\n  - defaultGroup\n  - defaultGroupExpand\n  - defaultSearch\n  - defaultSelect\n  - defaultSkip\n  - defaultSort\n  - defaultTake\n  - detail\n  - detailExpand\n  - detailRowHeight\n  - edit\n  - editDialog\n  - editable\n  - filter\n  - filterOperators\n  - filterable\n  - fixedScroll\n  - group\n  - groupExpand\n  - groupable\n  - highlight\n  - id\n  - language\n  - loader\n  - locale\n  - lockGroups\n  - navigatable\n  - onClipboard\n  - onColumnReorder\n  - onColumnResize\n  - onColumnsStateChange\n  - onContextMenu\n  - onContextMenuItemClick\n  - onDataStateChange\n  - onDetailExpandChange\n  - onEditChange\n  - onFilterChange\n  - onGroupChange\n  - onGroupExpandChange\n  - onHeaderSelectionChange\n  - onHighlightChange\n  - onItemChange\n  - onKeyDown\n  - onNavigationAction\n  - onPageChange\n  - onPdfExport\n  - onRowClick\n  - onRowDoubleClick\n  - onRowReorder\n  - onScroll\n  - onSearchChange\n  - onSelectionChange\n  - onSortChange\n  - pageSize\n  - pageable\n  - pager\n  - pdf\n  - reorderable\n  - resizable\n  - rowHeight\n  - rowReorderable\n  - rowSpannable\n  - rows\n  - scrollable\n  - search\n  - searchFields\n  - select\n  - selectable\n  - showLoader\n  - size\n  - skip\n  - sort\n  - sortable\n  - style\n  - take\n  - total\n\n---\n### Grid.Grid.props (children)\nname: props\nfullName: Grid.Grid.props\nsyntax:\n  return:\n    type: GridProps | RefAttributes\n\n\nKendoReact Data Grid Responsive Design\n\nThe Grid offers a responsive web-design and adapts its layout based on the available screen size.\nThe responsive features of the KendoReact Grid are:\n\nResponsive columns—Based on the viewport width, the visibility of the Grid columns toggles.\nResponsive height—Based on the height setting (for example, \"100%\"), the Grid adjusts its size depending on the height of its container.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nColumns\n\nThe KendoReact Grid supports the spanning of the row content over multiple cells of data while the individual header and footer cells are retained.\n\nWidths\n\nThe KendoReact Grid is responsive and has no fixed width—the component behaves like a block-level element and expands to the available 100% width of its parent element.\nAs a result, the Grid will be resized based on the available space.\n\nGetting Started\n\nBy default, the Grid divides equally its width between its columns and expands responsively or shrinks them when the width of its parent container is changed.\nDepending on the requirements of your scenario, you can set the widths of the Grid columns by using either of the following specifics in the Grid:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Notification": "## API Reference Item\n- Name: Notification\n- Type: Class\n- Summary: Represents the [KendoReact Notification component]({% slug overview_notification %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Notification } from '@progress/kendo-react-notification';\n\nconst App = () => {\n    return (\n        <Notification>\n            <span>Notification message</span>\n        </Notification>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### NotificationProps (children)\nname: NotificationProps\nfullName: NotificationProps\nsummary: >-\n  Represents the props of the [KendoReact Notification component]({% slug\n  overview_notification %}).\nsyntax: {}\npackageName: '@progress/kendo-react-notification'\nmembers:\n  - className\n  - closable\n  - dir\n  - onClose\n  - style\n  - type\n\n\n## API Reference Item\n- Name: NotificationProps.closable\n- Type: Property\n- Summary: Sets if the Notification requires a user action to hide.\r\nIf the property is set to \n`true`\n, the Notification renders a **Close** button.\r\nIf the property is set to an object, the Notification renders a **Close** button\r\nby extending the default props with the provided object.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Notification, NotificationGroup } from '@progress/kendo-react-notification';\nimport { Fade } from '@progress/kendo-react-animation';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    const [info, setInfo] = React.useState<boolean>(false);\n\n    const onToggle = () => setInfo(!info);\n\n    return (\n        <React.Fragment>\n            <Button type=\"button\" onClick={onToggle}>\n                {(info ? 'Hide ' : 'Show ') + 'Info'}\n            </Button>\n            <NotificationGroup\n                style={{\n                    right: 0,\n                    bottom: 0,\n                    alignItems: 'flex-start',\n                    flexWrap: 'wrap-reverse'\n                }}\n            >\n                <Fade>\n                    {info && (\n                        <Notification\n                            type={{ style: 'info', icon: true }}\n                            closable={true}\n                            onClose={() => setInfo(false)}\n                        >\n                            <span>You have 1 new message!</span>\n                        </Notification>\n                    )}\n                </Fade>\n            </NotificationGroup>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n\n```\n\n\nDisplay different notification types after clicking a <a href=\"/kendo-react-ui-develop/components/grid\">Button</a>\nShow a message after a <a href=\"/kendo-react-ui-develop/components/form\">Form</a> has been submitted\nDisplay a notification once the <a href=\"/kendo-react-ui-develop/components/upload\">Upload</a> successfully completes a file upload\n\n\nThe Notification package is a dependency for multiple other KendoReact components.\n\nReact Notification with Other Telerik Components\n\nBased on the frameworks and technologies used in your project, you can combine UI components from different Telerik and Progress suites. What is the KendoReact Notification?\n\nThe Notification is a native KendoReact component built specifically for the React ecosystem and distributed via npm.\n\n<a href=\"https://www.npmjs.com/package/@progress/kendo-react-notification\" rel=\"noopener\" target=\"_blank\">@progress/kendo-react-notification</a>\n\nKey Features\n\nThe KendoReact Notification provides the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance For any questions about the use of the KendoReact Notification, or any other <a href=\"https://www.telerik.com/kendo-react-ui/components/\" rel=\"noopener\" target=\"_blank\">KendoReact components</a>, there are <a href=\"https://www.telerik.com/kendo-react-ui/support\" rel=\"noopener\" target=\"_blank\">several support options available</a>:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Menu": "## API Reference Item\n- Name: MenuProps.onSelect\n- Type: Property\n- Summary: Fires when a Menu item is selected.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Menu, MenuSelectEvent } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    const handleSelect = (event: MenuSelectEvent) => {\n        console.log('Menu item selected');\n    };\n\n    return <Menu items={[{ text: 'Home' }, { text: 'About' }]} onSelect={handleSelect} />;\n}\n\n```\n\n\n## Additional Context\n### MenuSelectEvent (generic)\nname: MenuSelectEvent\nfullName: MenuSelectEvent\nsummary: |-\n  The arguments for the \n  `select`\n   event of the Menu. If the item has a URL and the event is prevented, navigation to the URL does not occur.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - item\n  - itemId\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n## API Reference Item\n- Name: MenuClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { MenuClassComponent, MenuItem } from '@progress/kendo-react-layout';\n\nconst App = () => (\n    <MenuClassComponent>\n        <MenuItem text=\"Item 1\" />\n        <MenuItem text=\"Item 2\" />\n    </MenuClassComponent>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### MenuClassComponent.constructor (children)\nname: constructor\nfullName: MenuClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.checkIsDirectionRightToLeft (children)\nname: checkIsDirectionRightToLeft\nfullName: MenuClassComponent.checkIsDirectionRightToLeft\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable (children)\nname: clearItemHoverAndLeaveRequestsIfApplicable\nfullName: MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.directionHolder (children)\nname: directionHolder\nfullName: MenuClassComponent.directionHolder\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.dispatchSelectEventIfWired (children)\nname: dispatchSelectEventIfWired\nfullName: MenuClassComponent.dispatchSelectEventIfWired\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getInputItem (children)\nname: getInputItem\nfullName: MenuClassComponent.getInputItem\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getMenuClassName (children)\nname: getMenuClassName\nfullName: MenuClassComponent.getMenuClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.inputItems (children)\nname: inputItems\nfullName: MenuClassComponent.inputItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.isItemWithDefaultClose (children)\nname: isItemWithDefaultClose\nfullName: MenuClassComponent.isItemWithDefaultClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemHoverRequest (children)\nname: itemHoverRequest\nfullName: MenuClassComponent.itemHoverRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemLeaveRequest (children)\nname: itemLeaveRequest\nfullName: MenuClassComponent.itemLeaveRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.items (children)\nname: items\nfullName: MenuClassComponent.items\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuWrapperEl (children)\nname: menuWrapperEl\nfullName: MenuClassComponent.menuWrapperEl\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.mouseOverHandler (children)\nname: mouseOverHandler\nfullName: MenuClassComponent.mouseOverHandler\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemBlur (children)\nname: onItemBlur\nfullName: MenuClassComponent.onItemBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemClick (children)\nname: onItemClick\nfullName: MenuClassComponent.onItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemFocus (children)\nname: onItemFocus\nfullName: MenuClassComponent.onItemFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseDown (children)\nname: onItemMouseDown\nfullName: MenuClassComponent.onItemMouseDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseLeave (children)\nname: onItemMouseLeave\nfullName: MenuClassComponent.onItemMouseLeave\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseOver (children)\nname: onItemMouseOver\nfullName: MenuClassComponent.onItemMouseOver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onKeyDown (children)\nname: onKeyDown\nfullName: MenuClassComponent.onKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.prepareItems (children)\nname: prepareItems\nfullName: MenuClassComponent.prepareItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.reset (children)\nname: reset\nfullName: MenuClassComponent.reset\nsummary: Resets the selection and opening of Menu items.\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setFocusedItemId (children)\nname: setFocusedItemId\nfullName: MenuClassComponent.setFocusedItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setHoveredItemId (children)\nname: setHoveredItemId\nfullName: MenuClassComponent.setHoveredItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.animate (children)\nname: animate\nfullName: MenuClassComponent.animate\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.element (children)\nname: element\nfullName: MenuClassComponent.element\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuItemId (children)\nname: menuItemId\nfullName: MenuClassComponent.menuItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuItemProps\n- Type: Interface\n- Summary: The properties of the KendoReact MenuItem component ([more information and examples]({% slug items_menu %})).\n- Syntax: \n\n## Additional Context\n### MenuItemProps.contentRender (children)\nname: contentRender\nfullName: MenuItemProps.contentRender\nsummary: >-\n  A React functional or class component which is used for rendering content\n  instead of the item children ([see example]({% slug rendering_menu\n  %}#toc-content)).\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.cssClass (children)\nname: cssClass\nfullName: MenuItemProps.cssClass\nsummary: >-\n  The additional CSS classes that will be rendered on the item ([see example]({%\n  slug itemproperties_menu %}#toc-styles-and-classes)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.cssStyle (children)\nname: cssStyle\nfullName: MenuItemProps.cssStyle\nsummary: >-\n  The CSS styles that will be rendered on the item ([see example]({% slug\n  itemproperties_menu %}#toc-styles-and-classes)).\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.data (children)\nname: data\nfullName: MenuItemProps.data\nsummary: Represents any additional data that is associated with the Menu item.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.disabled (children)\nname: disabled\nfullName: MenuItemProps.disabled\nsummary: >-\n  Specifies if the item is disabled ([see example]({% slug itemproperties_menu\n  %}#toc-disabled-items)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.icon (children)\nname: icon\nfullName: MenuItemProps.icon\nsummary: >-\n  Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons)\n  that will be rendered for the item ([see example]({% slug itemproperties_menu\n  %}#toc-icon)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.linkRender (children)\nname: linkRender\nfullName: MenuItemProps.linkRender\nsummary: >-\n  A React functional or class component which is used for rendering the link of\n  the item ([see example]({% slug rendering_menu %}#toc-links)). The item link\n  is a part of the visual representation of the item which, by default, includes\n  an arrow, icon, and text.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.render (children)\nname: render\nfullName: MenuItemProps.render\nsummary: >-\n  A React functional or class component which is used for rendering the\n  innermost part of the Menu item ([see example]({% slug rendering_menu\n  %}#toc-items)). By default, the innermost item part includes only the text for\n  the item.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.separator (children)\nname: separator\nfullName: MenuItemProps.separator\nsummary: |-\n  Specifies if this is a separator item. If set to true only the \n  `cssClass`\n   and \n  `cssStyle`\n   props should be rendered along.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.svgIcon (children)\nname: svgIcon\nfullName: MenuItemProps.svgIcon\nsummary: >-\n  Specifies the SVG icon that will be rendered for the item ([see example]({%\n  slug itemproperties_menu %}#toc-icon)).\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.text (children)\nname: text\nfullName: MenuItemProps.text\nsummary: >-\n  Specifies the item text ([see example]({% slug itemproperties_menu\n  %}#toc-text)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.url (children)\nname: url\nfullName: MenuItemProps.url\nsummary: |-\n  Specifies a URL which is rendered as a \n  `href`\n   attribute on the item link ([see example]({% slug itemproperties_menu %}#toc-url)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Additional Context\n### MenuProps.animate (children)\nname: animate\nfullName: MenuProps.animate\nsummary: Controls the Popup animation.\nsyntax:\n  return:\n    type: boolean | PopupAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.children (children)\nname: children\nfullName: MenuProps.children\nsummary: Sets the Menu items declaratively.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.className (children)\nname: className\nfullName: MenuProps.className\nsummary: Adds a custom className to the Menu top element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.customCloseItemIds (children)\nname: customCloseItemIds\nfullName: MenuProps.customCloseItemIds\nsummary: \"Sets the ids of the Menu items that will not be closed on mouse-leave. The ids are hierarchical and zero-based.\\r\\nThe first root item has a \\n`0`\\n id. If the first root item has children,\\r\\nthe first child item acquires a \\n`0_0`\\n id and the second acquires a \\n`0_1`\\n id.\"\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.dir (children)\nname: dir\nfullName: MenuProps.dir\nsummary: Sets the direction of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverCloseDelay (children)\nname: hoverCloseDelay\nfullName: MenuProps.hoverCloseDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on item mouse-leave\\r\\n([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverOpenDelay (children)\nname: hoverOpenDelay\nfullName: MenuProps.hoverOpenDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on\\r\\nitem mouse-leave ([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\\r\\nUsed to avoid accidental closure on leaving.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.id (children)\nname: id\nfullName: MenuProps.id\nsummary: Sets the ID of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.itemRender (children)\nname: itemRender\nfullName: MenuProps.itemRender\nsummary: \"A React functional or class component which is used for rendering the innermost part of\\r\\nthe Menu item ([see example]({% slug rendering_menu %}#toc-items)).\\r\\nBy default, the innermost item part includes only the text for the item.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.items (children)\nname: items\nfullName: MenuProps.items\nsummary: Sets the Menu items.\nsyntax:\n  return:\n    type: Array<MenuItemModel>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.linkRender (children)\nname: linkRender\nfullName: MenuProps.linkRender\nsummary: \"A React functional or class component which is used for rendering the link of the item\\r\\n([see example]({% slug rendering_menu %}#toc-links)).\\r\\nThe item link is a part of the visual representation of the item which, by default, includes an arrow, icon, and text.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.openOnClick (children)\nname: openOnClick\nfullName: MenuProps.openOnClick\nsummary: |-\n  If \n  `openOnClick`\n   is set to \n  `true`\n  , the items are opened on mouse hover only after an initial click.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.vertical (children)\nname: vertical\nfullName: MenuProps.vertical\nsummary: \"Specifies whether the Menu will be vertical\\r\\n([see example]({% slug vertical_menu %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Menu.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Menu } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Menu items={[{ text: 'Home' }, { text: 'About' }]} style={{ backgroundColor: 'lightblue' }} />;\n}\n\n```\n\n\nEvents\n\nThe KendoReact Menu generates a variety of events that you can handle. This allows you to tailor the behavior of the Menu to your specific requirements.\nThe following example demonstrates the <a href=\"/kendo-react-ui-develop/components/layout/api/menuselectevent\">select</a> event of the Menu.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThis   is   a  Free React  MenuThe KendoReact  Menu   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Menu in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... KendoReact Menu Overview\n\nThe KendoReact Menu is a multi-level component for displaying hierarchical data.\nYou can describe the Menu items either by:\n\nUsing nested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSetting the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> property.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Dialog": "## API Reference Item\n- Name: DialogProps.onClose\n- Type: Property\n- Summary: Fires when the **Close** button in the title is clicked or when the \n`Esc`\n button is pressed.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Dialog, DialogCloseEvent } from '@progress/kendo-react-dialogs';\n\nexport default function App() {\n    const [visible, setVisible] = React.useState(true);\n\n    const handleClose = (event: DialogCloseEvent) => {\n        setVisible(false);\n    };\n\n    return (\n        <div>\n            {visible && (\n                <Dialog title={'Dialog Title'} onClose={handleClose}>\n                    <p>Dialog body content.</p>\n                </Dialog>\n            )}\n        </div>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: DialogProps.width\n- Type: Property\n- Summary: Specifies the width of the Dialog ([see example]({% slug dimensions_dialog %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Dialog } from '@progress/kendo-react-dialogs';\n\nexport default function App() {\n    return (\n        <Dialog width={400}>\n            <div>Dialog with custom width</div>\n        </Dialog>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: DialogProps.overlayStyle\n- Type: Property\n- Summary: Set styles to the Dialog overlay element rendered when the \n`modal`\n prop is enabled.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Dialog } from '@progress/kendo-react-dialogs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    const overlayStyle = { backgroundColor: 'rgba(0, 0, 255, 0.2)' };\n\n    const [visible, setVisible] = React.useState<boolean>(true);\n\n    const toggleDialog = () => {\n        setVisible(!visible);\n    };\n\n    return (\n        <div>\n            <Button type=\"button\" onClick={toggleDialog} id=\"open-dialog\">\n                Open Dialog\n            </Button>\n            {visible && (\n                <Dialog title={'Please confirm'} onClose={toggleDialog} overlayStyle={overlayStyle}>\n                    <div>Dialog with custom overlay style</div>\n                </Dialog>\n            )}\n        </div>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: DialogProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Dialog component]({% slug overview_dialog %}).\n- Syntax: \n\n## Additional Context\n### DialogProps.appendTo (children)\nname: appendTo\nfullName: DialogProps.appendTo\nsummary: \"Defines the container to which the Dialog will be appended.\\r\\n* If set to \\n`null`\\n the Dialog will be rendered without React Portal.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.autoFocus (children)\nname: autoFocus\nfullName: DialogProps.autoFocus\nsummary: Set the focus the Dialog container automatically when mounted.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.className (children)\nname: className\nfullName: DialogProps.className\nsummary: Sets a class of the Dialog DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.closeIcon (children)\nname: closeIcon\nfullName: DialogProps.closeIcon\nsummary: >-\n  Specifies whether a close button should be rendered at the top corner of the\n  dialog.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.contentStyle (children)\nname: contentStyle\nfullName: DialogProps.contentStyle\nsummary: The styles that are applied to the content of the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.dir (children)\nname: dir\nfullName: DialogProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.height (children)\nname: height\nfullName: DialogProps.height\nsummary: >-\n  Specifies the height of the Dialog ([see example]({% slug dimensions_dialog\n  %})).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.id (children)\nname: id\nfullName: DialogProps.id\nsummary: |-\n  Sets the \n  `aria-labelledby`\n   value.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.minWidth (children)\nname: minWidth\nfullName: DialogProps.minWidth\nsummary: Specifies the minimum width of the Dialog.\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.modal (children)\nname: modal\nfullName: DialogProps.modal\nsummary: >-\n  Specifies if the Dialog will be modal by rendering an overlay under the\n  component.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.style (children)\nname: style\nfullName: DialogProps.style\nsummary: The styles that are applied to the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.themeColor (children)\nname: themeColor\nfullName: DialogProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Dialog.\\r\\n\\r\\nThe available options are:\\r\\n- primary\\r\\n- dark\\r\\n- light\"\nsyntax:\n  return:\n    type: '\"primary\" | \"dark\" | \"light\"'\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.title (children)\nname: title\nfullName: DialogProps.title\nsummary: >-\n  Sets the title of the Dialog ([see example]({% slug title_dialog %})). If you\n  do not specify the \n\n  `title`\n\n  , the Dialog does not render a **Close** button.\nsyntax:\n  return:\n    type: string | ReactElement\npackageName: '@progress/kendo-react-dialogs'\n\n\n## API Reference Item\n- Name: DialogProps.autoFocusedElement\n- Type: Property\n- Summary: Specifies the query selector used to set the initial focus ([see examples]({% slug initial_focus_dialogs %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Dialog } from '@progress/kendo-react-dialogs';\n\nexport default function App() {\n    return (\n        <Dialog autoFocusedElement=\"#my-input\">\n            <div>\n                <input id=\"my-input\" placeholder=\"This input will be focused\" />\n            </div>\n        </Dialog>\n    );\n}\n\n```\n\n\nFinally, add the following Window <a href=\"/kendo-react-ui/components/dialogs/api/windowprops#onclose\">close handler</a>, which will set the windowVisible flag to false when the user closes the Window.\njsx\n\nDimensions\n\nThe Dialog enables you to specify its width and height.\nTo define the dimensions of the Dialog, use its <a href=\"/kendo-react-ui-develop/components/dialogs/api/dialogprops#width\">width</a> and <a href=\"/kendo-react-ui-develop/components/dialogs/api/dialogprops#height\">height</a> props.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nOut of the box, the Kendo React Dialog provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Checkbox": "## API Reference Item\n- Name: CheckboxProps.checked\n- Type: Property\n- Summary: Sets the checked state of the Checkbox.\r\nSet to null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Checkbox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [checked, setChecked] = React.useState(false);\n\n    return (\n        <Checkbox\n            label={checked ? 'Task Completed' : 'Task Incomplete'}\n            checked={checked}\n            onChange={(e) => setChecked(e.value)}\n        />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Checkbox\n- Type: Function\n- Summary: Represents the [KendoReact Checkbox component]({% slug overview_checkbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Checkbox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return <Checkbox label=\"Accept terms\" />;\n}\n\n```\n\n\n## Additional Context\n### CheckboxProps (children)\nname: CheckboxProps\nfullName: CheckboxProps\nsummary: \"Represents the props of the [KendoReact Checkbox component]({% slug overview_checkbox %}).\\r\\nExtends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).\"\nsyntax: {}\npackageName: '@progress/kendo-react-inputs'\nmembers:\n  - about\n  - accept\n  - accessKey\n  - alt\n  - aria-activedescendant\n  - aria-atomic\n  - aria-autocomplete\n  - aria-braillelabel\n  - aria-brailleroledescription\n  - aria-busy\n  - aria-checked\n  - aria-colcount\n  - aria-colindex\n  - aria-colindextext\n  - aria-colspan\n  - aria-controls\n  - aria-current\n  - aria-describedby\n  - aria-description\n  - aria-details\n  - aria-disabled\n  - aria-dropeffect\n  - aria-errormessage\n  - aria-expanded\n  - aria-flowto\n  - aria-grabbed\n  - aria-haspopup\n  - aria-hidden\n  - aria-invalid\n  - aria-keyshortcuts\n  - aria-label\n  - aria-labelledby\n  - aria-level\n  - aria-live\n  - aria-modal\n  - aria-multiline\n  - aria-multiselectable\n  - aria-orientation\n  - aria-owns\n  - aria-placeholder\n  - aria-posinset\n  - aria-pressed\n  - aria-readonly\n  - aria-relevant\n  - aria-required\n  - aria-roledescription\n  - aria-rowcount\n  - aria-rowindex\n  - aria-rowindextext\n  - aria-rowspan\n  - aria-selected\n  - aria-setsize\n  - aria-sort\n  - aria-valuemax\n  - aria-valuemin\n  - aria-valuenow\n  - aria-valuetext\n  - ariaDescribedBy\n  - ariaLabelledBy\n  - autoCapitalize\n  - autoComplete\n  - autoCorrect\n  - autoFocus\n  - autoSave\n  - capture\n  - checked\n  - children\n  - className\n  - color\n  - content\n  - contentEditable\n  - contextMenu\n  - dangerouslySetInnerHTML\n  - datatype\n  - defaultChecked\n  - defaultValue\n  - dir\n  - disabled\n  - draggable\n  - enterKeyHint\n  - exportparts\n  - form\n  - formAction\n  - formEncType\n  - formMethod\n  - formNoValidate\n  - formTarget\n  - height\n  - hidden\n  - id\n  - inert\n  - inlist\n  - inputMode\n  - is\n  - itemID\n  - itemProp\n  - itemRef\n  - itemScope\n  - itemType\n  - label\n  - labelClassName\n  - labelOptional\n  - labelPlacement\n  - lang\n  - list\n  - max\n  - maxLength\n  - min\n  - minLength\n  - multiple\n  - name\n  - nonce\n  - onAbort\n  - onAbortCapture\n  - onAnimationEnd\n  - onAnimationEndCapture\n  - onAnimationIteration\n  - onAnimationIterationCapture\n  - onAnimationStart\n  - onAnimationStartCapture\n  - onAuxClick\n  - onAuxClickCapture\n  - onBeforeInput\n  - onBeforeInputCapture\n  - onBeforeToggle\n  - onBlur\n  - onBlurCapture\n  - onCanPlay\n  - onCanPlayCapture\n  - onCanPlayThrough\n  - onCanPlayThroughCapture\n  - onChange\n  - onChangeCapture\n  - onClick\n  - onClickCapture\n  - onCompositionEnd\n  - onCompositionEndCapture\n  - onCompositionStart\n  - onCompositionStartCapture\n  - onCompositionUpdate\n  - onCompositionUpdateCapture\n  - onContextMenu\n  - onContextMenuCapture\n  - onCopy\n  - onCopyCapture\n  - onCut\n  - onCutCapture\n  - onDoubleClick\n  - onDoubleClickCapture\n  - onDrag\n  - onDragCapture\n  - onDragEnd\n  - onDragEndCapture\n  - onDragEnter\n  - onDragEnterCapture\n  - onDragExit\n  - onDragExitCapture\n  - onDragLeave\n  - onDragLeaveCapture\n  - onDragOver\n  - onDragOverCapture\n  - onDragStart\n  - onDragStartCapture\n  - onDrop\n  - onDropCapture\n  - onDurationChange\n  - onDurationChangeCapture\n  - onEmptied\n  - onEmptiedCapture\n  - onEncrypted\n  - onEncryptedCapture\n  - onEnded\n  - onEndedCapture\n  - onError\n  - onErrorCapture\n  - onFocus\n  - onFocusCapture\n  - onGotPointerCapture\n  - onGotPointerCaptureCapture\n  - onInput\n  - onInputCapture\n  - onInvalid\n  - onInvalidCapture\n  - onKeyDown\n  - onKeyDownCapture\n  - onKeyPress\n  - onKeyPressCapture\n  - onKeyUp\n  - onKeyUpCapture\n  - onLoad\n  - onLoadCapture\n  - onLoadStart\n  - onLoadStartCapture\n  - onLoadedData\n  - onLoadedDataCapture\n  - onLoadedMetadata\n  - onLoadedMetadataCapture\n  - onLostPointerCapture\n  - onLostPointerCaptureCapture\n  - onMouseDown\n  - onMouseDownCapture\n  - onMouseEnter\n  - onMouseLeave\n  - onMouseMove\n  - onMouseMoveCapture\n  - onMouseOut\n  - onMouseOutCapture\n  - onMouseOver\n  - onMouseOverCapture\n  - onMouseUp\n  - onMouseUpCapture\n  - onPaste\n  - onPasteCapture\n  - onPause\n  - onPauseCapture\n  - onPlay\n  - onPlayCapture\n  - onPlaying\n  - onPlayingCapture\n  - onPointerCancel\n  - onPointerCancelCapture\n  - onPointerDown\n  - onPointerDownCapture\n  - onPointerEnter\n  - onPointerLeave\n  - onPointerMove\n  - onPointerMoveCapture\n  - onPointerOut\n  - onPointerOutCapture\n  - onPointerOver\n  - onPointerOverCapture\n  - onPointerUp\n  - onPointerUpCapture\n  - onProgress\n  - onProgressCapture\n  - onRateChange\n  - onRateChangeCapture\n  - onReset\n  - onResetCapture\n  - onScroll\n  - onScrollCapture\n  - onScrollEnd\n  - onScrollEndCapture\n  - onSeeked\n  - onSeekedCapture\n  - onSeeking\n  - onSeekingCapture\n  - onSelect\n  - onSelectCapture\n  - onStalled\n  - onStalledCapture\n  - onSubmit\n  - onSubmitCapture\n  - onSuspend\n  - onSuspendCapture\n  - onTimeUpdate\n  - onTimeUpdateCapture\n  - onToggle\n  - onTouchCancel\n  - onTouchCancelCapture\n  - onTouchEnd\n  - onTouchEndCapture\n  - onTouchMove\n  - onTouchMoveCapture\n  - onTouchStart\n  - onTouchStartCapture\n  - onTransitionCancel\n  - onTransitionCancelCapture\n  - onTransitionEnd\n  - onTransitionEndCapture\n  - onTransitionRun\n  - onTransitionRunCapture\n  - onTransitionStart\n  - onTransitionStartCapture\n  - onVolumeChange\n  - onVolumeChangeCapture\n  - onWaiting\n  - onWaitingCapture\n  - onWheel\n  - onWheelCapture\n  - part\n  - pattern\n  - placeholder\n  - popover\n  - popoverTarget\n  - popoverTargetAction\n  - prefix\n  - property\n  - radioGroup\n  - readOnly\n  - rel\n  - required\n  - resource\n  - results\n  - rev\n  - role\n  - rounded\n  - security\n  - size\n  - slot\n  - spellCheck\n  - src\n  - step\n  - style\n  - suppressContentEditableWarning\n  - suppressHydrationWarning\n  - tabIndex\n  - title\n  - translate\n  - type\n  - typeof\n  - unselectable\n  - valid\n  - validationMessage\n  - validityStyles\n  - value\n  - vocab\n  - width\n\n---\n### Checkbox.Checkbox.props (children)\nname: props\nfullName: Checkbox.Checkbox.props\nsyntax:\n  return:\n    type: CheckboxProps | RefAttributes\n\n\nThe KendoReact Checkbox lets the user toggle between checked, unchecked and the optional indeterminate states.\nThe Checkbox is designed to replace the <input type=\"checkbox\"> HTML5 tag and provides the KendoReact specific styling. <a href=\"/kendo-react-ui-develop/components/inputs/checkbox/default-state\">Default state</a>—To control the initial value of the Checkbox, you can use the defaultChecked property.\n<a href=\"/kendo-react-ui-develop/components/inputs/checkbox/labels\">Labels</a>—You can add labels and set their position. The Checkbox supports custom labels as well.\n\nLabels\n\nThe Checkbox enables you to add label next to the input, either before or after it.\n\nSetting Up the Label\n\nTo set the label, use the <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#label\">label</a> property, which accept string. To set position of the label, use the <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#labelplacement\">labelPlacement</a> property, which accept before and after values.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom labels\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Button": "## API Reference Item\n- Name: ButtonProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Button component]({% slug overview_button %}).\r\nExtends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).\n- Syntax: \n\n## Additional Context\n### ButtonProps.disabled (children)\nname: disabled\nfullName: ButtonProps.disabled\nsummary: >-\n  Specifies if the Button is disabled ([see example]({% slug disabled_button\n  %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.endIcon (children)\nname: endIcon\nfullName: ButtonProps.endIcon\nsummary: \"Sets an SVG icon or custom element after the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.fillMode (children)\nname: fillMode\nfullName: ButtonProps.fillMode\nsummary: |-\n  Configures the \n  `fillMode`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\" | \"link\" | \"clear\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.icon (children)\nname: icon\nfullName: ButtonProps.icon\nsummary: >-\n  Defines the name for an existing icon in a KendoReact theme ([see example]({%\n  slug icons_button %})). The icon renders inside the Button by a \n\n  `span.k-icon`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconClass (children)\nname: iconClass\nfullName: ButtonProps.iconClass\nsummary: >-\n  Defines a CSS class — or multiple classes separated by spaces — which apply to\n  a \n\n  `span`\n   element inside the Button ([see example]({% slug icons_button %})). Allows you to use custom icons.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconSize (children)\nname: iconSize\nfullName: ButtonProps.iconSize\nsummary: |-\n  Configures the \n  `size`\n   of the SVG icon that displays inside the Button.\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageAlt (children)\nname: imageAlt\nfullName: ButtonProps.imageAlt\nsummary: >-\n  Defines the alternative text of the image that renders inside the Button\n  component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageUrl (children)\nname: imageUrl\nfullName: ButtonProps.imageUrl\nsummary: |-\n  Defines a URL which is used as an \n  `img`\n   element inside the Button ([see example]({% slug icons_button %})). The URL can be relative or absolute. If relative, it evaluates in relation to the URL of the web page.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.rounded (children)\nname: rounded\nfullName: ButtonProps.rounded\nsummary: |-\n  Configures the \n  `roundness`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.selected (children)\nname: selected\nfullName: ButtonProps.selected\nsummary: Sets the selected state of the Button. You can use this for controlled mode.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.size (children)\nname: size\nfullName: ButtonProps.size\nsummary: |-\n  Configures the \n  `size`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.startIcon (children)\nname: startIcon\nfullName: ButtonProps.startIcon\nsummary: \"Sets an SVG icon or custom element before the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.svgIcon (children)\nname: svgIcon\nfullName: ButtonProps.svgIcon\nsummary: Defines the SVG icon that renders inside the Button component.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.themeColor (children)\nname: themeColor\nfullName: ButtonProps.themeColor\nsummary: |-\n  Configures the \n  `themeColor`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.title (children)\nname: title\nfullName: ButtonProps.title\nsummary: |-\n  Sets the \n  `title`\n   HTML attribute of the Button.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.unstyled (children)\nname: unstyled\nfullName: ButtonProps.unstyled\nsummary: The unstyled option classes.\nsyntax:\n  return:\n    type: ButtonsClassStructure\npackageName: '@progress/kendo-react-buttons'\n\n\n## API Reference Item\n- Name: ButtonProps.togglable\n- Type: Property\n- Summary: Provides visual styling that shows if the Button is selected ([see example]({% slug toggleable_button %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return (\n        <Button togglable={true}>\n            Toggle\n        </Button>\n    );\n}\n\nexport default App;\n\n```\n\n\nAdd a Loader to indicate that data is being fetched for a <a href=\"/kendo-react-ui/components/grid\">Grid</a>.\nShow unread notifications with a Badge on an <a href=\"/kendo-react-ui/components/layout/appbar\">AppBar</a> or <a href=\"/kendo-react-ui/components/buttons/button\">Button</a>.\nImprove UX with Skeleton placeholders for a <a href=\"/kendo-react-ui/components/layout/card\">Card</a> with profile details while data loads.\n\nAdd buttons to your <a href=\"/kendo-react-ui/components/grid\">Grid</a> header or rows.\nUse buttons to submit data with <a href=\"/kendo-react-ui/components/inputs\">Inputs</a>.\nBuild more interactive <a href=\"/kendo-react-ui/components/dialogs\">Dialogs</a> with buttons.\nShow <a href=\"/kendo-react-ui/components/notification\">Notifications</a> when you trigger an action with a button.\n\nAdditionally, the Indicators provide built-in appearance properties which let you control the size of the component. Try to play around with the <a href=\"/kendo-react-ui/components/indicators/loader/appearance\">appearance</a> of your Loader.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Label": "## API Reference Item\n- Name: Label.Label(props:LabelProps)\n- Type: CallSignature\n- Summary: Represents the KendoReact Label component.\n- Syntax: \n\n- Return Type: name: Element\nfullName: Element\nsyntax: {}\npackageName: '@progress/kendo-drawing'\n\n\n## API Reference Item\n- Name: LabelProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Label component.\n- Syntax: \n\n## Additional Context\n### LabelProps.children (children)\nname: children\nfullName: LabelProps.children\nsummary: \"The text that will be rendered inside the label element.\\r\\nCan be omitted for editors without label to keep form layout.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.className (children)\nname: className\nfullName: LabelProps.className\nsummary: Sets a class of the Label DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorDisabled (children)\nname: editorDisabled\nfullName: LabelProps.editorDisabled\nsummary: Specifies if the editor is disabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorId (children)\nname: editorId\nfullName: LabelProps.editorId\nsummary: \"The id of the editor.\\r\\nRepresent the [\\n`htmlFor`\\n](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) property, which will be set to the \\n`label`\\n element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorRef (children)\nname: editorRef\nfullName: LabelProps.editorRef\nsummary: \"An optional React ref to the editor.\\r\\nUsed to redirect the click event to the editor when it does not contain native form element.\\r\\nTo be able to work, the editor should have \\n`focus`\\n method or \\n`actionElement`\\n prop on it's ref.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorValid (children)\nname: editorValid\nfullName: LabelProps.editorValid\nsummary: Specifies the validity of the editor. Used to define the editor is invalid.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.id (children)\nname: id\nfullName: LabelProps.id\nsummary: \"Represents the id of the label element.\\r\\nThe value should be set to the editor \\n`ariaLabelledBy`\\n property.\\r\\nCan be used when the editor is not containing native form element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.optional (children)\nname: optional\nfullName: LabelProps.optional\nsummary: If enabled marks the label as optional.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n\n## API Reference Item\n- Name: LabelProps.style\n- Type: Property\n- Summary: The styles that are applied to the Label.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Label } from '@progress/kendo-react-labels';\nimport { Input, InputChangeEvent } from '@progress/kendo-react-inputs';\n\nconst App = () => {\n    const [value, setValue] = React.useState<string | undefined>(undefined);\n\n    const labelId = 'firstname-label';\n    const editorId = 'firstname-editor';\n\n    return (\n        <div>\n            <Label style={{ color: 'blue', fontWeight: 'bold' }} id={labelId} editorId={editorId}>\n                First Name:&nbsp;\n            </Label>\n            <Input\n                ariaLabelledBy={labelId}\n                value={value}\n                onChange={(e: InputChangeEvent) => setValue(e.value)}\n                id={editorId}\n            />\n        </div>\n    );\n};\n\nexport default App;\n\n```\n\n\nThe following demo shows the components included in the KendoReact Labels package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... For any questions about the use of KendoReact Labels, or any other <a href=\"https://www.telerik.com/kendo-react-ui/components/\" rel=\"noopener\" target=\"_blank\">KendoReact components</a>, there are <a href=\"https://www.telerik.com/kendo-react-ui/support\" rel=\"noopener\" target=\"_blank\">several support options available</a>: <a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled mode</a>\n\n\n<a href=\"/kendo-react-ui/components/labels/globalization\">Globalization</a>\n\nHow Do the KendoReact Labels Work?\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "TextBox": "## API Reference Item\n- Name: TextBoxProps\n- Type: Interface\n- Summary: Represents the properties of the KendoReact [TextBox]({% slug api_inputs_textbox %}) component\n- Syntax: \n\n## Additional Context\n### TextBoxProps.autoFocus (children)\nname: autoFocus\nfullName: TextBoxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the TextBox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.fillMode (children)\nname: fillMode\nfullName: TextBoxProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.inputAttributes (children)\nname: inputAttributes\nfullName: TextBoxProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.onChange (children)\nname: onChange\nfullName: TextBoxProps.onChange\nsummary: |-\n  The \n  `onChange`\n   callback of the \n  `input`\n   element inside the TextBox.\nsyntax:\n  return:\n    type: '(event: TextBoxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.prefix (children)\nname: prefix\nfullName: TextBoxProps.prefix\nsummary: Sets a custom prefix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.rounded (children)\nname: rounded\nfullName: TextBoxProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.suffix (children)\nname: suffix\nfullName: TextBoxProps.suffix\nsummary: Sets a custom suffix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.valid (children)\nname: valid\nfullName: TextBoxProps.valid\nsummary: |-\n  Indicates if the component is in \n  `valid`\n   state\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: TextBoxProps.size\n- Type: Property\n- Summary: Configures the \n`size`\n of the TextBox.\r\n\r\nThe available options are:\r\n- small\r\n- medium\r\n- large\r\n- null&mdash;Does not set a size \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextBox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <>\n            <label htmlFor=\"textbox\">Large textbox</label>\n            <TextBox id=\"textbox\" size=\"large\" />\n        </>\n    );\n}\n\n```\n\n\nSize\n\nThe KendoReact TextBox enables you to configure its <a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#size\">size</a>.\n\nsmall\nlarge\nmedium (Default)\nnull Does not set a size className\n\nThe following example demonstrates how to set the size of the TextBox.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nBorder Radius\n\nOut of the box, the Kendo React TextBox provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\nThe KendoReact TextBox component provides options for creating composite inputs that you can integrate within forms or use as standalone items.\nThis   is   a  Free React  TextBoxThe KendoReact  TextBox   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the TextBox in action.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ScrollView": "Whether you are looking for examples how to use KendoReact in applications, or for a starting point for your own dashboards, head over to the live <a href=\"https://telerik.github.io/kendo-react/react-admin-dashboard/#/\" rel=\"noopener\" target=\"_blank\">Admin Dashboard Application</a>. You can find <a href=\"https://github.com/telerik/kendo-react/tree/master/examples/react-admin-dashboard\" rel=\"noopener\" target=\"_blank\">the application's source code on GitHub</a>.\n\nOut of the box, the Kendo React ProgressBar provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\nOut of the box, the Kendo React ChunkProgressBar provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n"
}