{
  "code": {
    "imports": [
      "import * as React from 'react';",
      "import { AppBar, AppBarSection, AppBarSpacer, Drawer, DrawerContent, Card, CardHeader, CardTitle, CardBody, CardActions, TabStrip, TabStripTab, Stepper, StackLayout, ExpansionPanel } from '@progress/kendo-react-layout';",
      "import { Avatar } from '@progress/kendo-react-layout';",
      "import { Typography } from '@progress/kendo-react-common';",
      "import { Chip, Button, Toolbar, DropDownButton } from '@progress/kendo-react-buttons';",
      "import { Badge } from '@progress/kendo-react-indicators';",
      "import { Switch } from '@progress/kendo-react-inputs';",
      "import { AutoComplete, DropDownList, ComboBox } from '@progress/kendo-react-dropdowns';",
      "import { Breadcrumb } from '@progress/kendo-react-layout';",
      "import { DateRangePicker } from '@progress/kendo-react-dateinputs';",
      "import { Grid, GridColumn } from '@progress/kendo-react-grid';",
      "import { ListView } from '@progress/kendo-react-listview';",
      "import { Chart, ChartSeries, ChartSeriesItem, ChartCategoryAxis, ChartCategoryAxisItem, ChartTitle, ChartLegend, ChartValueAxis, ChartValueAxisItem } from '@progress/kendo-react-charts';",
      "import { Sparkline } from '@progress/kendo-react-charts';",
      "import { Form, Field, FormElement, FieldWrapper } from '@progress/kendo-react-form';",
      "import { TextBox, TextArea } from '@progress/kendo-react-inputs';",
      "import { Upload } from '@progress/kendo-react-upload';",
      "import { Dialog } from '@progress/kendo-react-dialogs';",
      "import { Scheduler, DayView, WeekView, MonthView } from '@progress/kendo-react-scheduler';",
      "import { Loader } from '@progress/kendo-react-indicators';",
      "import { Popup } from '@progress/kendo-react-popup';",
      "import { bellIcon, userIcon, calendarIcon, plusIcon, envelopeIcon, refreshIcon, linkVerticalIcon, chevronDownIcon, folderIcon, eyeIcon, externalLinkIcon } from '@progress/kendo-svg-icons';"
    ],
    "mainComponent": "export default function PatientPortalShell() {\n  // Mock data\n  const patientProfile = { name: 'Jane Doe', avatar: '', dob: '1986-04-18', MRN: 'MRN-204893', primaryProvider: 'Dr. Patel' };\n  const authSession = { token: 'abc123', roles: ['patient'], expires: new Date(Date.now() + 45 * 60000), twoFA: true };\n  const notificationsSummary = [\n    { id: 1, title: 'Lab result available', time: '2h', unread: true },\n    { id: 2, title: 'Appointment confirmed', time: '1d', unread: false }\n  ];\n  const quickActions = [\n    { text: 'Schedule', svgIcon: calendarIcon },\n    { text: 'New Message', svgIcon: envelopeIcon },\n    { text: 'Refill', svgIcon: plusIcon }\n  ];\n  const breadcrumbData = [{ id: 'home', text: 'Home' }, { id: 'dashboard', text: 'Dashboard' }];\n  const defaultDateRange = { start: new Date(Date.now() - 7 * 24 * 3600000), end: new Date() };\n\n  const [masked, setMasked] = React.useState(true);\n  const [drawerOpen, setDrawerOpen] = React.useState(true);\n  const [selectedTab, setSelectedTab] = React.useState(0);\n  const [searchValue, setSearchValue] = React.useState('');\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [range, setRange] = React.useState(defaultDateRange);\n  const [loading, setLoading] = React.useState(false);\n\n  // Sidebar items\n  const navItems = [\n    { text: 'Dashboard', icon: folderIcon, route: '/' },\n    { text: 'Appointments', icon: calendarIcon, route: '/appointments' },\n    { text: 'Medical Records', icon: folderIcon, route: '/records' },\n    { text: 'Prescriptions', icon: folderIcon, route: '/rx' },\n    { text: 'Billing', icon: folderIcon, route: '/billing', badge: 2 }\n  ];\n\n  // Appointments widget\n  const appointments = [\n    { id: 1, dateTime: new Date(Date.now() + 2*3600000), location: 'Main Clinic', provider: 'Dr. Patel', purpose: 'Follow-up', status: 'Scheduled', tele: false },\n    { id: 2, dateTime: new Date(Date.now() + 26*3600000), location: 'Telehealth', provider: 'Dr. Wong', purpose: 'Derm consult', status: 'Scheduled', tele: true },\n    { id: 3, dateTime: new Date(Date.now() + 72*3600000), location: 'Cardiology', provider: 'Dr. Lee', purpose: 'Echo review', status: 'Scheduled', tele: false }\n  ];\n\n  // Recent results (grid)\n  const results = [\n    { id: 101, name: 'Hemoglobin A1C', date: new Date(), keyValue: '6.2 %', flag: 'H', unread: true },\n    { id: 102, name: 'Lipid Panel - LDL', date: new Date(Date.now()-86400000), keyValue: '96 mg/dL', flag: 'N', unread: false },\n    { id: 103, name: 'TSH', date: new Date(Date.now()-172800000), keyValue: '1.9 uIU/mL', flag: 'N', unread: false }\n  ];\n\n  // Med reminders\n  const medicationList = [\n    { id: 'm1', name: 'Atorvastatin', dose: '20 mg', schedule: 'Daily 9:00 PM', nextDue: new Date(Date.now()+3600000), eligibleRefill: true },\n    { id: 'm2', name: 'Metformin', dose: '500 mg', schedule: 'BID 8:00 AM/PM', nextDue: new Date(Date.now()+2*3600000), eligibleRefill: false }\n  ];\n\n  // Charts mock\n  const days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];\n  const steps = [8200, 10500, 9800, 5600, 12000, 9100, 7600];\n  const hr = [72, 75, 70, 78, 74, 73, 71];\n\n  // Form mocks\n  const providers = [\n    { id: 1, name: 'Dr. Patel', specialty: 'Primary Care' },\n    { id: 2, name: 'Dr. Wong', specialty: 'Dermatology' },\n    { id: 3, name: 'Care Team', specialty: 'General' }\n  ];\n\n  const onGlobalRefresh = () => {\n    setLoading(true);\n    setTimeout(() => setLoading(false), 1200);\n  };\n\n  const maskText = (t) => (masked ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : t);\n\n  const AppointmentItem = (props) => {\n    const a = props.dataItem;\n    return (\n      <div className=\"flex items-center justify-between py-2\">\n        <div>\n          <div className=\"font-medium\">{a.purpose} ‚Ä¢ {a.provider}</div>\n          <div className=\"text-sm text-gray-600\">{a.dateTime.toLocaleString()} ‚Ä¢ {a.location}</div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Chip size=\"small\" text={a.status} themeColor=\"info\" />\n          {a.tele && <Chip size=\"small\" text=\"Televisit\" themeColor=\"primary\" />}\n        </div>\n      </div>\n    );\n  };\n\n  const onResultRowClick = (e) => alert(`Open details for: ${e.dataItem.name}`);\n\n  const notificationItems = notificationsSummary.map(n => ({ text: n.title }));\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 text-slate-900\">\n      {/* Header */}\n      <AppBar themeColor=\"inverse\" className=\"sticky top-0 z-30\">\n        <AppBarSection>\n          <Button fillMode=\"flat\" onClick={() => setDrawerOpen(!drawerOpen)} aria-label=\"Toggle navigation\">‚ò∞</Button>\n          <AppBarSpacer style={{ width: 8 }} />\n          <Avatar type=\"icon\" rounded=\"full\" size=\"small\"><span>üè•</span></Avatar>\n          <Typography className=\"ml-2 font-semibold\">Health Portal</Typography>\n        </AppBarSection>\n        <AppBarSpacer />\n        <AppBarSection className=\"hidden md:flex items-center gap-3\">\n          <Avatar type=\"image\" rounded=\"full\" size=\"small\">\n            {patientProfile.avatar ? (<img src={patientProfile.avatar} alt={patientProfile.name} />) : (<span className=\"k-avatar-text\">{patientProfile.name.split(' ').map(s=>s[0]).join('')}</span>)}\n          </Avatar>\n          <Typography>{masked ? 'Patient' : patientProfile.name}</Typography>\n          <Chip size=\"small\" text={masked ? 'MRN ‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : patientProfile.MRN} />\n          <Switch ariaLabel=\"Privacy mask\" checked={masked} onChange={(e)=>setMasked(e.value)} />\n        </AppBarSection>\n        <AppBarSpacer />\n        <AppBarSection className=\"w-full md:w-auto\">\n          <AutoComplete\n            data={[\"Appointments\",\"Records\",\"Medications\",\"Billing\"]}\n            suggest\n            placeholder=\"Search portal\"\n            value={searchValue}\n            onChange={(e)=>setSearchValue(e.value)}\n            className=\"w-full md:w-80\"\n          />\n        </AppBarSection>\n        <AppBarSpacer />\n        <AppBarSection className=\"flex items-center gap-2\">\n          <Toolbar>\n            <Button themeColor=\"primary\" svgIcon={calendarIcon} onClick={()=>setShowDialog(true)}>Schedule</Button>\n            <Button svgIcon={envelopeIcon}>New Message</Button>\n            <Button themeColor=\"warning\">Refill</Button>\n          </Toolbar>\n          <DropDownButton text=\"Notifications\" items={notificationItems} svgIcon={bellIcon} />\n          <DropDownButton text=\"Account\" items={[{ text:'Profile'},{ text:'Settings'},{ text:'Help'},{ text:'Logout'}]} svgIcon={userIcon} />\n        </AppBarSection>\n      </AppBar>\n\n      {/* Body layout */}\n      <div className=\"flex\">\n        <Drawer\n          expanded={drawerOpen}\n          position=\"start\"\n          mode=\"push\"\n          width={260}\n          items={navItems.map((n)=>({ text: n.text }))}\n        >\n          <DrawerContent>\n            {/* Main content */}\n            <div className=\"p-4 md:p-6\">\n              <Card className=\"mb-4\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between w-full\">\n                    <div className=\"flex items-center gap-3\">\n                      <CardTitle>Dashboard</CardTitle>\n                      <Breadcrumb data={breadcrumbData} />\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <DateRangePicker value={range} onChange={(e)=>setRange(e.value)} />\n                      <Button svgIcon={refreshIcon} onClick={onGlobalRefresh} disabled={loading}>\n                        {loading ? 'Refreshing...' : 'Refresh'}\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              {/* Responsive grid of widgets */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {/* Upcoming Appointments */}\n                <Card className=\"\">\n                  <CardHeader><CardTitle>Upcoming Appointments</CardTitle></CardHeader>\n                  <CardBody>\n                    <ListView data={appointments} item={AppointmentItem} navigatable className=\"\" />\n                    <div className=\"mt-3 flex gap-2\">\n                      <Button onClick={()=>alert('Reschedule flow')}>Reschedule</Button>\n                      <Button title=\"Check-in availability may vary\" disabled={false}>Check-in</Button>\n                      <Button endIcon={externalLinkIcon} onClick={()=>window.open('https://tele.example.com','_blank','noopener')}>Join Televisit</Button>\n                    </div>\n                  </CardBody>\n                  <CardActions>\n                    <Button fillMode=\"flat\">View All</Button>\n                  </CardActions>\n                </Card>\n\n                {/* Recent Test Results */}\n                <Card>\n                  <CardHeader><CardTitle>Recent Test Results</CardTitle></CardHeader>\n                  <CardBody>\n                    <Grid\n                      data={results}\n                      autoProcessData\n                      dataItemKey=\"id\"\n                      size=\"small\"\n                      style={{ maxHeight: 320 }}\n                      onRowClick={onResultRowClick}\n                    >\n                      <GridColumn field=\"name\" title=\"Test\" />\n                      <GridColumn field=\"date\" title=\"Date\" cells={{ data: (p)=> <td {...p.tdProps}>{new Date(p.dataItem.date).toLocaleDateString()}</td> }} />\n                      <GridColumn field=\"keyValue\" title=\"Value\" />\n                      <GridColumn field=\"flag\" title=\"Flag\" cells={{ data: (p)=> <td {...p.tdProps} className={p.dataItem.flag==='H'?'text-red-600':'text-emerald-600'}>{p.dataItem.flag}</td> }} />\n                    </Grid>\n                  </CardBody>\n                </Card>\n\n                {/* Medication Reminders */}\n                <Card>\n                  <CardHeader><CardTitle>Medication Reminders</CardTitle></CardHeader>\n                  <CardBody>\n                    <ListView\n                      data={medicationList}\n                      item={(props)=>{\n                        const m = props.dataItem;\n                        return (\n                          <div className=\"flex items-center justify-between py-2\">\n                            <div>\n                              <div className=\"font-medium\">{m.name} ‚Ä¢ {m.dose}</div>\n                              <div className=\"text-sm text-gray-600\">Next: {m.nextDue.toLocaleTimeString()}</div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button themeColor=\"success\" onClick={()=>alert('Taken recorded')}>Taken</Button>\n                              <Button disabled={!m.eligibleRefill} onClick={()=>alert('Refill request queued')}>Request Refill</Button>\n                            </div>\n                          </div>\n                        );\n                      }}\n                    />\n                  </CardBody>\n                </Card>\n\n                {/* Health Metrics Charts */}\n                <Card className=\"xl:col-span-2\">\n                  <CardHeader><CardTitle>Health Metrics</CardTitle></CardHeader>\n                  <CardBody>\n                    <TabStrip selected={selectedTab} onSelect={(e)=>setSelectedTab(e.selected)}>\n                      <TabStripTab title=\"Vitals\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <Chart>\n                            <ChartTitle text=\"Heart Rate\" />\n                            <ChartLegend position=\"bottom\" />\n                            <ChartCategoryAxis><ChartCategoryAxisItem categories={days} /></ChartCategoryAxis>\n                            <ChartSeries>\n                              <ChartSeriesItem type=\"line\" data={hr} name=\"HR (bpm)\" />\n                            </ChartSeries>\n                          </Chart>\n                          <Chart>\n                            <ChartTitle text=\"Steps\" />\n                            <ChartCategoryAxis><ChartCategoryAxisItem categories={days} /></ChartCategoryAxis>\n                            <ChartSeries>\n                              <ChartSeriesItem type=\"column\" data={steps} name=\"Steps\" />\n                            </ChartSeries>\n                          </Chart>\n                        </div>\n                      </TabStripTab>\n                      <TabStripTab title=\"Labs\">\n                        <div className=\"flex items-center gap-6\">\n                          <Chart style={{ width: '70%' }}>\n                            <ChartTitle text=\"Glucose (mg/dL)\" />\n                            <ChartCategoryAxis><ChartCategoryAxisItem categories={days} /></ChartCategoryAxis>\n                            <ChartSeries>\n                              <ChartSeriesItem type=\"line\" data={[98,104,96,110,102,95,99]} name=\"Glucose\" />\n                            </ChartSeries>\n                          </Chart>\n                          <div className=\"flex-1\">\n                            <Typography className=\"mb-2\">A1C trend</Typography>\n                            <Sparkline data={[6.6,6.4,6.3,6.2,6.1,6.0]} />\n                          </div>\n                        </div>\n                      </TabStripTab>\n                      <TabStripTab title=\"Activity\">\n                        <Chart>\n                          <ChartTitle text=\"Active Minutes\" />\n                          <ChartCategoryAxis><ChartCategoryAxisItem categories={days} /></ChartCategoryAxis>\n                          <ChartSeries>\n                            <ChartSeriesItem type=\"line\" data={[34,42,28,50,39,33,29]} name=\"Minutes\" />\n                          </ChartSeries>\n                        </Chart>\n                      </TabStripTab>\n                    </TabStrip>\n                  </CardBody>\n                </Card>\n\n                {/* Quick Contact Form */}\n                <Card>\n                  <CardHeader><CardTitle>Quick Contact</CardTitle></CardHeader>\n                  <CardBody>\n                    <Form\n                      initialValues={{ to: providers[0], subject: 'Question about medication', body: '', files: [] }}\n                      onSubmit={(vals)=>{ alert('Message sent'); }}\n                      render={(formProps) => (\n                        <FormElement>\n                          <FieldWrapper>\n                            <label className=\"k-label\">To</label>\n                            <DropDownList data={providers} textField=\"name\" dataItemKey=\"id\" value={formProps.valueGetter('to')} onChange={(e)=>formProps.onChange({ value: e.value, field: 'to' })} />\n                          </FieldWrapper>\n                          <FieldWrapper>\n                            <label className=\"k-label\">Subject</label>\n                            <TextBox maxLength={120} value={formProps.valueGetter('subject')} onChange={(e)=>formProps.onChange({ value: e.value, field: 'subject' })} />\n                          </FieldWrapper>\n                          <FieldWrapper>\n                            <label className=\"k-label\">Message</label>\n                            <TextArea rows={4} autoSize value={formProps.valueGetter('body')} onChange={(e)=>formProps.onChange({ value: e.value, field: 'body' })} />\n                          </FieldWrapper>\n                          <FieldWrapper>\n                            <label className=\"k-label\">Attachments</label>\n                            <Upload\n                              restrictions={{ allowedExtensions: ['.pdf','.jpg','.png'], maxFileSize: 5*1024*1024 }}\n                              saveUrl={'https://demos.telerik.com/kendo-react-ui/service-v4/upload/save'}\n                              removeUrl={'https://demos.telerik.com/kendo-react-ui/service-v4/upload/remove'}\n                            />\n                          </FieldWrapper>\n                          <div className=\"flex gap-2 mt-3\">\n                            <Button type=\"submit\" themeColor=\"primary\">Send</Button>\n                            <Button onClick={()=>alert('Draft saved')}>Save Draft</Button>\n                            <Button fillMode=\"flat\" onClick={()=>formProps.onFormReset()}>Cancel</Button>\n                          </div>\n                        </FormElement>\n                      )}\n                    />\n                  </CardBody>\n                </Card>\n\n                {/* Billing Summary */}\n                <Card>\n                  <CardHeader><CardTitle>Billing Summary</CardTitle></CardHeader>\n                  <CardBody>\n                    <div className=\"grid grid-cols-3 gap-3 text-center\">\n                      <div className=\"p-3 rounded bg-emerald-50\">\n                        <div className=\"text-xs text-gray-600\">Balance Due</div>\n                        <div className=\"text-lg font-semibold\">{maskText('$245.40')}</div>\n                      </div>\n                      <div className=\"p-3 rounded bg-amber-50\">\n                        <div className=\"text-xs text-gray-600\">Due Date</div>\n                        <div className=\"text-lg font-semibold\">{maskText('Sep 28')}</div>\n                      </div>\n                      <div className=\"p-3 rounded bg-sky-50\">\n                        <div className=\"text-xs text-gray-600\">Last Payment</div>\n                        <div className=\"text-lg font-semibold\">{maskText('$100 ‚Ä¢ Aug 30')}</div>\n                      </div>\n                    </div>\n                    <div className=\"mt-3\">\n                      <Button themeColor=\"primary\">Go to Billing</Button>\n                    </div>\n                  </CardBody>\n                </Card>\n              </div>\n            </div>\n          </DrawerContent>\n        </Drawer>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"mt-8 border-t bg-white px-6 py-4 text-sm\">\n        <div className=\"flex flex-wrap items-center gap-4 justify-between\">\n          <div className=\"flex gap-4\">\n            <a href=\"#\">Privacy</a>\n            <a href=\"#\">Terms</a>\n            <a href=\"#\">HIPAA Notice</a>\n            <a href=\"#\">Contact Support</a>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Typography>Locale</Typography>\n            <DropDownList data={[{ code:'en-US', name:'English (US)' },{ code:'es-ES', name:'Espa√±ol' }]} textField=\"name\" dataItemKey=\"code\" defaultValue={{ code:'en-US', name:'English (US)' }} style={{ width: 200 }} />\n          </div>\n        </div>\n      </footer>\n\n      {/* Global Dialog: Schedule */}\n      {showDialog && (\n        <Dialog title=\"Schedule Appointment\" onClose={()=>setShowDialog(false)} style={{ width: 800 }}>\n          <div className=\"space-y-4\">\n            <Stepper items={[{ label:'Service' },{ label:'Provider' },{ label:'Time' },{ label:'Review' }]} value={0} />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <DropDownList label=\"Service\" data={[{ id:1, name:'Annual Physical' },{ id:2, name:'Derm Consult' }]} textField=\"name\" dataItemKey=\"id\" />\n              <ComboBox data={providers} textField=\"name\" dataItemKey=\"id\" filterable placeholder=\"Search provider\" />\n              <DropDownList label=\"Location\" data={[{ id:'tele', name:'Telehealth' },{ id:'clinic', name:'Main Clinic' }]} textField=\"name\" dataItemKey=\"id\" />\n            </div>\n            <Scheduler height={300}>\n              <WeekView />\n            </Scheduler>\n            <div className=\"flex justify-end gap-2\">\n              <Button onClick={()=>setShowDialog(false)}>Cancel</Button>\n              <Button themeColor=\"primary\" onClick={()=>{ alert('Appointment booked'); setShowDialog(false); }}>Confirm</Button>\n            </div>\n          </div>\n        </Dialog>\n      )}\n\n      {/* Route loader */}\n      {loading && (\n        <div className=\"fixed inset-0 bg-black/10 flex items-center justify-center z-40\">\n          <Loader type=\"infinite-spinner\" size=\"large\" />\n        </div>\n      )}\n    </div>\n  );\n}\n",
    "metadata": {
      "totalComponents": 73,
      "componentTypes": [
        "AppBar",
        "Avatar",
        "Typography",
        "Chip",
        "Switch",
        "AutoComplete",
        "Toolbar",
        "Button",
        "DropDownButton",
        "Badge",
        "Drawer",
        "DrawerContent",
        "Card",
        "CardHeader",
        "CardTitle",
        "CardBody",
        "CardActions",
        "Breadcrumb",
        "DateRangePicker",
        "Grid",
        "GridColumn",
        "ListView",
        "Chart",
        "ChartSeries",
        "ChartSeriesItem",
        "ChartCategoryAxis",
        "ChartCategoryAxisItem",
        "ChartTitle",
        "ChartLegend",
        "Sparkline",
        "TabStrip",
        "TabStripTab",
        "Form",
        "FormElement",
        "FieldWrapper",
        "TextBox",
        "TextArea",
        "Upload",
        "DropDownList",
        "ComboBox",
        "Dialog",
        "Stepper",
        "Scheduler",
        "Loader",
        "StackLayout",
        "ExpansionPanel",
        "Popup"
      ]
    }
  },
  "originalACT": {
    "structure": {
      "component": "container",
      "description": "App shell for Healthcare Patient Portal. Manages global layout, auth session, patient profile, feature flags, accessibility preferences, and real-time updates.",
      "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
      "children": [
        {
          "component": "header",
          "description": "Secure top header showing brand, patient identity, security status, global search, quick actions, notifications, and user menu. Requires: patientProfile{name,avatar,dob,MRN,primaryProvider}, authSession{token,roles,expires}, notificationsSummary, quickActionsConfig, searchIndexConfig.",
          "mcpQuery": "Show me Kendo UI AppBar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
          "children": [
            {
              "component": "logo",
              "description": "Portal brand logo; alt text from brand assets. Requires: brandAssets{logoUrl,alt}.",
              "mcpQuery": "Show me Kendo UI Avatar examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
              "children": ""
            },
            {
              "component": "group",
              "description": "Patient identity capsule with privacy controls. Requires: patientProfile; privacySettings(maskSensitive).",
              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
              "children": [
                {
                  "component": "avatar",
                  "description": "Patient avatar image with initials fallback. Requires: patientProfile.avatar or initials.",
                  "mcpQuery": "Show me Kendo UI Avatar examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                  "children": ""
                },
                {
                  "component": "h3",
                  "description": "Patient full name text; masked if privacy toggle on. Requires: patientProfile.name.",
                  "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                  "children": ""
                },
                {
                  "component": "chip",
                  "description": "MRN/Patient ID badge; supports copy-to-clipboard with tooltip. Requires: patientProfile.MRN.",
                  "mcpQuery": "Show me Kendo UI Chip examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                  "children": ""
                },
                {
                  "component": "toggle",
                  "description": "Privacy toggle to mask/unmask sensitive fields in header.",
                  "mcpQuery": "Show me Kendo Switch/Toggle examples for a privacy visibility toggle with ARIA labels, controlled state, and change events. Include keyboard interactions, form integration, and disabled states styling.",
                  "children": ""
                }
              ]
            },
            {
              "component": "status",
              "description": "Security status indicator with session timer and 2FA state. Requires: authSession{expires,2FA}.",
              "mcpQuery": "Show me Kendo UI Badge examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
              "children": ""
            },
            {
              "component": "search",
              "description": "Global portal search scoped to appointments, records, meds, and billing. Requires: searchIndexConfig, patientId.",
              "mcpQuery": "Show me Kendo Autocomplete/SearchBox examples for a global search with async suggestions, custom item templates with icons, and keyboard navigation. Include debounce, minLength, loading indicator, and aria-live for results.",
              "children": ""
            },
            {
              "component": "toolbar",
              "description": "Quick actions: Schedule Appointment, New Message, Refill Request. Each opens a modal.",
              "mcpQuery": "Show me Kendo UI Toolbar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
              "children": [
                {
                  "component": "button",
                  "description": "Schedule Appointment (primary) opens scheduling modal.",
                  "mcpQuery": "Show me Kendo Button examples for primary call-to-action with icon and click handler opening a modal. Include loading state and disabled when permissions forbid.",
                  "children": "Schedule Appointment"
                },
                {
                  "component": "button",
                  "description": "Compose new message to care team.",
                  "mcpQuery": "Show me Kendo Button/IconButton examples with tooltip for opening message compose modal. Include badge support for unread counts.",
                  "children": "New Message"
                },
                {
                  "component": "button",
                  "description": "Medication refill request.",
                  "mcpQuery": "Show me Kendo Button with danger/warning styling for refill request, with confirmation dialog pattern.",
                  "children": "Refill Request"
                }
              ]
            },
            {
              "component": "icon",
              "description": "Notifications bell with unread count and dropdown list. Requires: notificationsSummary.",
              "mcpQuery": "Show me Kendo Dropdown/Popup + Badge examples to build a notifications bell with async list, infinite scroll, and item templates. Include keyboard and focus management.",
              "children": ""
            },
            {
              "component": "dropdownmenu",
              "description": "User menu with Profile, Settings, Help, Logout. Requires: userMenuItems, authSession.",
              "mcpQuery": "Show me Kendo Menu/DropDownButton examples for a user account menu with icons, separators, and logout action. Include accessibility patterns and custom header template.",
              "children": ""
            }
          ]
        },
        {
          "component": "flex",
          "description": "Main two-column layout: collapsible navigation sidebar and main content area. Responsive behavior: sidebar overlays on mobile.",
          "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
          "children": [
            {
              "component": "sidebar",
              "description": "Primary navigation with patient snapshot and sections for Dashboard, Appointments, Medical Records, Prescriptions, Billing; plus secondary links. Requires: navigationItems[{id,label,icon,route,badgeCount,permissions}], patientSnapshot, routeState.",
              "mcpQuery": "Show me Kendo Drawer/Sidebar examples for a collapsible navigation with mini mode, selected item highlighting, badges, and responsive overlay on mobile. Include routing integration and ARIA attributes.",
              "children": [
                {
                  "component": "card",
                  "description": "Patient Snapshot mini card. Requires: patientSnapshot{name,MRN,primaryProvider,nextAppointment}.",
                  "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "children": [
                    {
                      "component": "h4",
                      "description": "Patient name in sidebar snapshot.",
                      "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                      "children": ""
                    },
                    {
                      "component": "p",
                      "description": "MRN and primary provider small text.",
                      "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                      "children": ""
                    },
                    {
                      "component": "chip",
                      "description": "Next appointment mini-chip with date/time if available.",
                      "mcpQuery": "Show me Kendo UI Chip examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                      "children": ""
                    }
                  ]
                },
                {
                  "component": "accordion",
                  "description": "Nav sections list with expandable groups and badges.",
                  "mcpQuery": "Show me Kendo PanelBar/Accordion examples for navigation sections with icons and badges, supporting routing and disabled items based on permissions.",
                  "children": [
                    {
                      "component": "menuitem",
                      "description": "Dashboard route link.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Dashboard"
                    },
                    {
                      "component": "menuitem",
                      "description": "Appointments (Scheduling) route link.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Appointments"
                    },
                    {
                      "component": "menuitem",
                      "description": "Medical Records route link.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Medical Records"
                    },
                    {
                      "component": "menuitem",
                      "description": "Prescriptions route link.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Prescriptions"
                    },
                    {
                      "component": "menuitem",
                      "description": "Billing route link with unpaid bills badge.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Billing"
                    }
                  ]
                },
                {
                  "component": "group",
                  "description": "Secondary links: Messages, Providers, Settings, Help.",
                  "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "children": [
                    {
                      "component": "link",
                      "description": "Messages route.",
                      "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Messages"
                    },
                    {
                      "component": "link",
                      "description": "Providers directory route.",
                      "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Providers"
                    },
                    {
                      "component": "link",
                      "description": "Settings route.",
                      "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Settings"
                    },
                    {
                      "component": "link",
                      "description": "Help center route.",
                      "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "children": "Help"
                    }
                  ]
                },
                {
                  "component": "button",
                  "description": "Collapse/Expand sidebar icon button.",
                  "mcpQuery": "Show me Kendo Button/IconButton examples for toggling a Drawer collapsed state, with tooltip and aria-expanded attributes.",
                  "children": "Collapse"
                }
              ]
            },
            {
              "component": "main",
              "description": "Main dashboard content area with header bar and responsive grid of widgets. Requires: currentRoute, breadcrumbMap, defaultDateRange.",
              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
              "children": [
                {
                  "component": "section",
                  "description": "Dashboard header bar with title, breadcrumbs, date range selector, and refresh.",
                  "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "children": [
                    {
                      "component": "h1",
                      "description": "Page title 'Dashboard'.",
                      "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                      "children": "Dashboard"
                    },
                    {
                      "component": "breadcrumb",
                      "description": "Breadcrumbs: Home > Dashboard. Requires: breadcrumbMap.",
                      "mcpQuery": "Show me Kendo Breadcrumb examples with custom item renderers and routing integration.",
                      "children": ""
                    },
                    {
                      "component": "daterangepicker",
                      "description": "Date range selector filtering metrics/results. Requires: defaultDateRange.",
                      "mcpQuery": "Show me Kendo DateRangePicker examples with presets (7d/30d/custom), controlled state, and change events to refetch data. Include responsive popup and keyboard navigation.",
                      "children": ""
                    },
                    {
                      "component": "button",
                      "description": "Refresh data for all widgets.",
                      "mcpQuery": "Show me Kendo Button examples with loading spinner and global refresh action across multiple widgets.",
                      "children": "Refresh"
                    }
                  ]
                },
                {
                  "component": "grid",
                  "description": "Responsive card grid for dashboard widgets; 1-2 columns on mobile/tablet, 3-4 on desktop. Requires: layout breakpoints.",
                  "mcpQuery": "Show me Kendo UI Grid examples with data binding, sorting, filtering, and pagination. Include examples with realistic sample data, custom cell templates, and responsive design. Provide complete implementation with all necessary props.",
                  "children": [
                    {
                      "component": "card",
                      "description": "Upcoming Appointments widget card. Requires: appointmentsSummary[{dateTime,location,provider,purpose,status}], checkInEligibility, telehealthLinks.",
                      "mcpQuery": "Show me Kendo Card + ListView examples for an appointments summary with item templates, action buttons per row, and empty state. Include skeleton loaders.",
                      "children": [
                        {
                          "component": "h3",
                          "description": "Card title.",
                          "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                          "children": "Upcoming Appointments"
                        },
                        {
                          "component": "listview",
                          "description": "List of next 3 appointments with provider, location/telehealth, and status chips.",
                          "mcpQuery": "Show me Kendo ListView examples with custom templates, chips for status, and inline actions.",
                          "children": ""
                        },
                        {
                          "component": "group",
                          "description": "Per-appointment actions: Reschedule, Check-in, Join Televisit.",
                          "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                          "children": [
                            {
                              "component": "button",
                              "description": "Reschedule opens scheduling flow.",
                              "mcpQuery": "Show me Kendo Button examples used inside ListView items, with click handlers opening a modal/stepper.",
                              "children": "Reschedule"
                            },
                            {
                              "component": "button",
                              "description": "Check-in enabled only within eligibility window.",
                              "mcpQuery": "Show me Kendo Button with conditional disabled state and tooltip explaining eligibility.",
                              "children": "Check-in"
                            },
                            {
                              "component": "button",
                              "description": "Join Televisit launches external link.",
                              "mcpQuery": "Show me Kendo Button/LinkButton examples with external link icon and safe target handling.",
                              "children": "Join Televisit"
                            }
                          ]
                        },
                        {
                          "component": "button",
                          "description": "View all appointments route link.",
                          "mcpQuery": "Show me Kendo Button as link examples integrated with router for navigation to Appointments page.",
                          "children": "View All"
                        }
                      ]
                    },
                    {
                      "component": "card",
                      "description": "Recent Test Results widget. Requires: recentResults[{name,date,keyValue,flag,unread}], referenceRanges, unreadFlags.",
                      "mcpQuery": "Show me Kendo Card + Grid examples for compact recent results with flag coloring and row click opening a details drawer.",
                      "children": [
                        {
                          "component": "h3",
                          "description": "Card title.",
                          "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                          "children": "Recent Test Results"
                        },
                        {
                          "component": "table",
                          "description": "Compact table of latest labs/imaging with flag indicators and unread badge.",
                          "mcpQuery": "Show me Kendo Grid examples with small dense rows, conditional cell styling for flags (H/L), and row selection to open a drawer.",
                          "children": ""
                        },
                        {
                          "component": "drawer",
                          "description": "Details drawer with interpretation and reference ranges opened on row click.",
                          "mcpQuery": "Show me Kendo Drawer/Panel examples used as a side details panel with dynamic content and close button.",
                          "children": ""
                        }
                      ]
                    },
                    {
                      "component": "card",
                      "description": "Medication Reminders widget. Requires: medicationList[{name,dose,schedule}], reminderSchedule, adherenceLog, refillEligibility.",
                      "mcpQuery": "Show me Kendo Card + List/Checklist examples for medication reminders with mark-as-taken interactions, overdue alerts, and progress feedback.",
                      "children": [
                        {
                          "component": "h3",
                          "description": "Card title.",
                          "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                          "children": "Medication Reminders"
                        },
                        {
                          "component": "listview",
                          "description": "List of current meds with next due time and adherence indicator.",
                          "mcpQuery": "Show me Kendo ListView with custom item templates including icons, time badges, and action buttons.",
                          "children": ""
                        },
                        {
                          "component": "group",
                          "description": "Medication actions.",
                          "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                          "children": [
                            {
                              "component": "button",
                              "description": "Mark as taken with immediate feedback.",
                              "mcpQuery": "Show me Kendo Button with success state and toast integration on completion.",
                              "children": "Taken"
                            },
                            {
                              "component": "button",
                              "description": "Request refill for selected medication.",
                              "mcpQuery": "Show me Kendo Button with confirm dialog and disabled when refill not eligible.",
                              "children": "Request Refill"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "component": "card",
                      "description": "Health Metrics Charts widget with tabs for Vitals, Labs, Activity. Requires: metricsTimeSeries, targets, units, dateRange.",
                      "mcpQuery": "Show me Kendo TabStrip + Charts examples with multiple series, legends, and responsive behavior. Include accessibility for colorblind palettes and tooltips.",
                      "children": [
                        {
                          "component": "tabstrip",
                          "description": "Tabs to switch between Vitals, Labs, Activity.",
                          "mcpQuery": "Show me Kendo TabStrip examples with lazy-loaded tab content and maintain state across navigation.",
                          "children": [
                            {
                              "component": "tab",
                              "description": "Vitals tab with line charts for BP and HR.",
                              "mcpQuery": "Show me Kendo UI TabStrip examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                              "children": [
                                {
                                  "component": "linechart",
                                  "description": "Blood pressure trend with systolic/diastolic series, target bands.",
                                  "mcpQuery": "Show me Kendo Line Chart examples with multiple series, plot bands for targets, and date axis with range selection.",
                                  "children": ""
                                },
                                {
                                  "component": "linechart",
                                  "description": "Heart rate trend with resting vs active overlays.",
                                  "mcpQuery": "Show me Kendo Line Chart with markers, smoothing, and tooltip templates.",
                                  "children": ""
                                }
                              ]
                            },
                            {
                              "component": "tab",
                              "description": "Labs tab with glucose trend and sparkline of A1C.",
                              "mcpQuery": "Show me Kendo UI TabStrip examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                              "children": [
                                {
                                  "component": "linechart",
                                  "description": "Glucose over time with thresholds and units selector.",
                                  "mcpQuery": "Show me Kendo Line Chart with thresholds and custom tooltip showing mg/dL or mmol/L based on unit.",
                                  "children": ""
                                },
                                {
                                  "component": "sparkline",
                                  "description": "A1C mini trend sparkline.",
                                  "mcpQuery": "Show me Kendo Sparkline examples for compact trend inside a card with constrained height.",
                                  "children": ""
                                }
                              ]
                            },
                            {
                              "component": "tab",
                              "description": "Activity tab with steps and active minutes charts.",
                              "mcpQuery": "Show me Kendo UI TabStrip examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                              "children": [
                                {
                                  "component": "barchart",
                                  "description": "Daily steps bar chart.",
                                  "mcpQuery": "Show me Kendo Bar Chart examples with categorical axis for days and total label on bars.",
                                  "children": ""
                                },
                                {
                                  "component": "linechart",
                                  "description": "Active minutes line chart with goal line.",
                                  "mcpQuery": "Show me Kendo Line Chart with constant line annotation to show goal.",
                                  "children": ""
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "component": "card",
                      "description": "Quick Contact Form widget to message healthcare providers. Requires: providerDirectory, messageDraft, attachmentPolicy, rateLimits.",
                      "mcpQuery": "Show me Kendo Form examples with validation, async submit, and toasts. Include file upload integration and autosave draft pattern.",
                      "children": [
                        {
                          "component": "form",
                          "description": "Contact form with validation and ARIA live feedback.",
                          "mcpQuery": "Show me Kendo Form + Field components with schema-based validation and accessible error messages.",
                          "children": [
                            {
                              "component": "select",
                              "description": "To: provider or care team selector from directory.",
                              "mcpQuery": "Show me Kendo DropDownList/ComboBox examples with remote data, filtering, and custom item templates showing provider specialty.",
                              "children": ""
                            },
                            {
                              "component": "textinput",
                              "description": "Subject field, 120 char limit.",
                              "mcpQuery": "Show me Kendo TextBox examples with character counter and maxLength handling.",
                              "children": ""
                            },
                            {
                              "component": "textarea",
                              "description": "Message body, required.",
                              "mcpQuery": "Show me Kendo TextArea examples with auto-resize and validation message display.",
                              "children": ""
                            },
                            {
                              "component": "fileupload",
                              "description": "Attachment upload with file type and size limits per policy.",
                              "mcpQuery": "Show me Kendo Upload examples with async upload, restrictions (type/size/count), progress, and remove actions.",
                              "children": ""
                            },
                            {
                              "component": "group",
                              "description": "Form actions.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "children": [
                                {
                                  "component": "submit",
                                  "description": "Send message (primary).",
                                  "mcpQuery": "Show me Kendo Button configured as form submit with loading state and success toast on completion.",
                                  "children": "Send"
                                },
                                {
                                  "component": "save",
                                  "description": "Save Draft.",
                                  "mcpQuery": "Show me Kendo Button secondary style for saving drafts with debounce and feedback.",
                                  "children": "Save Draft"
                                },
                                {
                                  "component": "cancel",
                                  "description": "Cancel and clear form.",
                                  "mcpQuery": "Show me Kendo Button tertiary style to reset/cancel form with confirm dialog.",
                                  "children": "Cancel"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "component": "card",
                      "description": "Billing Summary mini card. Requires: billingSummary{balanceDue,dueDate,lastPayment}.",
                      "mcpQuery": "Show me Kendo Card with small metric tiles and a CTA button.",
                      "children": [
                        {
                          "component": "h3",
                          "description": "Card title.",
                          "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                          "children": "Billing Summary"
                        },
                        {
                          "component": "grid",
                          "description": "Mini metrics grid for balance, due date, last payment.",
                          "mcpQuery": "Show me Kendo UI Grid examples with data binding, sorting, filtering, and pagination. Include examples with realistic sample data, custom cell templates, and responsive design. Provide complete implementation with all necessary props.",
                          "children": [
                            {
                              "component": "item",
                              "description": "Balance due metric.",
                              "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "children": ""
                            },
                            {
                              "component": "item",
                              "description": "Due date metric.",
                              "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "children": ""
                            },
                            {
                              "component": "item",
                              "description": "Last payment metric.",
                              "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "children": ""
                            }
                          ]
                        },
                        {
                          "component": "button",
                          "description": "Go to Billing page.",
                          "mcpQuery": "Show me Kendo Button as link examples with routerLink to Billing section.",
                          "children": "Go to Billing"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "component": "footer",
          "description": "Footer with legal links, accessibility statement, support contact, and locale selector. Requires: legalLinks, supportContacts, i18nLocales.",
          "mcpQuery": "Show me Kendo UI AppBar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
          "children": [
            {
              "component": "link",
              "description": "Privacy Policy.",
              "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
              "children": "Privacy"
            },
            {
              "component": "link",
              "description": "Terms of Service.",
              "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
              "children": "Terms"
            },
            {
              "component": "link",
              "description": "HIPAA Notice.",
              "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
              "children": "HIPAA Notice"
            },
            {
              "component": "link",
              "description": "Contact Support.",
              "mcpQuery": "Show me Kendo UI ReactLink examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
              "children": "Contact Support"
            },
            {
              "component": "p",
              "description": "Accessibility statement summary.",
              "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
              "children": "Accessibility"
            },
            {
              "component": "select",
              "description": "Locale/Currency selector.",
              "mcpQuery": "Show me Kendo DropDownList examples for locale selection with flag icons and persistence to user preferences.",
              "children": ""
            }
          ]
        },
        {
          "component": "overlay",
          "description": "Global modal layer for dialogs like scheduling, message compose, refill request, and confirmations. Requires: modalState, uiQueue.",
          "mcpQuery": "Show me Kendo Dialog/Window examples for large forms and multi-step flows with responsive sizing and focus trap.",
          "children": [
            {
              "component": "modal",
              "description": "Schedule Appointment modal with stepper.",
              "mcpQuery": "Show me Kendo Dialog + Stepper examples for appointment scheduling with date/time picker, provider selection, and review step.",
              "children": [
                {
                  "component": "stepper",
                  "description": "Scheduling steps: Select Service, Choose Provider, Pick Time, Review.",
                  "mcpQuery": "Show me Kendo Stepper examples with validation per step and navigation control.",
                  "children": [
                    {
                      "component": "step",
                      "description": "Select service type dropdown.",
                      "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                      "children": [
                        {
                          "component": "select",
                          "description": "Service type list from appointmentCatalog.",
                          "mcpQuery": "Show me Kendo DropDownList examples with grouped items and descriptions.",
                          "children": ""
                        }
                      ]
                    },
                    {
                      "component": "step",
                      "description": "Choose provider and location.",
                      "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                      "children": [
                        {
                          "component": "combobox",
                          "description": "Provider search and pick.",
                          "mcpQuery": "Show me Kendo ComboBox examples with remote filtering and virtualization for large lists.",
                          "children": ""
                        },
                        {
                          "component": "select",
                          "description": "Location selection.",
                          "mcpQuery": "Show me Kendo DropDownList examples with icons for telehealth vs in-clinic.",
                          "children": ""
                        }
                      ]
                    },
                    {
                      "component": "step",
                      "description": "Pick available time slot via calendar/scheduler.",
                      "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                      "children": [
                        {
                          "component": "scheduler",
                          "description": "Availability slots by provider/location.",
                          "mcpQuery": "Show me Kendo Scheduler examples for selecting time slots with resource grouping and timezone support.",
                          "children": ""
                        }
                      ]
                    },
                    {
                      "component": "step",
                      "description": "Review and confirm appointment details.",
                      "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                      "children": [
                        {
                          "component": "summary",
                          "description": "Read-only appointment details prior to confirmation.",
                          "mcpQuery": "",
                          "children": ""
                        },
                        {
                          "component": "submit",
                          "description": "Confirm appointment booking.",
                          "mcpQuery": "Show me Kendo Button primary submit within Dialog footer with loading and success state.",
                          "children": "Confirm"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "component": "toaster",
              "description": "Global toast/alert system for success/error/info with ARIA live regions. Requires: uiQueue.",
              "mcpQuery": "Show me Kendo Notifications/Toast examples with different variants and auto-dismiss timers.",
              "children": ""
            },
            {
              "component": "loader",
              "description": "Route-level skeletons/spinners for async content. Requires: loadingState.",
              "mcpQuery": "Show me Kendo Skeleton/Loader examples for cards and tables with shimmer effects.",
              "children": ""
            }
          ]
        }
      ]
    },
    "metadata": {
      "totalComponents": 109,
      "maxDepth": 7,
      "componentTypes": [
        "container",
        "header",
        "logo",
        "group",
        "avatar",
        "h3",
        "chip",
        "toggle",
        "status",
        "search",
        "toolbar",
        "button",
        "icon",
        "dropdownmenu",
        "flex",
        "sidebar",
        "card",
        "h4",
        "p",
        "accordion",
        "menuitem",
        "link",
        "main",
        "section",
        "h1",
        "breadcrumb",
        "daterangepicker",
        "grid",
        "listview",
        "drawer",
        "table",
        "tabstrip",
        "tab",
        "linechart",
        "sparkline",
        "barchart",
        "form",
        "select",
        "textinput",
        "textarea",
        "fileupload",
        "submit",
        "save",
        "cancel",
        "item",
        "footer",
        "overlay",
        "modal",
        "stepper",
        "step",
        "combobox",
        "scheduler",
        "summary",
        "toaster",
        "loader"
      ],
      "description": "Comprehensive ACT for a healthcare patient portal with secure header, navigation sidebar, dashboard widgets (appointments, results, meds, charts), quick contact form, billing summary, footer, and global utilities. Includes rich component diversity and targeted MCP queries for Kendo UI integration."
    }
  },
  "routePath": "/generated/b6a3cbbac8df498ed6c55cdae420a338",
  "mcpQueries": {
    "StackLayout": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
    "AppBar": "Show me Kendo UI AppBar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
    "Avatar": "Show me Kendo UI Avatar examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
    "Typography": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
    "Chip": "Show me Kendo UI Chip examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
    "Switch": "Show me Kendo Switch/Toggle examples for a privacy visibility toggle with ARIA labels, controlled state, and change events. Include keyboard interactions, form integration, and disabled states styling.",
    "Badge": "Show me Kendo UI Badge examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
    "AutoComplete": "Show me Kendo Autocomplete/SearchBox examples for a global search with async suggestions, custom item templates with icons, and keyboard navigation. Include debounce, minLength, loading indicator, and aria-live for results.",
    "Toolbar": "Show me Kendo UI Toolbar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
    "Button": "Show me Kendo Button primary submit within Dialog footer with loading and success state.",
    "SVGIcon": "Show me Kendo Dropdown/Popup + Badge examples to build a notifications bell with async list, infinite scroll, and item templates. Include keyboard and focus management.",
    "DropDownButton": "Show me Kendo Menu/DropDownButton examples for a user account menu with icons, separators, and logout action. Include accessibility patterns and custom header template.",
    "Drawer": "Show me Kendo Drawer/Panel examples used as a side details panel with dynamic content and close button.",
    "Card": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
    "ExpansionPanel": "Show me Kendo PanelBar/Accordion examples for navigation sections with icons and badges, supporting routing and disabled items based on permissions.",
    "Menu": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
    "Breadcrumb": "Show me Kendo Breadcrumb examples with custom item renderers and routing integration.",
    "DateRangePicker": "Show me Kendo DateRangePicker examples with presets (7d/30d/custom), controlled state, and change events to refetch data. Include responsive popup and keyboard navigation.",
    "Grid": "Show me Kendo UI Grid examples with data binding, sorting, filtering, and pagination. Include examples with realistic sample data, custom cell templates, and responsive design. Provide complete implementation with all necessary props.",
    "ListView": "Show me Kendo ListView with custom item templates including icons, time badges, and action buttons.",
    "DataGrid": "Show me Kendo Grid examples with small dense rows, conditional cell styling for flags (H/L), and row selection to open a drawer.",
    "TabStrip": "Show me Kendo UI TabStrip examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
    "Chart": "Show me Kendo Line Chart with constant line annotation to show goal.",
    "Sparkline": "Show me Kendo Sparkline examples for compact trend inside a card with constrained height.",
    "Form": "Show me Kendo Form + Field components with schema-based validation and accessible error messages.",
    "DropDownList": "Show me Kendo DropDownList examples with icons for telehealth vs in-clinic.",
    "TextBox": "Show me Kendo TextBox examples with character counter and maxLength handling.",
    "TextArea": "Show me Kendo TextArea examples with auto-resize and validation message display.",
    "Upload": "Show me Kendo Upload examples with async upload, restrictions (type/size/count), progress, and remove actions.",
    "Popup": "Show me Kendo Dialog/Window examples for large forms and multi-step flows with responsive sizing and focus trap.",
    "Dialog": "Show me Kendo Dialog + Stepper examples for appointment scheduling with date/time picker, provider selection, and review step.",
    "Stepper": "Show me Kendo Stepper examples with validation per step and navigation control.",
    "ComboBox": "Show me Kendo ComboBox examples with remote filtering and virtualization for large lists.",
    "Scheduler": "Show me Kendo Scheduler examples for selecting time slots with resource grouping and timezone support.",
    "Loader": "Show me Kendo Skeleton/Loader examples for cards and tables with shimmer effects."
  },
  "mcpResponses": {
    "ListView": "## API Reference Item\n- Name: ListViewProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact ListView component]({% slug overview_listview %}).\n- Syntax: \n\n## Additional Context\n### ListViewProps.className (children)\nname: className\nfullName: ListViewProps.className\nsummary: Sets a class of the ListView DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.data (children)\nname: data\nfullName: ListViewProps.data\nsummary: Sets the data of the ListView.\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.footer (children)\nname: footer\nfullName: ListViewProps.footer\nsummary: Defines the component that renders for the ListView footer.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.header (children)\nname: header\nfullName: ListViewProps.header\nsummary: Defines the component that renders for the ListView header.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.item (children)\nname: item\nfullName: ListViewProps.item\nsummary: Defines the component that renders for each item of the data collection.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.navigatable (children)\nname: navigatable\nfullName: ListViewProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the ListView.\\r\\nBy default, navigation is disabled.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.onScroll (children)\nname: onScroll\nfullName: ListViewProps.onScroll\nsummary: Fires when the ListView has been scrolled.\nsyntax:\n  return:\n    type: '(event: ListViewEvent) => void'\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.style (children)\nname: style\nfullName: ListViewProps.style\nsummary: Sets styles to the ListView container.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-listview'\n\n\nThe KendoReact ListView enables you to display a custom layout of data items.\nThe ListView is ideally suited for displaying a list of items in a consistent manner. You can see commonplace examples of its use in the design structures of the Internet, search engine results, tweets from Twitter, Facebook updates, inbox items in Gmail, card lists in Instagram, and so on. Paging\n\nThe ListView enables you to split its content into pages by adding a pager and by using its extensive set of configuration options, such as implementing a responsive behavior, customizing its appearance, and more. <a href=\"/kendo-react-ui-develop/components/listview/paging\">Read more about the pager options of the ListView...</a>\n\nEditing\n\nDepending on your user requirements, you can edit, add, or delete the ListView items using templates. <a href=\"/kendo-react-ui-develop/components/listview/editing\">Read more about the editing feature of the ListView...</a>\n\nGetting Started with the KendoReact ListViewPremium\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "DropDownButton": "## API Reference Item\n- Name: DropDownButtonClassComponent\n- Type: Function\n- Summary: Represents the [KendoReact DropDownButton component]({% slug overview_dropdownbutton %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { DropDownButton } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return <DropDownButton text=\"Options\" items={[{ text: 'Item 1' }, { text: 'Item 2' }]} />;\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DropDownButtonProps (children)\nname: DropDownButtonProps\nfullName: DropDownButtonProps\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - accessKey\n  - ariaLabel\n  - buttonClass\n  - children\n  - className\n  - dir\n  - disabled\n  - endIcon\n  - fillMode\n  - icon\n  - iconClass\n  - id\n  - imageUrl\n  - item\n  - itemRender\n  - items\n  - onBlur\n  - onClose\n  - onFocus\n  - onItemClick\n  - onOpen\n  - opened\n  - popupSettings\n  - rounded\n  - size\n  - startIcon\n  - style\n  - svgIcon\n  - tabIndex\n  - text\n  - textField\n  - themeColor\n  - title\n\n---\n### DropDownButtonClassComponent.DropDownButtonClassComponent.props (children)\nname: props\nfullName: DropDownButtonClassComponent.DropDownButtonClassComponent.props\nsyntax:\n  return:\n    type: DropDownButtonProps | RefAttributes\n\n\nCustomizationPremium\n\nThe DropDownButton provides options for customizing the rendering and behavior of its popup and popup items.\nThe component enables you to:\n\nVisually enhance the popup\nOverriding the default item rendering\n\nPopup Behavior\n\nTo configure the behavior of the popup, use the <a href=\"/kendo-react-ui-develop/components/buttons/api/buttonspopupsettings#animate\">animate</a> and <a href=\"/kendo-react-ui-develop/components/buttons/api/buttonspopupsettings#popupclass\">popupClass</a> settings.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nResources\n\n<a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/examples/menu-button-links/\" rel=\"noopener\" target=\"_blank\">WAI-ARIA Authoring Practices: Navigation Menu Button</a>\nThe following example demonstrates the DropDownButton keyboard navigation in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nOut of the box, the Kendo React DropDownButton provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Switch": "## API Reference Item\n- Name: SwitchProps.disabled\n- Type: Property\n- Summary: Disables the Switch when set to \n`true`\n ([see example]({% slug disabled_switch %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Switch } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <div className=\"k-d-flex k-align-items-center\">\n            <span>Disabled switch</span>\n            <Switch disabled={true} />\n        </div>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: SwitchProps.defaultChecked\n- Type: Property\n- Summary: Sets the value of the Switch when it is initially displayed ([see example]({% slug default_state %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Switch } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <div className=\"k-d-flex k-align-items-center\">\n            <span>Default checked switch</span>\n            <Switch defaultChecked={true} />\n        </div>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: SwitchProps.onChange\n- Type: Property\n- Summary: Fires when the value of the Switch changes.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Switch, SwitchChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const handleChange = (event: SwitchChangeEvent) => {\n        alert(`Switch value: ${event.value}`);\n    };\n    return (\n        <Switch onChange={handleChange} />\n    );\n}\n\n```\n\n\n## Additional Context\n### SwitchChangeEvent (generic)\nname: SwitchChangeEvent\nfullName: SwitchChangeEvent\nsummary: |-\n  The arguments for the \n  `onChange`\n   Switch event.\nsyntax: {}\npackageName: '@progress/kendo-react-inputs'\nmembers:\n  - nativeEvent\n  - syntheticEvent\n  - target\n  - value\n\n\n## API Reference Item\n- Name: SwitchProps.ariaLabel\n- Type: Property\n- Summary: Specifies the accessible label of the Switch.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Switch } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <Switch ariaLabel=\"Enable notifications\" />\n    );\n}\n\n```\n\n\nControlled Mode\n\nBy default, the Switch is in an uncontrolled state.\nTo manage the state of the Switch, use its <a href=\"/kendo-react-ui-develop/components/inputs/api/switchprops#checked\">checked</a> property, handle the <a href=\"/kendo-react-ui-develop/components/inputs/api/switchprops#onchange\">onChange</a> event, and pass the new value through the props.\n\nManual Switch Toggle\n\nThe following example demonstrates how to manually toggle the Switch.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nRead-Only Switch\n\nThe KendoReact Switch lets the user toggle between checked and unchecked states.\nThe KendoReact Switch component is part of the KendoReact library of React UI components. It is distributed through NPM under the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-inputs\" rel=\"noopener\" target=\"_blank\">kendo-react-inputs package</a>. support numerous keyboard shortcuts that allow users to interact with the component.\n<a href=\"/kendo-react-ui-develop/components/inputs/switch/accessibility/wai-aria-support\">Accessibility</a>‚ÄîThe Switch component is accessible for screen readers and provides full WAI-ARIA support.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "TextBox": "## API Reference Item\n- Name: TextBox\n- Type: Function\n- Summary: Represents the [KendoReact TextBox component]({% slug overview_textbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextBox, TextBoxChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [name, setName] = React.useState<string>('');\n\n    const handleChange = (event: TextBoxChangeEvent) => {\n        setName(event.value as string);\n    };\n\n    return <TextBox value={name} onChange={handleChange} placeholder=\"Enter your name\" />;\n}\n\n```\n\n\n## Additional Context\n### TextBox.TextBox.props (children)\nname: props\nfullName: TextBox.TextBox.props\nsyntax:\n  return:\n    type: TextBoxProps | RefAttributes\n\n\n## API Reference Item\n- Name: TextBoxProps\n- Type: Interface\n- Summary: Represents the properties of the KendoReact [TextBox]({% slug api_inputs_textbox %}) component\n- Syntax: \n\n## Additional Context\n### TextBoxProps.autoFocus (children)\nname: autoFocus\nfullName: TextBoxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the TextBox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.fillMode (children)\nname: fillMode\nfullName: TextBoxProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.inputAttributes (children)\nname: inputAttributes\nfullName: TextBoxProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.onChange (children)\nname: onChange\nfullName: TextBoxProps.onChange\nsummary: |-\n  The \n  `onChange`\n   callback of the \n  `input`\n   element inside the TextBox.\nsyntax:\n  return:\n    type: '(event: TextBoxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.prefix (children)\nname: prefix\nfullName: TextBoxProps.prefix\nsummary: Sets a custom prefix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.rounded (children)\nname: rounded\nfullName: TextBoxProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.size (children)\nname: size\nfullName: TextBoxProps.size\nsummary: \"Configures the \\n`size`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.suffix (children)\nname: suffix\nfullName: TextBoxProps.suffix\nsummary: Sets a custom suffix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.valid (children)\nname: valid\nfullName: TextBoxProps.valid\nsummary: |-\n  Indicates if the component is in \n  `valid`\n   state\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n\nThe KendoReact TextBox component provides options for creating composite inputs that you can integrate within forms or use as standalone items.\nThis   is   a  Free React  TextBoxThe KendoReact  TextBox   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the TextBox in action.\n\nControlled Mode\n\nBy default, the KendoReact TextBox component is in an uncontrolled mode.\n\nControlling the Value\n\n\nUse its <a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#onchange\">onChange</a> event.\n\nThe following example showcases the controlled mode in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nForms Support\n\nThe KendoReact TextBox component can be easily integrated with our <a href=\"/kendo-react-ui-develop/components/form\">KendoReact Form</a>.\nThe form enables you to validate the TextBox and prevent the submission of the forms which are in an invalid state.\nBy utilizing the KendoReact Form component we can take advantage of the <a href=\"/kendo-react-ui-develop/components/form/validation\">Validation</a> functionality and render additional custom component depending on the form's validity state.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Card": "## API Reference Item\n- Name: CardProps.className\n- Type: Property\n- Summary: Sets additional classes to the Card.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            className=\"custom-card-class\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: CardProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Card.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px',\n                backgroundColor: 'lightblue',\n                padding: '20px'\n            }}\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Card\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### CardProps (children)\nname: CardProps\nfullName: CardProps\nsyntax:\n  return:\n    type: any\n  parameters:\n    - id: 26200\n      name: key\n      type: string\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - dir\n  - orientation\n  - style\n  - type\n\n---\n### Card.Card.props (children)\nname: props\nfullName: Card.Card.props\nsyntax:\n  return:\n    type: Omit<CardProps, \"ref\"> | RefAttributes\n\n\n## API Reference Item\n- Name: CardProps.orientation\n- Type: Property\n- Summary: Sets the Card orientation.\r\n\r\nThe supported values are:\r\n* \n`horizontal`\n - Default\r\n* \n`vertical`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            orientation=\"vertical\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\nOrientation\n\nThe Card enables you to arrange its content either vertically or horizontally.\nTo set the Card orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/cardprops#orientation\">orientation</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe following example demonstrates the Card in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Card is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Card and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features <a href=\"/kendo-react-ui-develop/components/layout/card/orientation\">Orientation</a>‚ÄîYou can arrange the content of the Card vertically or horizontally.\n<a href=\"/kendo-react-ui-develop/components/layout/card/types\">Types</a>‚ÄîThe predefined types provide a convenient way to change the appearance of the Card.\n<a href=\"/kendo-react-ui-develop/components/layout/card/action_buttons\">Actions</a>‚ÄîThe Card allows you to render custom action buttons and to customize their orientation and layout.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Scheduler": "## API Reference Item\n- Name: Scheduler\n- Type: Function\n- Summary: Represents the [KendoReact Scheduler component]({% slug overview_scheduler %})\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Scheduler, DayView } from '@progress/kendo-react-scheduler';\n\nfunction App() {\n    return (\n        <Scheduler>\n            <DayView />\n        </Scheduler>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### SchedulerProps (children)\nname: SchedulerProps\nfullName: SchedulerProps\nsummary: >-\n  Represents the props of the [KendoReact Scheduler component]({% slug\n  overview_scheduler %}).\nsyntax: {}\npackageName: '@progress/kendo-react-scheduler'\nmembers:\n  - ariaLabel\n  - ariaLabelledby\n  - children\n  - className\n  - data\n  - date\n  - defaultDate\n  - defaultView\n  - editItem\n  - editSlot\n  - editTask\n  - editable\n  - footer\n  - group\n  - header\n  - height\n  - id\n  - item\n  - modelFields\n  - onDataChange\n  - onDateChange\n  - onViewChange\n  - resources\n  - role\n  - rtl\n  - slot\n  - style\n  - tabIndex\n  - task\n  - timezone\n  - view\n  - viewItem\n  - viewSlot\n  - viewTask\n\n---\n### Scheduler.Scheduler.props (children)\nname: props\nfullName: Scheduler.Scheduler.props\nsyntax:\n  return:\n    type: SchedulerProps | RefAttributes\n\n\n## API Reference Item\n- Name: SchedulerProps.group\n- Type: Property\n- Summary: Specifies the groups of the Scheduler.\n- Syntax: \n\n- Return Type: name: SchedulerGroup\nfullName: SchedulerGroup\nsummary: An interface for the Scheduler groups.\nsyntax: {}\npackageName: '@progress/kendo-react-scheduler'\nmembers:\n  - orientation\n  - resources\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Scheduler, DayView, SchedulerGroup, SchedulerResource } from '@progress/kendo-react-scheduler';\n\nconst group: SchedulerGroup = {\n    resources: ['Rooms', 'Person'],\n    orientation: 'horizontal'\n};\nconst resources: SchedulerResource[] = [\n    {\n        name: 'Rooms',\n        data: [\n            { text: 'Meeting Room 101', value: 1, color: '#5392E4' },\n            { text: 'Meeting Room 201', value: 2, color: '#FF7272' }\n        ],\n        field: 'roomId',\n        valueField: 'value',\n        textField: 'text',\n        colorField: 'color'\n    },\n    {\n        name: 'Person',\n        data: [\n            { text: 'Peter', value: 1 },\n            { text: 'Alex', value: 2 }\n        ],\n        field: 'personId',\n        valueField: 'value',\n        textField: 'text',\n        colorField: 'color'\n    }\n];\n\nfunction App() {\n    return (\n        <Scheduler group={group} resources={resources}>\n            <DayView />\n        </Scheduler>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: SchedulerProps.timezone\n- Type: Property\n- Summary: Specifies the id of the timezone that the Scheduler displays.\r\nFor example, \n`Europe/Sofia`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Scheduler } from '@progress/kendo-react-scheduler';\nimport '@progress/kendo-date-math/tz/Europe/Sofia';\n\nconst sampleData = [\n    {\n        id: 4,\n        start: new Date('2025-06-09T21:00:00.000Z'),\n        startTimezone: null,\n        end: new Date('2025-06-10T00:00:00.000Z'),\n        endTimezone: null,\n        isAllDay: false,\n        title: 'Bowling tournament',\n        description: '',\n        recurrenceRule: null,\n        recurrenceId: null,\n        recurrenceExceptions: null,\n        ownerID: 2,\n        personId: 2\n    },\n    {\n        id: 5,\n        start: new Date('2025-06-10T07:00:00.000Z'),\n        startTimezone: null,\n        end: new Date('2025-06-10T08:00:00.000Z'),\n        endTimezone: null,\n        isAllDay: false,\n        title: 'Take the dog to the vet',\n        description: '',\n        recurrenceRule: null,\n        recurrenceId: null,\n        recurrenceExceptions: null,\n        ownerID: 2,\n        personId: 2\n    },\n    {\n        id: 6,\n        start: new Date('2025-06-11T11:30:00.000Z'),\n        startTimezone: null,\n        end: new Date('2025-06-11T13:00:00.000Z'),\n        endTimezone: null,\n        isAllDay: false,\n        title: 'Call Charlie about the project',\n        description: '',\n        recurrenceRule: null,\n        recurrenceId: null,\n        recurrenceExceptions: null,\n        ownerID: 2,\n        personId: 2\n    }\n];\nconst App = () => <Scheduler data={sampleData} timezone=\"Etc/UTC\" />;\n\nexport default App;\n\n```\n\n\nRight-to-Left Support\n\nThe following example demonstrates how to utilize the RTL support for the Scheduler.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nTimezones Support\n\nThe Scheduler features built-in support for displaying events in different timezones around the world. For more information, refer to the article on <a href=\"/kendo-react-ui-develop/components/scheduler/timezones\">timezones</a>.\n\nAn event can have one or more resources assigned to it‚Äîfor example, a meeting room or a guest list. For more information on configuring the Scheduler to display each resource as a sub-view, refer to the article on <a href=\"/kendo-react-ui-develop/components/scheduler/grouping\">grouping</a>.\n\nTo customize the styles of the SchedulerSlot, we recommend using either <a href=\"/kendo-react-ui-develop/components/scheduler/api/schedulerslotprops#style\">style</a> or <a href=\"/kendo-react-ui-develop/components/scheduler/api/scheduleritemprops#classname\">className</a> properties.\nThe following example demonstrates customizing the border to a red one, based on the slot isAllDay property, in order to separate the all-day slots from the time slots in the Week view.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "SVGIcon": "The following example demonstrates the AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, and MultiSelect components in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nWhat are the KendoReact Dropdowns?\n\nThe Dropdowns are native KendoReact components built specifically for the React ecosystem and distributed via npm.\n\n<a href=\"https://www.npmjs.com/package/@progress/kendo-react-dropdowns\" rel=\"noopener\" target=\"_blank\">@progress/kendo-react-dropdowns</a>\n\nPackage Contents For any questions about the use of KendoReact Dropdowns, or any other <a href=\"https://www.telerik.com/kendo-react-ui/components/\" rel=\"noopener\" target=\"_blank\">KendoReact components</a>, there are <a href=\"https://www.telerik.com/kendo-react-ui/support\" rel=\"noopener\" target=\"_blank\">several free support options available</a>:\n\nAdd a Loader to indicate that data is being fetched for a <a href=\"/kendo-react-ui/components/grid\">Grid</a>.\nShow unread notifications with a Badge on an <a href=\"/kendo-react-ui/components/layout/appbar\">AppBar</a> or <a href=\"/kendo-react-ui/components/buttons/button\">Button</a>.\nImprove UX with Skeleton placeholders for a <a href=\"/kendo-react-ui/components/layout/card\">Card</a> with profile details while data loads.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "ComboBox": "## API Reference Item\n- Name: ComboBoxProps.virtual\n- Type: Property\n- Summary: Configures the virtual scrolling of the ComboBox ([more information and examples]({% slug virtualization_combobox %})).\n- Syntax: \n\n- Return Type: name: VirtualizationSettings\nfullName: VirtualizationSettings\nsummary: The virtualization settings.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - pageSize\n  - skip\n  - total\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ComboBoxPageChangeEvent } from '@progress/kendo-react-dropdowns';\n\nconst total = 5000;\nconst pageSize = 18;\nconst allData: { id: number; text: string }[] = [];\n\nfor (let i = 0; i < total; i++) {\n    allData.push({ id: i, text: 'Item ' + i });\n}\n\nexport default function App() {\n    const [state, setState] = React.useState({\n        subsetData: allData.slice(0, pageSize),\n        skip: 0\n    });\n\n    const pageChange = (event: ComboBoxPageChangeEvent) => {\n        const skip = event.page.skip;\n        const take = event.page.take;\n        const newSubsetData = allData.slice(skip, skip + take);\n\n        setState({\n            subsetData: newSubsetData,\n            skip: skip\n        });\n    };\n\n    return (\n        <ComboBox\n            data={state.subsetData}\n            dataItemKey=\"id\"\n            textField=\"text\"\n            virtual={{\n                total: total,\n                pageSize: pageSize,\n                skip: state.skip\n            }}\n            onPageChange={pageChange}\n            popupSettings={{\n                height: '250px'\n            }}\n        />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: ComboBoxProps.filterable\n- Type: Property\n- Summary: Enables the filtering functionality of the ComboBox ([more information and examples]({% slug filtering_combobox %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ComboBoxFilterChangeEvent } from '@progress/kendo-react-dropdowns';\nimport { filterBy, FilterDescriptor } from '@progress/kendo-data-query';\n\nconst weather = ['Sunny', 'Cloudy'];\n\nexport default function App() {\n    const [data, setData] = React.useState(weather.slice());\n\n    const filterData = (filter: FilterDescriptor) => {\n        return filterBy(weather, filter);\n    };\n\n    const filterChange = (event: ComboBoxFilterChangeEvent) => {\n        setData(filterData(event.filter));\n    };\n\n    return <ComboBox data={data} label=\"Select weather\" onFilterChange={filterChange} filterable={true} />;\n}\n\n```\n\n\nBasic Configuration\n\nThe following example demonstrates how to set the virtualization of the ComboBox.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nVirtualization with Filtering\n\nIf you use virtualization in your project alongside filtering, scrolling will be reset every time the value of the filter input is changed.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nVirtualization with Grouping\n\nThe below example shows how we can use the ComboBox in a scenario with Grouping and Virtualization.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nComboBox doesn't internally group the data passed to it. To use the component in a grouping scenario, you need to use the groupBy method available in the KendoReact DataQuery package.\nData that can't be grouped is not visualized in the component - the ComboBox internally filters the data items that doesn't have the field that is set as a groupField.\n\n\nThe following example demonstrates the modern grouping mode in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGrouping with Filtering\n\nThe following example demonstrates how to configure the ComboBox in a Grouping + Filtering scenario.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nMinimum Filter Length\n\nThe following example demonstrates how to update the data and open the drop-down list of the ComboBox only after typing a minimum number of characters.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFiltering with Remote Data and Virtualization\n\nThe following example demonstrates how to configure the ComboBox to use remote data along with data caching, virtual scrolling, and filtering.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Menu": "## API Reference Item\n- Name: MenuProps.onSelect\n- Type: Property\n- Summary: Fires when a Menu item is selected.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Menu, MenuSelectEvent } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    const handleSelect = (event: MenuSelectEvent) => {\n        console.log('Menu item selected');\n    };\n\n    return <Menu items={[{ text: 'Home' }, { text: 'About' }]} onSelect={handleSelect} />;\n}\n\n```\n\n\n## Additional Context\n### MenuSelectEvent (generic)\nname: MenuSelectEvent\nfullName: MenuSelectEvent\nsummary: |-\n  The arguments for the \n  `select`\n   event of the Menu. If the item has a URL and the event is prevented, navigation to the URL does not occur.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - item\n  - itemId\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n## API Reference Item\n- Name: MenuProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Additional Context\n### MenuProps.animate (children)\nname: animate\nfullName: MenuProps.animate\nsummary: Controls the Popup animation.\nsyntax:\n  return:\n    type: boolean | PopupAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.children (children)\nname: children\nfullName: MenuProps.children\nsummary: Sets the Menu items declaratively.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.className (children)\nname: className\nfullName: MenuProps.className\nsummary: Adds a custom className to the Menu top element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.customCloseItemIds (children)\nname: customCloseItemIds\nfullName: MenuProps.customCloseItemIds\nsummary: \"Sets the ids of the Menu items that will not be closed on mouse-leave. The ids are hierarchical and zero-based.\\r\\nThe first root item has a \\n`0`\\n id. If the first root item has children,\\r\\nthe first child item acquires a \\n`0_0`\\n id and the second acquires a \\n`0_1`\\n id.\"\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.dir (children)\nname: dir\nfullName: MenuProps.dir\nsummary: Sets the direction of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverCloseDelay (children)\nname: hoverCloseDelay\nfullName: MenuProps.hoverCloseDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on item mouse-leave\\r\\n([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverOpenDelay (children)\nname: hoverOpenDelay\nfullName: MenuProps.hoverOpenDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on\\r\\nitem mouse-leave ([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\\r\\nUsed to avoid accidental closure on leaving.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.id (children)\nname: id\nfullName: MenuProps.id\nsummary: Sets the ID of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.itemRender (children)\nname: itemRender\nfullName: MenuProps.itemRender\nsummary: \"A React functional or class component which is used for rendering the innermost part of\\r\\nthe Menu item ([see example]({% slug rendering_menu %}#toc-items)).\\r\\nBy default, the innermost item part includes only the text for the item.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.items (children)\nname: items\nfullName: MenuProps.items\nsummary: Sets the Menu items.\nsyntax:\n  return:\n    type: Array<MenuItemModel>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.linkRender (children)\nname: linkRender\nfullName: MenuProps.linkRender\nsummary: \"A React functional or class component which is used for rendering the link of the item\\r\\n([see example]({% slug rendering_menu %}#toc-links)).\\r\\nThe item link is a part of the visual representation of the item which, by default, includes an arrow, icon, and text.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.openOnClick (children)\nname: openOnClick\nfullName: MenuProps.openOnClick\nsummary: |-\n  If \n  `openOnClick`\n   is set to \n  `true`\n  , the items are opened on mouse hover only after an initial click.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.vertical (children)\nname: vertical\nfullName: MenuProps.vertical\nsummary: \"Specifies whether the Menu will be vertical\\r\\n([see example]({% slug vertical_menu %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { MenuClassComponent, MenuItem } from '@progress/kendo-react-layout';\n\nconst App = () => (\n    <MenuClassComponent>\n        <MenuItem text=\"Item 1\" />\n        <MenuItem text=\"Item 2\" />\n    </MenuClassComponent>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### MenuClassComponent.constructor (children)\nname: constructor\nfullName: MenuClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.checkIsDirectionRightToLeft (children)\nname: checkIsDirectionRightToLeft\nfullName: MenuClassComponent.checkIsDirectionRightToLeft\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable (children)\nname: clearItemHoverAndLeaveRequestsIfApplicable\nfullName: MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.directionHolder (children)\nname: directionHolder\nfullName: MenuClassComponent.directionHolder\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.dispatchSelectEventIfWired (children)\nname: dispatchSelectEventIfWired\nfullName: MenuClassComponent.dispatchSelectEventIfWired\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getInputItem (children)\nname: getInputItem\nfullName: MenuClassComponent.getInputItem\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getMenuClassName (children)\nname: getMenuClassName\nfullName: MenuClassComponent.getMenuClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.inputItems (children)\nname: inputItems\nfullName: MenuClassComponent.inputItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.isItemWithDefaultClose (children)\nname: isItemWithDefaultClose\nfullName: MenuClassComponent.isItemWithDefaultClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemHoverRequest (children)\nname: itemHoverRequest\nfullName: MenuClassComponent.itemHoverRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemLeaveRequest (children)\nname: itemLeaveRequest\nfullName: MenuClassComponent.itemLeaveRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.items (children)\nname: items\nfullName: MenuClassComponent.items\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuWrapperEl (children)\nname: menuWrapperEl\nfullName: MenuClassComponent.menuWrapperEl\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.mouseOverHandler (children)\nname: mouseOverHandler\nfullName: MenuClassComponent.mouseOverHandler\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemBlur (children)\nname: onItemBlur\nfullName: MenuClassComponent.onItemBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemClick (children)\nname: onItemClick\nfullName: MenuClassComponent.onItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemFocus (children)\nname: onItemFocus\nfullName: MenuClassComponent.onItemFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseDown (children)\nname: onItemMouseDown\nfullName: MenuClassComponent.onItemMouseDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseLeave (children)\nname: onItemMouseLeave\nfullName: MenuClassComponent.onItemMouseLeave\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseOver (children)\nname: onItemMouseOver\nfullName: MenuClassComponent.onItemMouseOver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onKeyDown (children)\nname: onKeyDown\nfullName: MenuClassComponent.onKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.prepareItems (children)\nname: prepareItems\nfullName: MenuClassComponent.prepareItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.reset (children)\nname: reset\nfullName: MenuClassComponent.reset\nsummary: Resets the selection and opening of Menu items.\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setFocusedItemId (children)\nname: setFocusedItemId\nfullName: MenuClassComponent.setFocusedItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setHoveredItemId (children)\nname: setHoveredItemId\nfullName: MenuClassComponent.setHoveredItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.animate (children)\nname: animate\nfullName: MenuClassComponent.animate\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.element (children)\nname: element\nfullName: MenuClassComponent.element\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuItemId (children)\nname: menuItemId\nfullName: MenuClassComponent.menuItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Menu.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Menu } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Menu items={[{ text: 'Home' }, { text: 'About' }]} style={{ backgroundColor: 'lightblue' }} />;\n}\n\n```\n\n\nEvents\n\nThe KendoReact Menu generates a variety of events that you can handle. This allows you to tailor the behavior of the Menu to your specific requirements.\nThe following example demonstrates the <a href=\"/kendo-react-ui-develop/components/layout/api/menuselectevent\">select</a> event of the Menu.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThis   is   a  Free React  MenuThe KendoReact  Menu   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Menu in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... KendoReact Menu Overview\n\nThe KendoReact Menu is a multi-level component for displaying hierarchical data.\nYou can describe the Menu items either by:\n\nUsing nested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSetting the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> property.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Upload": "## API Reference Item\n- Name: UploadProps.onProgress\n- Type: Property\n- Summary: Triggered when the upload progress of a file changes.\r\n\r\nExample:\r\n\n```jsx\r\n<Upload onProgress={(event) => console.log(event.percentComplete)} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Upload,\n    UploadFileInfo,\n    UploadOnAddEvent,\n    UploadOnCancelEvent,\n    UploadOnRemoveEvent,\n    UploadOnProgressEvent,\n    UploadOnStatusChangeEvent\n} from '@progress/kendo-react-upload';\n\nexport const progressRef: { [uid: string]: number } = {};\nexport const requestIntervalRef: { [uid: string]: number } = {};\n\nexport const onSaveRequest = (\n    files: UploadFileInfo[],\n    _options: { formData: FormData; requestOptions: any },\n    onProgress: (uid: string, event: ProgressEvent<EventTarget>) => void\n): Promise<{ uid: string }> => {\n    const uid = files[0].uid;\n    progressRef[uid] = 0;\n\n    return new Promise<{ uid: string }>((resolve) => {\n        let progress = 0;\n        const interval = window.setInterval(() => {\n            progress += 10;\n            if (progress <= 100) {\n                onProgress(uid, {\n                    lengthComputable: true,\n                    loaded: progress,\n                    total: 100\n                } as unknown as ProgressEvent);\n            }\n            if (progress >= 100) {\n                clearInterval(interval);\n                delete progressRef[uid];\n                resolve({ uid });\n            }\n        }, 300);\n\n        requestIntervalRef[uid] = interval;\n    });\n};\n\nexport const onRemoveRequest = (\n    files: UploadFileInfo[],\n    _options: { formData: FormData; requestOptions: any }\n): Promise<{ uid: string }> => {\n    const uid = files[0].uid;\n    return new Promise<{ uid: string }>((resolve) => setTimeout(() => resolve({ uid }), 300));\n};\n\nexport default function App() {\n    const [files, setFiles] = React.useState<UploadFileInfo[]>([]);\n\n    const onAdd = (event: UploadOnAddEvent) => {\n        const valid: UploadFileInfo[] = [];\n        const errs: string[] = [];\n\n        event.affectedFiles.forEach((f) => {\n            if (f.name.includes('2019')) {\n                errs.push(`File \"${f.name}\" has an invalid name.`);\n            } else if (files.length + valid.length < 2) {\n                valid.push(f);\n            } else if (!errs.includes('Cannot upload more than two files.')) {\n                errs.push('Cannot upload more than two files.');\n            }\n        });\n\n        if (valid.length) {\n            setFiles((prev) => [...prev, ...valid]);\n            event.target.uploadFiles({ default: valid });\n        }\n    };\n\n    const onCancel = (event: UploadOnCancelEvent) => {\n        const uid = event.uid;\n        clearInterval(requestIntervalRef[uid]);\n        delete progressRef[uid];\n    };\n\n    const onRemove = (e: UploadOnRemoveEvent) => setFiles(e.newState);\n\n    const onProgress = (e: UploadOnProgressEvent) => {\n        setFiles((prev) => {\n            if (JSON.stringify(prev) !== JSON.stringify(e.newState)) {\n                return e.newState;\n            }\n            return prev;\n        });\n    };\n\n    const onStatusChange = (e: UploadOnStatusChangeEvent) => {\n        setFiles((prev) => {\n            if (JSON.stringify(prev) !== JSON.stringify(e.newState)) {\n                return e.newState;\n            }\n            return prev;\n        });\n    };\n    return (\n        <Upload\n            autoUpload={false}\n            showActionButtons={false}\n            files={files}\n            saveUrl={onSaveRequest}\n            removeUrl={onRemoveRequest}\n            onCancel={onCancel}\n            onAdd={onAdd}\n            onRemove={onRemove}\n            onProgress={onProgress}\n            onStatusChange={onStatusChange}\n            withCredentials={false}\n        />\n    );\n}\n\n```\n\n\n## Additional Context\n### UploadOnProgressEvent (generic)\nname: UploadOnProgressEvent\nfullName: UploadOnProgressEvent\nsummary: |-\n  The \n  `onProgress`\n   event.\nsyntax: {}\npackageName: '@progress/kendo-react-upload'\nmembers:\n  - affectedFiles\n  - newState\n  - target\n\n\n## API Reference Item\n- Name: UploadProps.restrictions\n- Type: Property\n- Summary: Configures file restrictions such as allowed extensions and maximum file size.\r\n\r\nExample:\r\n\n```jsx\r\n<Upload restrictions={{ allowedExtensions: ['.jpg', '.png'], maxFileSize: 1048576 }} />\r\n```\n- Syntax: \n\n- Return Type: name: UploadFileRestrictions\nfullName: UploadFileRestrictions\nsummary: Configures the restrictions for the files that can be uploaded.\nsyntax: {}\npackageName: '@progress/kendo-react-upload'\nmembers:\n  - allowedExtensions\n  - maxFileSize\n  - minFileSize\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Upload } from '@progress/kendo-react-upload';\n\nexport default function App() {\n    return (\n        <Upload\n            restrictions={{ allowedExtensions: ['.jpg', '.png'], maxFileSize: 1048576 }}\n            defaultFiles={[]}\n            saveUrl={'https://demos.telerik.com/service/v2/odata/upload/save'}\n            removeUrl={'https://demos.telerik.com/service/v2/odata/upload/remove'}\n        />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Upload.async\n- Type: Accessor\n- Summary: \n- Syntax: \n\n## API Reference Item\n- Name: UploadProps.onRemove\n- Type: Property\n- Summary: Triggered when files are removed. May include a server response if applicable.\r\n\r\nExample:\r\n\n```jsx\r\n<Upload onRemove={(event) => console.log(event.files)} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Upload,\n    UploadFileInfo,\n    UploadOnAddEvent,\n    UploadOnCancelEvent,\n    UploadOnRemoveEvent,\n    UploadOnProgressEvent,\n    UploadOnStatusChangeEvent\n} from '@progress/kendo-react-upload';\n\nexport const progressRef: { [uid: string]: number } = {};\nexport const requestIntervalRef: { [uid: string]: number } = {};\n\nexport const onSaveRequest = (\n    files: UploadFileInfo[],\n    _options: { formData: FormData; requestOptions: any },\n    onProgress: (uid: string, event: ProgressEvent<EventTarget>) => void\n): Promise<{ uid: string }> => {\n    const uid = files[0].uid;\n    progressRef[uid] = 0;\n\n    return new Promise<{ uid: string }>((resolve) => {\n        let progress = 0;\n        const interval = window.setInterval(() => {\n            progress += 10;\n            if (progress <= 100) {\n                onProgress(uid, {\n                    lengthComputable: true,\n                    loaded: progress,\n                    total: 100\n                } as unknown as ProgressEvent);\n            }\n            if (progress >= 100) {\n                clearInterval(interval);\n                delete progressRef[uid];\n                resolve({ uid });\n            }\n        }, 300);\n\n        requestIntervalRef[uid] = interval;\n    });\n};\n\nexport const onRemoveRequest = (\n    files: UploadFileInfo[],\n    _options: { formData: FormData; requestOptions: any }\n): Promise<{ uid: string }> => {\n    const uid = files[0].uid;\n    return new Promise<{ uid: string }>((resolve) => setTimeout(() => resolve({ uid }), 300));\n};\n\nexport default function App() {\n    const [files, setFiles] = React.useState<UploadFileInfo[]>([]);\n\n    const onAdd = (event: UploadOnAddEvent) => {\n        const valid: UploadFileInfo[] = [];\n        const errs: string[] = [];\n\n        event.affectedFiles.forEach((f) => {\n            if (f.name.includes('2019')) {\n                errs.push(`File \"${f.name}\" has an invalid name.`);\n            } else if (files.length + valid.length < 2) {\n                valid.push(f);\n            } else if (!errs.includes('Cannot upload more than two files.')) {\n                errs.push('Cannot upload more than two files.');\n            }\n        });\n\n        if (valid.length) {\n            setFiles((prev) => [...prev, ...valid]);\n            event.target.uploadFiles({ default: valid });\n        }\n    };\n\n    const onCancel = (event: UploadOnCancelEvent) => {\n        const uid = event.uid;\n        clearInterval(requestIntervalRef[uid]);\n        delete progressRef[uid];\n    };\n\n    const onRemove = (e: UploadOnRemoveEvent) => setFiles(e.newState);\n\n    const onProgress = (e: UploadOnProgressEvent) => {\n        setFiles((prev) => {\n            if (JSON.stringify(prev) !== JSON.stringify(e.newState)) {\n                return e.newState;\n            }\n            return prev;\n        });\n    };\n\n    const onStatusChange = (e: UploadOnStatusChangeEvent) => {\n        setFiles((prev) => {\n            if (JSON.stringify(prev) !== JSON.stringify(e.newState)) {\n                return e.newState;\n            }\n            return prev;\n        });\n    };\n    return (\n        <Upload\n            autoUpload={false}\n            showActionButtons={false}\n            files={files}\n            saveUrl={onSaveRequest}\n            removeUrl={onRemoveRequest}\n            onCancel={onCancel}\n            onAdd={onAdd}\n            onRemove={onRemove}\n            onProgress={onProgress}\n            onStatusChange={onStatusChange}\n            withCredentials={false}\n        />\n    );\n}\n\n```\n\n\n## Additional Context\n### UploadOnRemoveEvent (generic)\nname: UploadOnRemoveEvent\nfullName: UploadOnRemoveEvent\nsummary: |-\n  The \n  `onRemove`\n   event.\nsyntax: {}\npackageName: '@progress/kendo-react-upload'\nmembers:\n  - affectedFiles\n  - newState\n  - response\n  - target\n\n\nRestrictions\n\nThe React Upload component provides approaches for restricting the selected files based on predefined rules, such as minimum or maximum file size and file extension. <a href=\"/kendo-react-ui-develop/components/upload/restrictions\">Read more about adding file restrictions to the Upload...</a>\n\nCustom Rendering\n\nKendoReact Upload enables you to customize the user interface of its file-list items. <a href=\"/kendo-react-ui-develop/components/upload/custom-rendering\">Read more about custom rendering of the Upload...</a>\n\nGlobalization\n\nKendoReact Upload EventsPremium\n\nThe KendoReact Upload generates a variety of events that you can handle. This allows you to tailor the Uploads's behavior to your specific requirements.\nThe following example demonstrates basic Upload events.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nMinimum File Size\n\nYou can restrict the minimum allowed file size (in bytes) by using the <a href=\"/kendo-react-ui-develop/components/upload/api/uploadfilerestrictions#minfilesize\">minFileSize</a> property. If the selected file is less than the minimum size, an error message will be displayed.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nBrowser Limitations\n\nInternet Explorer versions up to and including version 9 provide no information on the file size. As a result, the Upload restriction for the minFileSize and maxFileSize options does not work.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Avatar": "## API Reference Item\n- Name: AvatarProps.rounded\n- Type: Property\n- Summary: Configures the \n`roundness`\n of the Avatar.\r\n\r\nThe available options are:\r\n- small\r\n- medium\r\n- large\r\n- full\r\n- null&mdash;Does not set a rounded \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Avatar } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Avatar rounded=\"large\">AB</Avatar>;\n}\n\n```\n\n\n## API Reference Item\n- Name: AvatarProps.size\n- Type: Property\n- Summary: Configures the \n`size`\n of the Avatar.\r\n\r\nThe available options are:\r\n- small\r\n- medium\r\n- large\r\n- null&mdash;Does not set a size \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Avatar } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Avatar size=\"large\">AB</Avatar>;\n}\n\n```\n\n\n## API Reference Item\n- Name: Avatar.Avatar.props\n- Type: Parameter\n- Summary: \n- Syntax: \n\n- Return Type: name: AvatarProps\nfullName: AvatarProps\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - border\n  - children\n  - className\n  - fillMode\n  - rounded\n  - size\n  - src\n  - style\n  - themeColor\n  - type\n\n\n## API Reference Item\n- Name: AvatarProps.type\n- Type: Property\n- Summary: Sets the type of the Avatar.\r\n\r\nThe supported values are:\r\n* \n`image`\n\r\n* \n`text`\n\r\n* \n`icon`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Avatar } from '@progress/kendo-react-layout';\nimport { SvgIcon } from '@progress/kendo-react-common';\nimport { userIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <div className=\"k-d-flex k-justify-content-evenly\">\n            <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                <img\n                    src=\"https://demos.telerik.com/kendo-react-ui/assets/dropdowns/contacts/RICSU.jpg\"\n                    alt=\"KendoReact Avatar Customer\"\n                    style={{ width: 64, height: 64 }}\n                />\n            </Avatar>\n            <Avatar type=\"text\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                <span>JS</span>\n            </Avatar>\n            <Avatar type=\"icon\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                <SvgIcon icon={userIcon} />\n            </Avatar>\n        </div>\n    );\n}\n\n```\n\n\nTo specify a custom avatar size, use the <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#style\">style</a>property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFill Mode\n\nThe Avatar enables you to set styling options and create solid or outline avatars by setting the fillMode property.\nThe available <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#fillmode\">fillMode</a> values are:\n\nsolid (Default)\noutline ExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSize\n\nThe Avatar allows you to set predefined or custom sizes.\nTo specify a predefined size, set the <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#size\">size</a> property.\nThe available <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#size\">size</a> values are:\n\nsmall\nmedium (Default)\nlarge\n\nThe Avatar component is typically used to display images, icons, or initials representing people or other entities.\nThis   is   a  Free React  AvatarThe KendoReact  Avatar   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Avatar in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Grid": "## API Reference Item\n- Name: GridProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Additional Context\n### GridProps.adaptive (children)\nname: adaptive\nfullName: GridProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: GridProps.adaptiveTitle\nsummary: Specifies the text that is rendered as title in the adaptive popup.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.autoProcessData (children)\nname: autoProcessData\nfullName: GridProps.autoProcessData\nsummary: \"Enables data-processing inside the GridComponent based on its state.\\r\\nProvides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.\"\nsyntax:\n  return:\n    type: >-\n      boolean | { filter?: boolean, group?: boolean, page?: boolean, search?:\n      boolean, sort?: boolean }\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.children (children)\nname: children\nfullName: GridProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### GridProps.className (children)\nname: className\nfullName: GridProps.className\nsummary: Sets a class for the Grid DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.clipboard (children)\nname: clipboard\nfullName: GridProps.clipboard\nsummary: |-\n  Enables clipboard copy, cut, and paste manipulations. Accepts \n  `ClipboardSettings`\n   or a boolean value.\nsyntax:\n  return:\n    type: boolean | ClipboardSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenu (children)\nname: columnMenu\nfullName: GridProps.columnMenu\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the column\n  menu of the Grid.\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenuIcon (children)\nname: columnMenuIcon\nfullName: GridProps.columnMenuIcon\nsummary: \"Globally overrides the default (three vertical dots) column menu icon for the whole Grid. If set, the prop can be overridden on column level\\r\\n using the ([menuIcon]({% slug api_grid_gridcolumnprops %}#toc-menuicon)) property.\"\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnVirtualization (children)\nname: columnVirtualization\nfullName: GridProps.columnVirtualization\nsummary: >-\n  Enables virtualization of the columns. If virtualization is enabled, the\n  columns outside the view are not rendered.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnsState (children)\nname: columnsState\nfullName: GridProps.columnsState\nsummary: The collection of column states of the grid.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.contextMenu (children)\nname: contextMenu\nfullName: GridProps.contextMenu\nsummary: Specifies the context menu settings applied to the Grid.\nsyntax:\n  return:\n    type: >-\n      boolean | GridContextMenuOptions | (options: GridCellBaseOptions) =>\n      boolean | GridContextMenuOptions\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.dataItemKey (children)\nname: dataItemKey\nfullName: GridProps.dataItemKey\nsummary: \"Sets the Grid row key prop to the value of this field in the dataItem.\\r\\nIf not set, the dataItem index will be used for the row key, which might lead to rows not updating during paging or scrolling.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultColumnsState (children)\nname: defaultColumnsState\nfullName: GridProps.defaultColumnsState\nsummary: The default columns state, used only for the initial load.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultDetailExpand (children)\nname: defaultDetailExpand\nfullName: GridProps.defaultDetailExpand\nsummary: |-\n  The default \n  `detailExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultEdit (children)\nname: defaultEdit\nfullName: GridProps.defaultEdit\nsummary: |-\n  The default \n  `edit`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultFilter (children)\nname: defaultFilter\nfullName: GridProps.defaultFilter\nsummary: |-\n  The default \n  `filter`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroup (children)\nname: defaultGroup\nfullName: GridProps.defaultGroup\nsummary: |-\n  The default \n  `group`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroupExpand (children)\nname: defaultGroupExpand\nfullName: GridProps.defaultGroupExpand\nsummary: |-\n  The default \n  `groupExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSearch (children)\nname: defaultSearch\nfullName: GridProps.defaultSearch\nsummary: >-\n  The descriptor by which the data is searched by default. Its first\n  FilterDescriptor populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSelect (children)\nname: defaultSelect\nfullName: GridProps.defaultSelect\nsummary: |-\n  The default \n  `select`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSkip (children)\nname: defaultSkip\nfullName: GridProps.defaultSkip\nsummary: |-\n  The default \n  `skip`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSort (children)\nname: defaultSort\nfullName: GridProps.defaultSort\nsummary: \"The default \\n`sort`\\n state applied to the Grid when using uncontrolled mode.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultTake (children)\nname: defaultTake\nfullName: GridProps.defaultTake\nsummary: |-\n  The default \n  `take`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detail (children)\nname: detail\nfullName: GridProps.detail\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the detail\n  rows of the currently expanded items ([see example]({% slug hierarchy_grid\n  %})).\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailExpand (children)\nname: detailExpand\nfullName: GridProps.detailExpand\nsummary: The descriptor by which the detail row is expanded.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailRowHeight (children)\nname: detailRowHeight\nfullName: GridProps.detailRowHeight\nsummary: Defines the detail row height and forces an equal height to all detail rows.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.edit (children)\nname: edit\nfullName: GridProps.edit\nsummary: The descriptor by which the in-edit mode of an item is defined.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editDialog (children)\nname: editDialog\nfullName: GridProps.editDialog\nsummary: >-\n  Sets a custom edit dialog component that the Grid will render instead of the\n  built-in edit dialog.\nsyntax:\n  return:\n    type: '(props: GridEditDialogProps) => ReactNode'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editable (children)\nname: editable\nfullName: GridProps.editable\nsummary: The Grid editable settings.\nsyntax:\n  return:\n    type: boolean | GridEditableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterOperators (children)\nname: filterOperators\nfullName: GridProps.filterOperators\nsummary: The filter operators for the Grid filters.\nsyntax:\n  return:\n    type: GridFilterOperators\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterable (children)\nname: filterable\nfullName: GridProps.filterable\nsummary: |-\n  Enables filtering for the columns with their \n  `field`\n   option set.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.fixedScroll (children)\nname: fixedScroll\nfullName: GridProps.fixedScroll\nsummary: \"Determines if the scroll position will be updated after a data change.\\r\\nIf set to \\n`true`\\n, the scroll will remain in the same position.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.group (children)\nname: group\nfullName: GridProps.group\nsummary: \"The [descriptors]({% slug api_kendo-data-query_groupdescriptor %})[] by which the data will be grouped\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupExpand (children)\nname: groupExpand\nfullName: GridProps.groupExpand\nsummary: The descriptor by which the group is expanded.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupable (children)\nname: groupable\nfullName: GridProps.groupable\nsummary: >-\n  Determines if grouping by dragging and dropping the column headers is allowed\n  ([more information and examples]({% slug groupingbasics_grid %})).\nsyntax:\n  return:\n    type: boolean | GridGroupableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.highlight (children)\nname: highlight\nfullName: GridProps.highlight\nsummary: \"The descriptor by which the highlight state of an item is defined.\\r\\nPassing a boolean value will highlight the whole row, while passing an object will highlight individual cells by their field.\"\nsyntax:\n  return:\n    type: GridHighlightDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.id (children)\nname: id\nfullName: GridProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.language (children)\nname: language\nfullName: GridProps.language\nsummary: \"Sets the language of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.loader (children)\nname: loader\nfullName: GridProps.loader\nsummary: A custom component that the Grid will render instead of the built-in loader.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.locale (children)\nname: locale\nfullName: GridProps.locale\nsummary: \"Sets the locale of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.lockGroups (children)\nname: lockGroups\nfullName: GridProps.lockGroups\nsummary: \"Defines if the group descriptor columns are locked (frozen or sticky).\\r\\nLocked columns are the columns that are visible at all times while the user scrolls the component horizontally.\\r\\nDefaults to \\n`false`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.navigatable (children)\nname: navigatable\nfullName: GridProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the Grid.\\r\\nBy default, navigation is disabled and the Grid content is accessible in the normal tab sequence.\"\nsyntax:\n  return:\n    type: boolean | NavigatableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onClipboard (children)\nname: onClipboard\nfullName: GridProps.onClipboard\nsummary: \"Fires when clipboard support is enabled, and one of the actions (e.g., copy) is triggered.\\r\\nAccepts a \\n`GridClipboardEvent`\\n object.\"\nsyntax:\n  return:\n    type: '(event: GridClipboardEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnReorder (children)\nname: onColumnReorder\nfullName: GridProps.onColumnReorder\nsummary: Fires when the columns are reordered.\nsyntax:\n  return:\n    type: '(event: GridColumnReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnResize (children)\nname: onColumnResize\nfullName: GridProps.onColumnResize\nsummary: >-\n  Fires when a column is resized. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridColumnResizeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnsStateChange (children)\nname: onColumnsStateChange\nfullName: GridProps.onColumnsStateChange\nsummary: Fires when the columns state of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridColumnsStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenu (children)\nname: onContextMenu\nfullName: GridProps.onContextMenu\nsummary: >-\n  The event that is fired when the ContextMenu is activated. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenuItemClick (children)\nname: onContextMenuItemClick\nfullName: GridProps.onContextMenuItemClick\nsummary: >-\n  The event that is fired when the ContextMenu item is clicked. Only fired when\n  the Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuItemClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDataStateChange (children)\nname: onDataStateChange\nfullName: GridProps.onDataStateChange\nsummary: >-\n  Fires when the data state of the Grid is changed ([more information]({% slug\n  localoperations_grid %}) and [example]({% slug odataserveroperations_grid\n  %})).\nsyntax:\n  return:\n    type: '(event: GridDataStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDetailExpandChange (children)\nname: onDetailExpandChange\nfullName: GridProps.onDetailExpandChange\nsummary: Fires when the user expands or collapses a detail row.\nsyntax:\n  return:\n    type: '(event: GridDetailExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onEditChange (children)\nname: onEditChange\nfullName: GridProps.onEditChange\nsummary: Fires when the user enters or exits an in-edit mode of a row or cell.\nsyntax:\n  return:\n    type: '(event: GridEditChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onFilterChange (children)\nname: onFilterChange\nfullName: GridProps.onFilterChange\nsummary: >-\n  Fires when the Grid filter is modified through the UI. You must handle the\n  event and filter the data.\nsyntax:\n  return:\n    type: '(event: GridFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupChange (children)\nname: onGroupChange\nfullName: GridProps.onGroupChange\nsummary: \"Fires when the grouping of the Grid is changed. You have to handle the event yourself and group the data\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: '(event: GridGroupChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupExpandChange (children)\nname: onGroupExpandChange\nfullName: GridProps.onGroupExpandChange\nsummary: Fires when the user expands or collapses a group.\nsyntax:\n  return:\n    type: '(event: GridGroupExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHeaderSelectionChange (children)\nname: onHeaderSelectionChange\nfullName: GridProps.onHeaderSelectionChange\nsummary: >-\n  Fires when the user clicks the checkbox of a column header whose type is set\n  to \n\n  `checkbox`\n\n  .\nsyntax:\n  return:\n    type: '(event: GridHeaderSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHighlightChange (children)\nname: onHighlightChange\nfullName: GridProps.onHighlightChange\nsummary: >-\n  Fires when the Grid highlight is modified. You must handle the event and\n  filter the data.\nsyntax:\n  return:\n    type: '(event: GridHighlightChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onItemChange (children)\nname: onItemChange\nfullName: GridProps.onItemChange\nsummary: Fires when the user changes the values of the item.\nsyntax:\n  return:\n    type: '(event: GridItemChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onKeyDown (children)\nname: onKeyDown\nfullName: GridProps.onKeyDown\nsummary: >-\n  Fires when the user press keyboard key. Only fired when the Grid is run as a\n  client component.\nsyntax:\n  return:\n    type: '(event: GridKeyDownEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onNavigationAction (children)\nname: onNavigationAction\nfullName: GridProps.onNavigationAction\nsummary: >-\n  Fires when Grid keyboard navigation position is changed. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridNavigationActionEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPageChange (children)\nname: onPageChange\nfullName: GridProps.onPageChange\nsummary: Fires when the page of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridPageChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPdfExport (children)\nname: onPdfExport\nfullName: GridProps.onPdfExport\nsummary: Fires when the user clicks the PDF export button.\nsyntax:\n  return:\n    type: '(event: Object) => Promise'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowClick (children)\nname: onRowClick\nfullName: GridProps.onRowClick\nsummary: Fires when the user clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowDoubleClick (children)\nname: onRowDoubleClick\nfullName: GridProps.onRowDoubleClick\nsummary: Fires when the user double clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowDoubleClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowReorder (children)\nname: onRowReorder\nfullName: GridProps.onRowReorder\nsummary: Fires when the user reorders a row.\nsyntax:\n  return:\n    type: '(event: GridRowReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onScroll (children)\nname: onScroll\nfullName: GridProps.onScroll\nsummary: >-\n  Fires when Grid is scrolled. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSearchChange (children)\nname: onSearchChange\nfullName: GridProps.onSearchChange\nsummary: Fires when the search value of the GridSearchBox is changed.\nsyntax:\n  return:\n    type: '(event: GridSearchChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSelectionChange (children)\nname: onSelectionChange\nfullName: GridProps.onSelectionChange\nsummary: Fires when the user tries to select or deselect a row or cell.\nsyntax:\n  return:\n    type: '(event: GridSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSortChange (children)\nname: onSortChange\nfullName: GridProps.onSortChange\nsummary: \"Fires when the sorting of the Grid is changed. You must handle the event and sort the data.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: '(event: GridSortChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pageSize (children)\nname: pageSize\nfullName: GridProps.pageSize\nsummary: >-\n  Defines the page size used by the Grid pager. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pager (children)\nname: pager\nfullName: GridProps.pager\nsummary: \"The pager component that the Grid will render instead of the built-in pager.\\r\\n It takes values of type null and ComponentType&lt;[PagerProps]({% slug api_data-tools_pagerprops %})&gt\"\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pdf (children)\nname: pdf\nfullName: GridProps.pdf\nsummary: \"When set to true the Grid pdf export will be enabled.\\r\\nIf set to an object, the Grid will use the provided settings to export the PDF.\"\nsyntax:\n  return:\n    type: boolean | GridProps\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.reorderable (children)\nname: reorderable\nfullName: GridProps.reorderable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can reorder columns by dragging their header cells ([see\n  example]({% slug reordering_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.resizable (children)\nname: resizable\nfullName: GridProps.resizable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can resize columns by dragging the edges (resize handles) of their\n  header cells ([see example]({% slug resizing_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowHeight (children)\nname: rowHeight\nfullName: GridProps.rowHeight\nsummary: >-\n  Defines the row height and forces an equal height to all rows ([see\n  example]({% slug scrollmodes_grid %})).\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowReorderable (children)\nname: rowReorderable\nfullName: GridProps.rowReorderable\nsummary: Defines the row reorder settings.\nsyntax:\n  return:\n    type: boolean | GridRowReorderSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowSpannable (children)\nname: rowSpannable\nfullName: GridProps.rowSpannable\nsummary: Enables the built-in row span feature of the Grid.\nsyntax:\n  return:\n    type: boolean | GridRowSpannableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rows (children)\nname: rows\nfullName: GridProps.rows\nsyntax:\n  return:\n    type: GridRowsSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.scrollable (children)\nname: scrollable\nfullName: GridProps.scrollable\nsummary: \"Defines the scroll mode that is used by the Grid ([see example]({% slug scrollmodes_grid %})).\\r\\n\\r\\n The available options are:\\r\\n - \\n`none`\\n&mdash;Renders no scrollbar.\\r\\n - \\n`scrollable`\\n&mdash;This is the default scroll mode. It requires the setting of the \\n`height`\\n option.\\r\\n - \\n`virtual`\\n&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.\"\nsyntax:\n  return:\n    type: ScrollMode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.search (children)\nname: search\nfullName: GridProps.search\nsummary: >-\n  The descriptor by which the data is searched. Its first FilterDescriptor\n  populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.searchFields (children)\nname: searchFields\nfullName: GridProps.searchFields\nsummary: Defines the fields of the data that are filtered by the GridSearchBox.\nsyntax:\n  return:\n    type: Array<string | SearchField>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.select (children)\nname: select\nfullName: GridProps.select\nsummary: \"The [descriptor]({% slug api_data-tools_selectdescriptor %}) by which the selected state of an item is defined.\\r\\nPassing a boolean value will select the whole row, while passing an array of strings will select individual.\"\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.selectable (children)\nname: selectable\nfullName: GridProps.selectable\nsummary: The Grid selectable settings.\nsyntax:\n  return:\n    type: boolean | GridSelectableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.showLoader (children)\nname: showLoader\nfullName: GridProps.showLoader\nsummary: Specifies whether the loader of the Grid will be displayed.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.size (children)\nname: size\nfullName: GridProps.size\nsummary: \"Configures the \\n`size`\\n of the Grid.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\"\nsyntax:\n  return:\n    type: '\"small\" | \"medium\"'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.skip (children)\nname: skip\nfullName: GridProps.skip\nsummary: >-\n  Defines the number of records that will be skipped by the pager ([see\n  example]({% slug paging_grid %})). Required by the paging functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.sort (children)\nname: sort\nfullName: GridProps.sort\nsummary: >-\n  The ([descriptors]({% slug api_kendo-data-query_sortdescriptor %})) by which\n  the data is sorted. Applies the sorting styles and buttons to the affected\n  columns.\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.style (children)\nname: style\nfullName: GridProps.style\nsummary: |-\n  Represents the \n  `style`\n   HTML attribute.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.take (children)\nname: take\nfullName: GridProps.take\nsummary: |-\n  Alias for the \n  `pageSize`\n   property. If \n  `take`\n   is set, \n  `pageSize`\n   will be ignored.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.total (children)\nname: total\nfullName: GridProps.total\nsummary: >-\n  Defines the total number of data items in all pages. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n\n## API Reference Item\n- Name: Grid\n- Type: Function\n- Summary: Represents the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nconst App = () => {\n    return <Grid />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Grid.Grid.props (children)\nname: props\nfullName: Grid.Grid.props\nsyntax:\n  return:\n    type: GridProps | RefAttributes\n\n\n## API Reference Item\n- Name: GridProps.pageable\n- Type: Property\n- Summary: Configures the pager of the Grid. Accepts \n`GridPagerSettings`\n or a boolean value.([see example]({% slug paging_grid %}))\r\n\r\nThe available options are:\r\n- \n`buttonCount: Number`\n&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.\r\n- \n`info: Boolean`\n&mdash;Toggles the information about the current page and the total number of records.\r\n- \n`type: PagerType`\n&mdash;Accepts the \n`numeric`\n (buttons with numbers) and \n`input`\n (input for typing the page number) values.\r\n- \n`pageSizes: Boolean`\n or \n`Array<number>`\n&mdash;Shows a menu for selecting the page size.\r\n- \n`pageSizeValue: String or Number`\n&mdash;Sets the selected value of the page size Dropdownlist. It is useful when the selected value could also be a string not only a number.\r\n- \n`previousNext: Boolean`\n&mdash;Toggles the **Previous** and **Next** buttons.\r\n- \n`navigatable: Boolean`\n&mdash;Defines if the pager will be navigatable.\r\n- \n`responsive: Boolean`\n&mdash;Defines if the pager will be responsive. If true, hides the tools that do not fit to the available space.\r\n- \n`adaptive: Boolean`\n&mdash;Providing different rendering of the page sizes select element based on the screen dimensions.\r\n- \n`adaptiveTitle: String`\n&mdash;Specifies the text that is rendered as title in the adaptive page sizes select element.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nconst generateData = (count: number) => {\n    return Array.from({ length: count }, (_, idx) => ({\n        id: idx + 1,\n        name: `Name ${idx + 1}`\n    }));\n};\n\nexport default function App() {\n    const data = React.useMemo(() => generateData(100), []);\n\n    return (\n        <Grid data={data} style={{ height: '400px' }} autoProcessData={true} pageable={true}>\n            <GridColumn field=\"id\" title=\"ID\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.cells\n- Type: Property\n- Summary: Defines a set of custom cell components that the Grid will render instead of the default cells.\n- Syntax: \n\n- Return Type: name: GridCellsSettings\nfullName: GridCellsSettings\nsummary: The settings of the cells prop options.\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - data\n  - edit\n  - filterCell\n  - footerCell\n  - group\n  - groupFooter\n  - groupHeader\n  - headerCell\n  - hierarchy\n  - select\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridCustomCellProps } from '@progress/kendo-react-grid';\n\nconst CustomCell = (props: GridCustomCellProps) => {\n    return (\n        <td\n            {...props.tdProps}\n            colSpan={1}\n            style={{\n                color: props.children === 'a1' ? 'green' : 'crimson'\n            }}\n        >\n            {props.children}\n        </td>\n    );\n};\n\nexport default function App() {\n    return (\n        <Grid\n            data={[\n                { id: 'a1', name: 'cell 1' },\n                { id: 'a2', name: 'cell2' }\n            ]}\n            cells={{ data: CustomCell }}\n        >\n            <GridColumn field=\"id\" title=\"ID\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.filter\n- Type: Property\n- Summary: The [descriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}) by which\r\nthe data is filtered ([more information and examples]({% slug filtering_grid %})). This affects\r\nthe values and buttons in the \n`FilterRow`\n of the Grid.\n- Syntax: \n\n- Return Type: name: CompositeFilterDescriptor\nfullName: CompositeFilterDescriptor\nsummary: >-\n  A complex filter expression. For more information, refer to the [filterBy]({%\n  slug api_kendo-data-query_filterby %}) method.\nsyntax: {}\npackageName: '@progress/kendo-data-query'\nmembers:\n  - filters\n  - logic\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridFilterChangeEvent } from '@progress/kendo-react-grid';\nimport { CompositeFilterDescriptor } from '@progress/kendo-data-query';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    const [filter, setFilter] = React.useState<CompositeFilterDescriptor>({\n        logic: 'and',\n        filters: []\n    });\n\n    const filterChange = (event: GridFilterChangeEvent) => {\n        setFilter(event.filter);\n    };\n\n    return (\n        <Grid\n            data={sampleData}\n            autoProcessData={true}\n            dataItemKey=\"id\"\n            filterable={true}\n            filter={filter}\n            onFilterChange={filterChange}\n        >\n            <GridColumn field=\"id\" title=\"Id\" filter=\"numeric\" />\n            <GridColumn field=\"name\" title=\"Name\" filter=\"text\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.sortable\n- Type: Property\n- Summary: Enables sorting for the columns with their \n`field`\n option set.\r\n([see example]({% slug sorting_grid %}))\n- Syntax: \n\n- Return Type: name: SortSettings\nfullName: SortSettings\nsummary: The settings for sorting the component data.\nsyntax:\n  return:\n    type: 'boolean | ColumnSortSettings | { mode?: \"single\" | \"multiple\" }'\npackageName: '@progress/kendo-react-data-tools'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\" sortable={true}>\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.data\n- Type: Property\n- Summary: Sets the data of the Grid ([see example]({% slug paging_grid %})). If you use paging, the \n`data`\n option has to contain only the items for the current page. It takes values of type null, any or [DataResult]({% slug api_kendo-data-query_dataresult%})\r\nAccepts values of type \n`null`\n, \n`any[]`\n, or \n`DataResult`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nexport default function App() {\n    return (\n        <Grid\n            data={[\n                { id: 1, name: 'John Doe', age: 30 },\n                { id: 2, name: 'Jane Smith', age: 25 },\n                { id: 3, name: 'Sam Johnson', age: 40 }\n            ]}\n        >\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"age\" title=\"Age\" />\n        </Grid>\n    );\n}\n\n```\n\n\nThis section looks at some of the premium Data Grid features. To be able to complete this part of the tutorial, you need a commercial license or an active trial license.\n\nFeatures like sorting, filtering, and paging require you to configure data operations. As the Grid in this tutorial is bound to local (client-side) data, enable <a href=\"/kendo-react-ui/components/grid/data-operations/local-operations\">local data operations</a> by following these steps:\n\n\nEnable each data operation separately in the Grid declaration (pageable={true} and sortable={true}).\n\nThe KendoReact Data Grid lets you build business applications that manage and display large sets of data efficiently. With it, you can structure and present your data in rows and columns, paired with a user-friendly interface for editing and analysis.\nThe built-in paging, sorting, and filtering enable you to meet your business requirements for data navigation and analysis. For more advanced data analysis, the React Grid component offers grouping and aggregation to categorize and summarize data.\nThe grid‚Äôs editing capabilities support in-cell and inline editing, allowing your end users to modify data directly within the data table. The options to export to PDF or Excel help with reporting and data sharing.\n\nServer Templates\n\nLearn the art of customization by providing unique views to the Grid. Explore the creation of custom cells and rows templates to your application's specific needs.\n<a href=\"/kendo-react-ui-develop/components/grid/rsc-mode/templates\">Read more about React Data Grid RSC Mode templates...</a>\n\nSelection\n\nLearn how to implement row and cell selection in the Grid, allowing users to interact with data efficiently through multiple selection modes.\n<a href=\"/kendo-react-ui-develop/components/grid/rsc-mode/selection\">Read more about React Data Grid RSC Mode selection...</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "DropDownList": "## API Reference Item\n- Name: DropDownListProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact DropDownList component]({% slug overview_dropdownlist %}).\n- Syntax: \n\n## Additional Context\n### DropDownListProps.accessKey (children)\nname: accessKey\nfullName: DropDownListProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptive (children)\nname: adaptive\nfullName: DropDownListProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: DropDownListProps.adaptiveSubtitle\nsummary: \"Specifies the text that is rendered as subtitle in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: DropDownListProps.adaptiveTitle\nsummary: \"Specifies the text that is rendered as title in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\\r\\nIf not provided, the title will be the same as the label.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: DropDownListProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaLabel (children)\nname: ariaLabel\nfullName: DropDownListProps.ariaLabel\nsummary: |-\n  The accessible label of the component. By default is set to value of \n  `label`\n   prop.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: DropDownListProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.className (children)\nname: className\nfullName: DropDownListProps.className\nsummary: Sets additional classes to the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.data (children)\nname: data\nfullName: DropDownListProps.data\nsummary: >-\n  Sets the data of the DropDownList ([see example]({% slug binding_dropdownlist\n  %})).\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.dataItemKey (children)\nname: dataItemKey\nfullName: DropDownListProps.dataItemKey\nsummary: |-\n  Sets the key for comparing the data items of the DropDownList. If \n  `dataItemKey`\n   is not set, the DropDownList compares the items by reference ([see example]({% slug binding_dropdownlist %}#toc-datasets-of-objects)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.defaultItem (children)\nname: defaultItem\nfullName: DropDownListProps.defaultItem\nsummary: >-\n  Sets the text of the default empty item. The type of the defined value has to\n  match the data type.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.defaultValue (children)\nname: defaultValue\nfullName: DropDownListProps.defaultValue\nsummary: >-\n  Sets the default value of the DropDownList ([see example]({% slug\n  defaultitem_dropdownlist %})). Similar to the native \n\n  `select`\n   HTML element.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.delay (children)\nname: delay\nfullName: DropDownListProps.delay\nsummary: >-\n  Sets the delay before an item search is performed. When filtration is\n  disabled, use this option.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.dir (children)\nname: dir\nfullName: DropDownListProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.disabled (children)\nname: disabled\nfullName: DropDownListProps.disabled\nsummary: Sets the disabled state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.fillMode (children)\nname: fillMode\nfullName: DropDownListProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- flat\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.filter (children)\nname: filter\nfullName: DropDownListProps.filter\nsummary: >-\n  Sets the value of filtering input. Useful for making the filtering input a\n  [controlled\n  component](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.filterable (children)\nname: filterable\nfullName: DropDownListProps.filterable\nsummary: >-\n  Enables the filtering functionality of the DropDownList ([more information and\n  examples]({% slug filtering_dropdownlist %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.focusedItemIndex (children)\nname: focusedItemIndex\nfullName: DropDownListProps.focusedItemIndex\nsummary: \"If set, the DropDownList will use it to get the focused item index.\\r\\n\\r\\nDefault functionality returns the first item which starts with the input text.\"\nsyntax:\n  return:\n    type: '(data: any, inputText: string, textField?: string) => number'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.footer (children)\nname: footer\nfullName: DropDownListProps.footer\nsummary: >-\n  Sets the footer component of the DropDownList ([see example]({% slug\n  customrendering_dropdownlist %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupField (children)\nname: groupField\nfullName: DropDownListProps.groupField\nsummary: >-\n  Sets the data item field that represents the start of a group. Applicable to\n  objects data.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupHeaderItemRender (children)\nname: groupHeaderItemRender\nfullName: DropDownListProps.groupHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's group header item is about to be rendered. Used to\n  override the default appearance of the group's headers.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListGroupItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupStickyHeaderItemRender (children)\nname: groupStickyHeaderItemRender\nfullName: DropDownListProps.groupStickyHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's sticky group header item is about to be rendered.\n  Used to override the default appearance of the sticky group header of the\n  component.\nsyntax:\n  return:\n    type: >-\n      (div: ReactElement<HTMLDivElement, string | JSXElementConstructor<any>>,\n      stickyHeaderProps: GroupStickyHeaderProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.header (children)\nname: header\nfullName: DropDownListProps.header\nsummary: >-\n  Sets the header component of the DropDownList ([see example]({% slug\n  customrendering_dropdownlist %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.iconClassName (children)\nname: iconClassName\nfullName: DropDownListProps.iconClassName\nsummary: |-\n  Sets CSS classes to the expand \n  `icon`\n   DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.id (children)\nname: id\nfullName: DropDownListProps.id\nsummary: Specifies the id of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ignoreCase (children)\nname: ignoreCase\nfullName: DropDownListProps.ignoreCase\nsummary: >-\n  Enables a case-insensitive search. When filtering is disabled, use this\n  option.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.itemRender (children)\nname: itemRender\nfullName: DropDownListProps.itemRender\nsummary: >-\n  Fires when a DropDownList item is about to be rendered ([see example]({% slug\n  customrendering_dropdownlist %}#toc-items)). Used to override the default\n  appearance of the list items.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.label (children)\nname: label\nfullName: DropDownListProps.label\nsummary: Renders a floating label for the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.leftRightKeysNavigation (children)\nname: leftRightKeysNavigation\nfullName: DropDownListProps.leftRightKeysNavigation\nsummary: \"If set to \\n`false`\\n, the DropDownList will not navigate over its data through left and right keys.\\r\\nUseful when the DropDownList is placed inside a toolbar which needs to handle left and right keys.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.listNoDataRender (children)\nname: listNoDataRender\nfullName: DropDownListProps.listNoDataRender\nsummary: >-\n  Fires when the element which indicates no data in the popup is about to be\n  rendered ([see example]({% slug customrendering_dropdownlist %}#toc-no-data)).\n  Used to override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLDivElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.loading (children)\nname: loading\nfullName: DropDownListProps.loading\nsummary: Sets the loading state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.name (children)\nname: name\nfullName: DropDownListProps.name\nsummary: |-\n  Specifies the \n  `name`\n   property of the \n  `select`\n   DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onBlur (children)\nname: onBlur\nfullName: DropDownListProps.onBlur\nsummary: Fires each time the DropDownList gets blurred.\nsyntax:\n  return:\n    type: '(event: DropDownListBlurEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onChange (children)\nname: onChange\nfullName: DropDownListProps.onChange\nsummary: >-\n  Fires each time the value of the DropDownList is about to change ([see\n  examples]({% slug binding_dropdownlist %})).\nsyntax:\n  return:\n    type: '(event: DropDownListChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onClose (children)\nname: onClose\nfullName: DropDownListProps.onClose\nsummary: Fires each time the popup of the DropDownList is about to close.\nsyntax:\n  return:\n    type: '(event: DropDownListCloseEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onFilterChange (children)\nname: onFilterChange\nfullName: DropDownListProps.onFilterChange\nsummary: >-\n  Fires each time the user types in the filter input. You can filter the source\n  based on the passed filtration value.\nsyntax:\n  return:\n    type: '(event: DropDownListFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onFocus (children)\nname: onFocus\nfullName: DropDownListProps.onFocus\nsummary: Fires each time the user focuses the DropDownList.\nsyntax:\n  return:\n    type: '(event: DropDownListFocusEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onOpen (children)\nname: onOpen\nfullName: DropDownListProps.onOpen\nsummary: Fires each time the popup of the DropDownList is about to open.\nsyntax:\n  return:\n    type: '(event: DropDownListOpenEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onPageChange (children)\nname: onPageChange\nfullName: DropDownListProps.onPageChange\nsummary: >-\n  Fires when both the virtual scrolling of the DropDownList is enabled and the\n  component requires data for another page ([see example]({% slug\n  virtualization_dropdownlist %})).\nsyntax:\n  return:\n    type: '(event: DropDownListPageChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.opened (children)\nname: opened\nfullName: DropDownListProps.opened\nsummary: Sets the opened and closed state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.popupSettings (children)\nname: popupSettings\nfullName: DropDownListProps.popupSettings\nsummary: Configures the popup of the DropDownList.\nsyntax:\n  return:\n    type: DropDownsPopupSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.required (children)\nname: required\nfullName: DropDownListProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.rounded (children)\nname: rounded\nfullName: DropDownListProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.size (children)\nname: size\nfullName: DropDownListProps.size\nsummary: \"Configures the \\n`size`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.skipDisabledItems (children)\nname: skipDisabledItems\nfullName: DropDownListProps.skipDisabledItems\nsummary: >-\n  Defines if DropDownList's disabled items will be skipped or focused when\n  navigating through the list of items using a keyboard. Defaults to \n\n  `true`\n\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.style (children)\nname: style\nfullName: DropDownListProps.style\nsummary: The styles that are applied to the DropDownList.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.svgIcon (children)\nname: svgIcon\nfullName: DropDownListProps.svgIcon\nsummary: Sets the specified SVG icon.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.tabIndex (children)\nname: tabIndex\nfullName: DropDownListProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the DropDownList.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.textField (children)\nname: textField\nfullName: DropDownListProps.textField\nsummary: >-\n  Sets the data item field that represents the item text ([see example]({% slug\n  defaultitem_dropdownlist %})). If the data contains only primitive values, do\n  not define it.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.title (children)\nname: title\nfullName: DropDownListProps.title\nsummary: Sets the title attribute to the DropDownList DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valid (children)\nname: valid\nfullName: DropDownListProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.validationMessage (children)\nname: validationMessage\nfullName: DropDownListProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.validityStyles (children)\nname: validityStyles\nfullName: DropDownListProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.value (children)\nname: value\nfullName: DropDownListProps.value\nsummary: >-\n  Sets the value of the DropDownList ([see example]({% slug binding_dropdownlist\n  %})). It can either be of the primitive (string, numbers) or of the complex\n  (objects) type.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valueMap (children)\nname: valueMap\nfullName: DropDownListProps.valueMap\nsummary: >-\n  Represents a callback function, which returns the value for submitting. The\n  returned value will be rendered in an \n\n  `option`\n   of a hidden [\n  `select`\n\n  ](https://react.dev/reference/react-dom/components/select) element.\nsyntax:\n  return:\n    type: '(value: any) => any'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valueRender (children)\nname: valueRender\nfullName: DropDownListProps.valueRender\nsummary: >-\n  Fires when the element which renders the value is about to be rendered ([see\n  example]({% slug customrendering_dropdownlist %}#toc-values)). Used to\n  override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLSpanElement, string |\n      JSXElementConstructor<any>>, value: any) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.virtual (children)\nname: virtual\nfullName: DropDownListProps.virtual\nsummary: >-\n  Configures the virtual scrolling of the DropDownList ([see example]({% slug\n  virtualization_dropdownlist %})).\nsyntax:\n  return:\n    type: VirtualizationSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n\nThe following example demonstrates the AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, and MultiSelect components in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nWhat are the KendoReact Dropdowns?\n\nThe Dropdowns are native KendoReact components built specifically for the React ecosystem and distributed via npm.\n\n<a href=\"https://www.npmjs.com/package/@progress/kendo-react-dropdowns\" rel=\"noopener\" target=\"_blank\">@progress/kendo-react-dropdowns</a>\n\nPackage Contents\n\nof this  DropDownList  in production‚Äîno sign-up or license required. It is part of KendoReact, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components. To test-drive premium functionality such as virtualization, <a href=\"https://www.telerik.com/try/kendo-react-ui\" rel=\"noopener\" target=\"_blank\">start a 30-day trial</a>.\nThe following example demonstrates the DropDownList in action.\n\nAppearance\n\nThe DropDownList provides a predefined set of appearance options.\nApart from the default vision of the DropDownList, these alternative styling options enable you to configure each individual aspect of the appearance of a DropDownList.\n\nSize\n\nYou can set the size of the DropDownList through the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/dropdownlistprops#size\">size</a> property. The DropDownList component comes in three different sizes: small, medium (default), and large.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFill Mode\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Chip": "## API Reference Item\n- Name: ChipProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Chip.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Chip } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return <Chip style={{ backgroundColor: 'lightblue', color: 'white' }}>Styled Chip</Chip>;\n}\n\n```\n\n\n## API Reference Item\n- Name: Chip\n- Type: Function\n- Summary: Represents the Chip component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Chip } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Chip text=\"Chip\" />\n    );\n}\n\n```\n\n\n## Additional Context\n### Chip.Chip.props (children)\nname: props\nfullName: Chip.Chip.props\nsyntax:\n  return:\n    type: ChipProps | RefAttributes\n\n\n## API Reference Item\n- Name: ChipProps.size\n- Type: Property\n- Summary: Configures the \n`size`\n of the Chip.\r\nThe available options are:\r\n- \n`small`\n\r\n- \n`medium`\n\r\n- \n`large`\n\r\n- \n`null`\n (removes built-in size styles)\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Chip } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <>\n            <Chip size=\"small\" text=\"Small Chip\" />\n            <Chip size=\"medium\" text=\"Medium Chip\" />\n            <Chip size=\"large\" text=\"Large Chip\" />\n        </>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: ChipProps\n- Type: Interface\n- Summary: Represents the properties of [Chip]({% slug api_buttons_chip %}) component.\n- Syntax: \n\n## Additional Context\n### ChipProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: ChipProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which describe the component, similar to an [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example, these elements could contain an error or a hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.ariaLabel (children)\nname: ariaLabel\nfullName: ChipProps.ariaLabel\nsummary: Represents the label of the Chip component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.avatar (children)\nname: avatar\nfullName: ChipProps.avatar\nsummary: Determines if the Chip has an avatar.\nsyntax:\n  return:\n    type: ChipAvatarProps\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.children (children)\nname: children\nfullName: ChipProps.children\nsummary: The React elements that will be rendered as custom content inside the Chip.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.className (children)\nname: className\nfullName: ChipProps.className\nsummary: Sets additional classes to the Chip.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.dataItem (children)\nname: dataItem\nfullName: ChipProps.dataItem\nsummary: |-\n  Represents the item data, coming from the \n  `ChipList`\n   component.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.dir (children)\nname: dir\nfullName: ChipProps.dir\nsummary: The Chip direction 'ltr' as default or 'rtl'.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.disabled (children)\nname: disabled\nfullName: ChipProps.disabled\nsummary: Determines if the Chip is disabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.fillMode (children)\nname: fillMode\nfullName: ChipProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Chip.\\r\\nThe available options are:\\r\\n- \\n`solid`\\n\\r\\n- \\n`outline`\\n\\r\\n- \\n`null`\\n (removes built-in fill mode styles)\"\nsyntax:\n  return:\n    type: null | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.icon (children)\nname: icon\nfullName: ChipProps.icon\nsummary: |-\n  Determines if the Chip has a font \n  `icon`\n  .\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.id (children)\nname: id\nfullName: ChipProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the Chip.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onBlur (children)\nname: onBlur\nfullName: ChipProps.onBlur\nsummary: |-\n  Fires on \n  `onBlur`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipFocusEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onClick (children)\nname: onClick\nfullName: ChipProps.onClick\nsummary: |-\n  Fires on \n  `onClick`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onDoubleClick (children)\nname: onDoubleClick\nfullName: ChipProps.onDoubleClick\nsummary: |-\n  Fires on \n  `onDoubleClick`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onFocus (children)\nname: onFocus\nfullName: ChipProps.onFocus\nsummary: |-\n  Fires on \n  `onFocus`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipFocusEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onKeyDown (children)\nname: onKeyDown\nfullName: ChipProps.onKeyDown\nsummary: |-\n  Fires on \n  `onKeyDown`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipKeyboardEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseDown (children)\nname: onMouseDown\nfullName: ChipProps.onMouseDown\nsummary: |-\n  Fires on \n  `onMouseDown`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseEnter (children)\nname: onMouseEnter\nfullName: ChipProps.onMouseEnter\nsummary: |-\n  Fires on \n  `onMouseEnter`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseLeave (children)\nname: onMouseLeave\nfullName: ChipProps.onMouseLeave\nsummary: |-\n  Fires on \n  `onMouseLeave`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseMove (children)\nname: onMouseMove\nfullName: ChipProps.onMouseMove\nsummary: |-\n  Fires on \n  `onMouseMove`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseOut (children)\nname: onMouseOut\nfullName: ChipProps.onMouseOut\nsummary: |-\n  Fires on \n  `onMouseOut`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseOver (children)\nname: onMouseOver\nfullName: ChipProps.onMouseOver\nsummary: |-\n  Fires on \n  `onMouseOver`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseUp (children)\nname: onMouseUp\nfullName: ChipProps.onMouseUp\nsummary: |-\n  Fires on \n  `onMouseUp`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onRemove (children)\nname: onRemove\nfullName: ChipProps.onRemove\nsummary: Fires on Chip removing.\nsyntax:\n  return:\n    type: '(event: ChipRemoveEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.removable (children)\nname: removable\nfullName: ChipProps.removable\nsummary: Determines if the Chip could be removed.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.removeIcon (children)\nname: removeIcon\nfullName: ChipProps.removeIcon\nsummary: |-\n  Determines if the Chip has custom font \n  `removeIcon`\n  .\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.removeSvgIcon (children)\nname: removeSvgIcon\nfullName: ChipProps.removeSvgIcon\nsummary: |-\n  Determines if the Chip has custom SVG \n  `removeIcon`\n  .\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.rounded (children)\nname: rounded\nfullName: ChipProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the Chip.\\r\\nThe available options are:\\r\\n- \\n`small`\\n\\r\\n- \\n`medium`\\n\\r\\n- \\n`large`\\n\\r\\n- \\n`full`\\n\\r\\n- \\n`null`\\n (removes built-in roundness styles)\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.selected (children)\nname: selected\nfullName: ChipProps.selected\nsummary: Determines if the Chip is selected.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.selectedIcon (children)\nname: selectedIcon\nfullName: ChipProps.selectedIcon\nsummary: |-\n  Determines if the Chip has custom selection font \n  `icon`\n  .\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.selectedSvgIcon (children)\nname: selectedSvgIcon\nfullName: ChipProps.selectedSvgIcon\nsummary: |-\n  Determines if the Chip has custom selection SVG \n  `icon`\n  .\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.svgIcon (children)\nname: svgIcon\nfullName: ChipProps.svgIcon\nsummary: |-\n  Determines if the Chip has an SVG \n  `icon`\n  .\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.tabIndex (children)\nname: tabIndex\nfullName: ChipProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   attribute.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.text (children)\nname: text\nfullName: ChipProps.text\nsummary: Sets the label text of the Chip.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.themeColor (children)\nname: themeColor\nfullName: ChipProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Chip.\\r\\nThe available options are:\\r\\n- \\n`base`\\n\\r\\n- \\n`info`\\n\\r\\n- \\n`success`\\n\\r\\n- \\n`warning`\\n\\r\\n- \\n`error`\\n\\r\\n- \\n`null`\\n (removes built-in theme color styles)\"\nsyntax:\n  return:\n    type: null | \"base\" | \"info\" | \"success\" | \"warning\" | \"error\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.value (children)\nname: value\nfullName: ChipProps.value\nsummary: |-\n  Sets the \n  `id`\n   value of the Chip.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-buttons'\n\n\nChip Size\n\nThe Chip provides the <a href=\"/kendo-react-ui-develop/components/buttons/api/chipprops#size\">size</a> property that enables you to control how big or small the rendered Chip will be.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nChip Fill Mode\n\nThe Chip allows you to set different fill modes by using the <a href=\"/kendo-react-ui-develop/components/buttons/api/chipprops#fill-mode\">fillMode</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nChip Border Radius\n\n<a href=\"/kendo-react-ui-develop/components/buttons/chip/remove\">Remove</a>‚ÄîThe removable property allows you to make the Chip removable.\n<a href=\"/kendo-react-ui-develop/components/buttons/chip/customization\">Customization</a>‚ÄîYou can use the built-in customization options to add icons, avatars, and custom classes.\n<a href=\"/kendo-react-ui-develop/components/buttons/chip/appearance\">Appearance</a>‚ÄîYou can quickly style the Chip by choosing from the predefined styling options.\n\nOut of the box, the Kendo React Chip provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Toolbar": "## API Reference Item\n- Name: ToolbarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Additional Context\n### ToolbarProps.ariaLabel (children)\nname: ariaLabel\nfullName: ToolbarProps.ariaLabel\nsummary: |-\n  Represents the \n  `aria-label`\n   HTML attribute of the Toolbar component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.buttonScrollSpeed (children)\nname: buttonScrollSpeed\nfullName: ToolbarProps.buttonScrollSpeed\nsummary: \"Sets the Toolbar scroll speed in pixels when scrolling via clicking the previous or next button.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.children (children)\nname: children\nfullName: ToolbarProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.dir (children)\nname: dir\nfullName: ToolbarProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.fillMode (children)\nname: fillMode\nfullName: ToolbarProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n‚Äî \\n`solid`\\n ‚Äî Applies a \\n`background`\\n color and \\n`solid borders`\\n.\\r\\n‚Äî \\n`flat`\\n ‚Äî Sets a \\n`transparent background`\\n and \\n`solid bottom border`\\n.\\r\\n‚Äî \\n`outline`\\n ‚Äî Sets a \\n`transparent background`\\n and \\n`solid borders`\\n.\\r\\n‚Äî \\n`null`\\n ‚Äî This option removes the built-in fill mode styles of the Toolbar. Allows for custom \\n`background`\\n and \\n`border`\\n styles.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.id (children)\nname: id\nfullName: ToolbarProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.keyboardNavigation (children)\nname: keyboardNavigation\nfullName: ToolbarProps.keyboardNavigation\nsummary: |-\n  If set to \n  `false`\n  , it will turn off the built-in keyboard navigation.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.nextButton (children)\nname: nextButton\nfullName: ToolbarProps.nextButton\nsummary: \"Defines the custom component that will be rendered as a next button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.onResize (children)\nname: onResize\nfullName: ToolbarProps.onResize\nsummary: |-\n  The \n  `resize`\n   event of the Toolbar.\nsyntax:\n  return:\n    type: '(event: ToolbarResizeEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.prevButton (children)\nname: prevButton\nfullName: ToolbarProps.prevButton\nsummary: \"Defines the custom component that will be rendered as a previous button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtons (children)\nname: scrollButtons\nfullName: ToolbarProps.scrollButtons\nsummary: \"Determines the Toolbar scroll buttons visibility.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"auto\" | \"hidden\" | \"visible\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtonsPosition (children)\nname: scrollButtonsPosition\nfullName: ToolbarProps.scrollButtonsPosition\nsummary: \"Determines the Toolbar scroll buttons position.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\" | \"split\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.size (children)\nname: size\nfullName: ToolbarProps.size\nsummary: \"Configures the \\n`size`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n‚Äî \\n`small`\\n ‚Äî Sets the padding of the component to 4px 4px.\\r\\n‚Äî \\n`medium`\\n ‚Äî Sets the padding of the component to 8px 8px.\\r\\n‚Äî \\n`large`\\n ‚Äî Sets the padding of the component to 10px 10px.\\r\\n‚Äî \\n`null`\\n ‚Äî This option removes the the built-in size styles of the Toolbar. Allows for custom \\n`padding`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.style (children)\nname: style\nfullName: ToolbarProps.style\nsummary: The styles that are applied to the Toolbar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.tabIndex (children)\nname: tabIndex\nfullName: ToolbarProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the Toolbar.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n\n## API Reference Item\n- Name: ToolbarProps.overflow\n- Type: Property\n- Summary: Represents the possible overflow mode options of the Toolbar.\r\nApplicable when there is not enough space to render all tools.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button, ButtonGroup, Toolbar } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Toolbar overflow=\"scroll\" style={{ width: '300px' }}>\n            <ButtonGroup>\n                <Button>Tool 1</Button>\n                <Button>Tool 2</Button>\n                <Button>Tool 3</Button>\n                <Button>Tool 4</Button>\n                <Button>Tool 5</Button>\n                <Button>Tool 6</Button>\n                <Button>Tool 7</Button>\n                <Button>Tool 8</Button>\n            </ButtonGroup>\n        </Toolbar>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Toolbar\n- Type: Function\n- Summary: Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Toolbar>\n            <span>Toolbar content</span>\n        </Toolbar>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Toolbar.Toolbar.props (children)\nname: props\nfullName: Toolbar.Toolbar.props\nsyntax:\n  return:\n    type: ToolbarProps | RefAttributes\n\n\n## API Reference Item\n- Name: ToolbarProps.className\n- Type: Property\n- Summary: Sets additional classes to the Toolbar.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar, Button, ButtonGroup } from '@progress/kendo-react-buttons';\nimport { boldIcon, italicIcon, underlineIcon } from '@progress/kendo-svg-icons';\n\nconst App = () => {\n    return (\n        <Toolbar className=\"my-custom-toolbar\">\n            <ButtonGroup>\n                <Button className=\"k-toolbar-button\" svgIcon={boldIcon} title=\"Bold\" togglable={true} />\n                <Button className=\"k-toolbar-button\" svgIcon={italicIcon} title=\"Italic\" togglable={true} />\n                <Button className=\"k-toolbar-button\" svgIcon={underlineIcon} title=\"Underline\" togglable={true} />\n            </ButtonGroup>\n        </Toolbar>\n    );\n};\nexport default App;\n\n```\n\n\nOut of the box, the Kendo React ToolBar provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/tools\">Tools</a>‚ÄîYou can include various button types in the Toolbar and create a handy selection of tools.\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/adaptive-rendering\">Adaptive Rendering</a>‚ÄîThe ToolBar provides options to hide the tools that do not fit its width in an overflow section or rendering scroll arrows. The Toolbar is part of the <a href=\"/kendo-react-ui-develop/components/buttons\">KendoReact Buttons</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Toolbar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/buttons/get-started\">Getting Started with the KendoReact Buttons</a> guide.\n\nKey Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Badge": "## API Reference Item\n- Name: Badge\n- Type: Function\n- Summary: Represents the [KendoReact Badge component]({% slug overview_badge %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge themeColor=\"info\" />\n        </Button>\n    );\n}\n\n```\n\n\n## Additional Context\n### Badge.Badge.props (children)\nname: props\nfullName: Badge.Badge.props\nsyntax:\n  return:\n    type: BadgeProps | RefAttributes\n\n\n## API Reference Item\n- Name: BadgeProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Badge component]({% slug overview_badge %}).\n- Syntax: \n\n## Additional Context\n### BadgeProps.align (children)\nname: align\nfullName: BadgeProps.align\nsummary: \"Specifies the alignment of the Badge.\\r\\n\\r\\nThe possible keys are:\\r\\n* \\n`horizontal`\\n&mdash; Defines the possible horizontal alignment of the Badge.\\r\\n  * \\n`'start'`\\n&mdash;Uses the start point of the parent element.\\r\\n  * \\n`'end'`\\n(Default)&mdash;Uses the end point of the parent element.\\r\\n  *  \\n`null`\\n No horizontal alignment.\\r\\n* \\n`vertical`\\n&mdash; Defines the possible vertical alignment of the Badge.\\r\\n  * \\n`'top'`\\n(Default)&mdash;Uses the top point of the parent element.\\r\\n  * \\n`'bottom'`\\n&mdash;Uses the bottom point of the parent element.\\r\\n  *  \\n`null`\\n No horizontal alignment.\"\nsyntax:\n  return:\n    type: '{ horizontal: null | \"start\" | \"end\", vertical: null | \"top\" | \"bottom\" }'\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.children (children)\nname: children\nfullName: BadgeProps.children\nsummary: The React elements that will be rendered inside the Badge.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.className (children)\nname: className\nfullName: BadgeProps.className\nsummary: Specifies a list of CSS classes that will be added to the Badge.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.cutoutBorder (children)\nname: cutoutBorder\nfullName: BadgeProps.cutoutBorder\nsummary: \"Specifies wether or not to render additional \\\"cutout\\\" border around the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`true`\\n\\r\\n* \\n`false`\\n (Default)\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.dir (children)\nname: dir\nfullName: BadgeProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute. This is used to switch from LTR to RTL.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.fillMode (children)\nname: fillMode\nfullName: BadgeProps.fillMode\nsummary: \"Specifies the appearance fill style of the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`solid`\\n (Default)\\r\\n* \\n`outline`\\n\\r\\n* null&mdash;Does not set a fillMode \\n`className`\"\nsyntax:\n  return:\n    type: null | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.position (children)\nname: position\nfullName: BadgeProps.position\nsummary: \"Specifies the position of the Badge relative to the edge of the container element.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`'edge'`\\n (Default)&mdash;The center of the Badge is positioned on the edge of the container element.\\r\\n* \\n`'outside'`\\n&mdash;The Badge is entirely positioned outside the edge of the container element.\\r\\n* \\n`'inside'`\\n&mdash;The Badge is entirely positioned inside the edge of the the container element.\\r\\n* \\n`null`\\n &mdash; No position class is applied.\"\nsyntax:\n  return:\n    type: null | \"edge\" | \"outside\" | \"inside\"\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.rounded (children)\nname: rounded\nfullName: BadgeProps.rounded\nsummary: \"Specifies the roundness of the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n- small\\r\\n- medium (Default)\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.themeColor (children)\nname: themeColor\nfullName: BadgeProps.themeColor\nsummary: \"Specifies the theme color of the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`base`\\n &mdash;Applies coloring based on the \\n`base`\\n theme color.\\r\\n* \\n`primary`\\n (Default)&mdash;Applies coloring based on primary theme color.\\r\\n* \\n`secondary`\\n&mdash;Applies coloring based on secondary theme color.\\r\\n* \\n`tertiary`\\n&mdash; Applies coloring based on tertiary theme color.\\r\\n* \\n`inherit`\\n&mdash; Applies inherited coloring value.\\r\\n* \\n`info`\\n&mdash;Applies coloring based on info theme color.\\r\\n* \\n`success`\\n&mdash; Applies coloring based on success theme color.\\r\\n* \\n`warning`\\n&mdash; Applies coloring based on warning theme color.\\r\\n* \\n`error`\\n&mdash; Applies coloring based on error theme color.\\r\\n* \\n`dark`\\n&mdash; Applies coloring based on dark theme color.\\r\\n* \\n`light`\\n&mdash; Applies coloring based on light theme color.\\r\\n* \\n`inverse`\\n&mdash; Applies coloring based on inverse theme color.\\r\\n* null&mdash;Does not set a themeColor \\n`className`\\n.\"\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\" | \"inherit\"\npackageName: '@progress/kendo-react-indicators'\n\n\n## API Reference Item\n- Name: BadgeProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Badge.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge style={{ backgroundColor: 'rebeccapurple', color: 'white' }}>Styled Badge</Badge>\n        </Button>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: BadgeProps.size\n- Type: Property\n- Summary: Specifies the size of the Badge.\r\n\r\nThe possible values are:\r\n* \n`small`\n\r\n* \n`medium`\n (Default)\r\n* \n`large`\n\r\n* null&mdash;Does not set a size \n`className`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge size=\"large\" themeColor=\"info\" />\n        </Button>\n    );\n}\n\n```\n\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSize\n\nThe Badge allows you to set different sizes.\nThe available <a href=\"/kendo-react-ui-develop/components/indicators/api/badgeprops#size\">size</a> values are:\n\nsmall\nmedium (Default)\nlarge\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFillMode Appearance\n\nThe Badge component provides many predefined appearance options such as different shapes, sizes, theme colors and optional cutout borders.\n\nTheme Color\n\nThe Badge allows you to specify predefined theme colors.\nThe available <a href=\"/kendo-react-ui-develop/components/indicators/api/badgeprops#themecolor\">themeColor</a> values are:\n\n<a href=\"/kendo-react-ui-develop/components/indicators/badge/badge-container\">Badge Container</a>‚ÄîYou can use the KendoReact Badge Container to position and wrap the Badge component.\n<a href=\"/kendo-react-ui-develop/components/indicators/badge/positioning\">Positioning</a>‚ÄîYou can position the KendoReact Badge in relation to its parent container.\n<a href=\"/kendo-react-ui-develop/components/indicators/badge/appearance\">Appearance</a>‚ÄîYou can quickly style the Badge by choosing from the predefined styling options.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Form": "## API Reference Item\n- Name: FormClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Form component]({% slug overview_form %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FieldRenderProps,\n    FormRenderProps,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### FormClassComponent._fields (children)\nname: _fields\nfullName: FormClassComponent._fields\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._key (children)\nname: _key\nfullName: FormClassComponent._key\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._modified (children)\nname: _modified\nfullName: FormClassComponent._modified\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._submitted (children)\nname: _submitted\nfullName: FormClassComponent._submitted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._touched (children)\nname: _touched\nfullName: FormClassComponent._touched\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._unmounted (children)\nname: _unmounted\nfullName: FormClassComponent._unmounted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._validatorsByField (children)\nname: _validatorsByField\nfullName: FormClassComponent._validatorsByField\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._values (children)\nname: _values\nfullName: FormClassComponent._values\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._visited (children)\nname: _visited\nfullName: FormClassComponent._visited\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.licenseMessage (children)\nname: licenseMessage\nfullName: FormClassComponent.licenseMessage\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onChange (children)\nname: onChange\nfullName: FormClassComponent.onChange\nsummary: \"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"\nsyntax:\n  return:\n    type: '(name: string, options: Object) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onReset (children)\nname: onReset\nfullName: FormClassComponent.onReset\nsummary: \"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.showLicenseWatermark (children)\nname: showLicenseWatermark\nfullName: FormClassComponent.showLicenseWatermark\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps (children)\nname: FormProps\nfullName: FormProps\nsummary: Contains the props for the KendoReact Form component.\nsyntax: {}\npackageName: '@progress/kendo-react-form'\nmembers:\n  - ignoreModified\n  - initialValues\n  - onSubmit\n  - onSubmitClick\n  - render\n  - validator\n\n\nThe <a href=\"/kendo-react-ui-develop/components/form/api/field\">Field</a> component and its <a href=\"/kendo-react-ui-develop/components/form/api/fieldrenderprops\">FieldRenderProps</a> enable you to control when and how validation messages are shown.\n\nError Messages We use form validation to make sure that users provide correct information in terms of format, content length, etc. For example, is the phone number an actual number, did the user put info in all of the required fields, and so on.\n\nHow it Works?\n\nKendoReact supports handling user input in the UI, and displays useful validation messages using the Form, Field, and Error components. Refer to the <a href=\"/kendo-react-ui-develop/components/form/validation\">article on form validation</a> for further details and runnable demos.\n\nField-level Form Validation For instant validation, error messages are the best way to alert users that they have made a mistake while filling out a form. Applying only error-specific styles does not convey enough information about what the user should do to provide valid data. Error messages should specify exactly why the user input is not accepted. Error messages for different fields should appear one by one. KendoReact provides an <a href=\"/kendo-react-ui-develop/components/labels/api/error\">Error</a> component for that use. To associate it with the editor for screen readers, set the id property of the component to the ariaDescribedBy property of the editor.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "ExpansionPanel": "## API Reference Item\n- Name: ExpansionPanelProps.expandIcon\n- Type: Property\n- Summary: Sets a custom icon via css class(es), for the expanded state of the ExpansionPanel.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ExpansionPanel, ExpansionPanelContent, ExpansionPanelActionEvent } from '@progress/kendo-react-layout';\nimport { Reveal } from '@progress/kendo-react-animation';\n\nconst imgPath = 'https://demos.telerik.com/kendo-react-ui/assets/layout/countries/brazil.jpg';\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    return (\n        <>\n            <link rel=\"stylesheet\" href=\"https://unpkg.com/@progress/kendo-font-icons/dist/index.css\" />\n            <ExpansionPanel\n                expandIcon=\"k-icon k-font-icon k-i-star\"\n                title=\"Brazil\"\n                subtitle=\"South America\"\n                expanded={expanded}\n                onAction={(event: ExpansionPanelActionEvent) => {\n                    setExpanded(!event.expanded);\n                }}\n            >\n                <Reveal>\n                    {expanded && (\n                        <ExpansionPanelContent>\n                            <div className=\"content\">\n                                <div className=\"image-container\">\n                                    <img src={imgPath} alt=\"KendoReact Layout Brazil\" />\n                                </div>\n                                <span>\n                                    The word ‚ÄúBrazil‚Äù likely comes from the Portuguese word for brazilwood, a tree that\n                                    once grew plentifully along the Brazilian coast. In Portuguese, brazilwood is called\n                                    pau-brasil, with the word brasil commonly given the etymology ‚Äúred like an ember‚Äù,\n                                    formed from brasa (‚Äúember‚Äù) and the suffix -il (from -iculum or -ilium). As\n                                    brazilwood produces a deep red dye, it was highly valued by the European textile\n                                    industry and was the earliest commercially exploited product from Brazil. Throughout\n                                    the 16th century, massive amounts of brazilwood were harvested by indigenous peoples\n                                    (mostly Tupi) along the Brazilian coast, who sold the timber to European traders\n                                    (mostly Portuguese, but also French) in return for assorted European consumer goods.\n                                </span>\n                            </div>\n                        </ExpansionPanelContent>\n                    )}\n                </Reveal>\n            </ExpansionPanel>\n            <style>\n                {`.wrapper {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n\n            .k-expander {\n                width: 600px;\n            }\n\n            .content {\n                display: flex;\n            }\n\n            .image-container {\n                height: 250px;\n                margin-right: 20px;\n            }\n\n            img {\n                height: 100%;\n            }\n\n            .content-text {\n                display: block;\n                text-align: justify;\n            }\n            `}\n            </style>\n        </>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: ExpansionPanel\n- Type: Function\n- Summary: Represents the [KendoReact ExpansionPanel component]({% slug overview_expansionpanel %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ExpansionPanel, ExpansionPanelContent, ExpansionPanelActionEvent } from '@progress/kendo-react-layout';\nimport { Reveal } from '@progress/kendo-react-animation';\n\nconst imgPath = 'https://demos.telerik.com/kendo-react-ui/assets/layout/countries/brazil.jpg';\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    return (\n        <>\n            <ExpansionPanel\n                title=\"Brazil\"\n                subtitle=\"South America\"\n                expanded={expanded}\n                onAction={(event: ExpansionPanelActionEvent) => {\n                    setExpanded(!event.expanded);\n                }}\n            >\n                <Reveal>\n                    {expanded && (\n                        <ExpansionPanelContent>\n                            <div className=\"content\">\n                                <div className=\"image-container\">\n                                    <img src={imgPath} alt=\"KendoReact Layout Brazil\" />\n                                </div>\n                                <span>\n                                    The word ‚ÄúBrazil‚Äù likely comes from the Portuguese word for brazilwood, a tree that\n                                    once grew plentifully along the Brazilian coast. In Portuguese, brazilwood is called\n                                    pau-brasil, with the word brasil commonly given the etymology ‚Äúred like an ember‚Äù,\n                                    formed from brasa (‚Äúember‚Äù) and the suffix -il (from -iculum or -ilium). As\n                                    brazilwood produces a deep red dye, it was highly valued by the European textile\n                                    industry and was the earliest commercially exploited product from Brazil. Throughout\n                                    the 16th century, massive amounts of brazilwood were harvested by indigenous peoples\n                                    (mostly Tupi) along the Brazilian coast, who sold the timber to European traders\n                                    (mostly Portuguese, but also French) in return for assorted European consumer goods.\n                                </span>\n                            </div>\n                        </ExpansionPanelContent>\n                    )}\n                </Reveal>\n            </ExpansionPanel>\n            <style>\n                {`.wrapper {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n\n            .k-expander {\n                width: 600px;\n            }\n\n            .content {\n                display: flex;\n            }\n\n            .image-container {\n                height: 250px;\n                margin-right: 20px;\n            }\n\n            img {\n                height: 100%;\n            }\n\n            .content-text {\n                display: block;\n                text-align: justify;\n            }\n            `}\n            </style>\n        </>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ExpansionPanelProps (children)\nname: ExpansionPanelProps\nfullName: ExpansionPanelProps\nsummary: The props of the ExpansionPanel component.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - ariaControls\n  - children\n  - className\n  - collapseIcon\n  - collapseSVGIcon\n  - dir\n  - disabled\n  - expandIcon\n  - expandSVGIcon\n  - expanded\n  - id\n  - onAction\n  - style\n  - subtitle\n  - tabIndex\n  - title\n\n---\n### ExpansionPanel.ExpansionPanel.props (children)\nname: props\nfullName: ExpansionPanel.ExpansionPanel.props\nsyntax:\n  return:\n    type: ExpansionPanelProps | RefAttributes\n\n\nCustom Icons\n\nThe ExpansionPanel provides the option to customize the icon indicators.\nYou can replace both the expand and collapse icons with custom font icons by using the <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#expandicon\">expandIcon</a> and <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#collapseicon\">collapseIcon</a> properties.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom Icons\n\nThe ExpansionPanel provides the option to customize the icon indicators.\nYou can replace both the expand and collapse icons with custom font icons by using the <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#expandicon\">expandIcon</a> and <a href=\"/kendo-react-ui/components/layout/api/expansionpanelprops#collapseicon\">collapseIcon</a> properties.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nOut of the box, the Kendo React ExpansionPanel provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "DataGrid": "## API Reference Item\n- Name: GridProps.highlight\n- Type: Property\n- Summary: The descriptor by which the highlight state of an item is defined.\r\nPassing a boolean value will highlight the whole row, while passing an object will highlight individual cells by their field.\n- Syntax: \n\n- Return Type: name: GridHighlightDescriptor\nfullName: GridHighlightDescriptor\nsummary: \"Represents the highlight state descriptor for Grid items.\\r\\nThe key is the item identifier, and the value can be either a boolean (for whole row highlighting)\\r\\nor an array of column indices (for specific cell highlighting).\"\nsyntax:\n  return:\n    type: boolean | Array<number>\n  parameters:\n    - id: 23547\n      name: key\n      type: string\npackageName: '@progress/kendo-react-grid'\n\n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nfunction App() {\n    return <Grid highlight={{ 'item-data-key-id': true }} />;\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: GridProps.onRowClick\n- Type: Property\n- Summary: Fires when the user clicks a row.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridRowClickEvent } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nconst handleRowClick = (event: GridRowClickEvent) => {\n    console.log('Row clicked');\n};\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\" navigatable={true} onRowClick={handleRowClick}>\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## Additional Context\n### GridRowClickEvent (generic)\nname: GridRowClickEvent\nfullName: GridRowClickEvent\nsummary: |-\n  Represents the object of the \n  `onRowClick`\n   Grid event.\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - dataItem\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n## API Reference Item\n- Name: GridProps.size\n- Type: Property\n- Summary: Configures the \n`size`\n of the Grid.\r\n\r\nThe available options are:\r\n- small\r\n- medium\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\" size=\"small\">\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\nThe Grid provides multiple elements that can be individually styled. Before you apply the styling options to the desired elements, inspect the element and use selectors of higher priority.\n\nStyling the KendoReact Data Grid Page Numbers\n\nThe following example demonstrates how to style the appearance of the page numbers in the Grid.\n\nApplying Conditional Styling\n\nYou can use the custom cells.data functionality of the Grid to change the appearance of the cells on condition and based on the provided value.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nKendoReact Data Grid Styling APIs Styling the KendoReact Data Grid Columns\n\nTo style the columns of the Grid, either:\n\n<a href=\"/kendo-react-ui-develop/components/grid/cells\">Add custom cells for columns</a>, or\nAdd class names for td elements.\n\nSetting Class Names\n\nThe <a href=\"/kendo-react-ui-develop/components/grid/api/gridcolumnprops#classname\">className</a> property applies additional class to the td element and can be used for styling the background, text color, text alignment, and other styling options of the Grid.\n\nStyling the KendoReact Data Grid Rows To style the rows of the Grid, utilize the <a href=\"/kendo-react-ui-develop/components/grid/api/gridprops#rows\">rows</a> function which allows you to modify the appearance of the rows based on the provided values:\n\n<a href=\"/kendo-react-ui-develop/components/grid/rows/custom-rows\">Implement custom rows in KendoReact Grid</a>\n\nStyling the KendoReact Data Grid Individual Elements\n\nYou can individually style the elements of the Grid by using CSS.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "StackLayout": "## API Reference Item\n- Name: StackLayout\n- Type: Function\n- Summary: Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\r\nArranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={100}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StackLayout.StackLayout.props (children)\nname: props\nfullName: StackLayout.StackLayout.props\nsyntax:\n  return:\n    type: StackLayoutProps | RefAttributes\n\n\n## API Reference Item\n- Name: StackLayoutProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\n- Syntax: \n\n## Additional Context\n### StackLayoutProps.align (children)\nname: align\nfullName: StackLayoutProps.align\nsummary: \"Specifies the horizontal and vertical alignment of the inner StackLayout elements.\\r\\nDemo ([here]({% slug layout_stacklayout %}#toc-horizontal-alignment)) and ([here]({% slug layout_stacklayout %}#toc-vertical-alignment)).\\r\\n\\r\\nThe possible keys are:\\r\\n* \\n`horizontal`\\n&mdash;Defines the possible horizontal alignment of the inner StackLayout elements.\\r\\n  * \\n`start`\\n&mdash;Uses the start point of the container.\\r\\n  * \\n`center`\\n&mdash;Uses the central point of the container.\\r\\n  * \\n`end`\\n&mdash;Uses the end point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the width of the container.\\r\\n* \\n`vertical`\\n&mdash;Defines the possible vertical alignment of the inner StackLayout elements.\\r\\n  * \\n`top`\\n&mdash;Uses the top point of the container.\\r\\n  * \\n`middle`\\n&mdash;Uses the middle point of the container.\\r\\n  * \\n`bottom`\\n&mdash;Uses the bottom point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the height of the container.\"\nsyntax:\n  return:\n    type: StackLayoutAlign\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.children (children)\nname: children\nfullName: StackLayoutProps.children\nsummary: The React elements that will be rendered inside the StackLayout.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.className (children)\nname: className\nfullName: StackLayoutProps.className\nsummary: Sets additional CSS classes to the StackLayout.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.gap (children)\nname: gap\nfullName: StackLayoutProps.gap\nsummary: >-\n  Specifies the gap between the inner elements ([see example]({% slug\n  layout_stacklayout %}#toc-gaps)).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.id (children)\nname: id\nfullName: StackLayoutProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root StackLayout element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.orientation (children)\nname: orientation\nfullName: StackLayoutProps.orientation\nsummary: \"Specifies the StackLayout orientation.\\r\\n([see example]({% slug layout_stacklayout %}#toc-orientation)).\\r\\n\\r\\nThe possible values are:\\r\\n* (Default)\\n`horizontal`\\n\\r\\n* \\n`vertical`\"\nsyntax:\n  return:\n    type: StackLayoutOrientation\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.style (children)\nname: style\nfullName: StackLayoutProps.style\nsummary: Sets additional CSS styles to the StackLayout.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n\nThe following example demonstrates the StackLayout component in action and also showcases other KendoReact components‚Äîthe <a href=\"/kendo-react-ui-develop/components/buttons/buttongroup\">ButtonGroup</a>, <a href=\"/kendo-react-ui-develop/components/layout/avatar\">Avatars</a> and <a href=\"/kendo-react-ui-develop/components/layout/card\">Cards</a> components. The components are arranged in a stack and can be switched from horizontal to vertical orientation.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... The KendoReact StackLayout component allows you to easily align vertically or horizontally multiple elements in a stack.\nIt delivers different orientations, alignments, spacings and other handy options.\nThis   is   a  Free React  StackLayoutThe KendoReact  StackLayout   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\nLayout\n\nThe StackLayout component provides options for controlling its appearance.\nTo customize the layout of the StackLayout, use any of the following configuration options:\n\nOrientation\nGaps\nHorizontal alignment\nVertical alignment\nNested StackLayouts\n\nOrientation\n\nTo set the StackLayout orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#orientation\">orientation</a> property.\nBy default, orientation is set to horizontal.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGaps\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Stepper": "## API Reference Item\n- Name: Stepper\n- Type: Function\n- Summary: Represents the [KendoReact Stepper component]({% slug overview_stepper %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Stepper, StepperChangeEvent } from '@progress/kendo-react-layout';\nimport { cartIcon, dollarIcon, eyeIcon, mapMarkerIcon, trackChangesAcceptIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { label: 'Cart', svgIcon: cartIcon },\n    { label: 'Delivery Address', svgIcon: mapMarkerIcon },\n    { label: 'Payment Method', svgIcon: dollarIcon },\n    { label: 'Preview', svgIcon: eyeIcon, optional: true },\n    { label: 'Finish Order', svgIcon: trackChangesAcceptIcon }\n];\n\nconst App = () => {\n    const [value, setValue] = React.useState<number>(0);\n\n    const handleChange = (e: StepperChangeEvent) => {\n        setValue(e.value);\n    };\n\n    return <Stepper value={value} onChange={handleChange} items={items} />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StepperProps (children)\nname: StepperProps\nfullName: StepperProps\nsummary: >-\n  Represents the props of the [KendoReact Stepper component]({% slug\n  overview_stepper %}).\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - animationDuration\n  - children\n  - className\n  - dir\n  - disabled\n  - errorIcon\n  - errorSVGIcon\n  - item\n  - items\n  - linear\n  - mode\n  - onChange\n  - onFocus\n  - orientation\n  - selectOnFocus\n  - style\n  - successIcon\n  - successSVGIcon\n  - value\n\n---\n### Stepper.Stepper.props (children)\nname: props\nfullName: Stepper.Stepper.props\nsyntax:\n  return:\n    type: StepperProps | RefAttributes\n\n\nValidation\n\nThe Stepper enables you to set validation logic for each step. Based on it, a success or error icon will be rendered. Validation icons are rendered either in the step indicator or as part of the step label, depending on the current Stepper configuration options.\n\nSetup\n\nTo set the step validation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stepprops#isvalid\">isValid</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom Validation Icons\n\n<a href=\"/kendo-react-ui-develop/components/layout/stepper/validation\">Validation</a>‚ÄîYou can set the validation logic for each step.\n<a href=\"/kendo-react-ui-develop/components/layout/stepper/custom_rendering\">Custom Rendering</a>‚ÄîThe Stepper allows you to customize the rendering of each step.\n<a href=\"/kendo-react-ui-develop/components/layout/stepper/keyboard-navigation\">Keyboard Navigation</a>‚ÄîThe Stepper supports various keyboard shortcuts.\n\nSteps Types\n\nThe Stepper provides various step types. For example, disabled, optional steps as well as steps with validation applied.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Sparkline": "## API Reference Item\n- Name: SparklineProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Sparkline component.\n- Syntax: \n\n## Additional Context\n### SparklineProps.axisDefaults (children)\nname: axisDefaults\nfullName: SparklineProps.axisDefaults\nsummary: This option allows to override the default axis options.\nsyntax:\n  return:\n    type: AxisDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.className (children)\nname: className\nfullName: SparklineProps.className\nsummary: Sets additional CSS classes to the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.data (children)\nname: data\nfullName: SparklineProps.data\nsummary: The data for the default Sparkline series. Discarded if series are supplied.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.dir (children)\nname: dir\nfullName: SparklineProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onAxisLabelClick (children)\nname: onAxisLabelClick\nfullName: SparklineProps.onAxisLabelClick\nsummary: Fires when the user clicks an axis label.\nsyntax:\n  return:\n    type: '(event: AxisLabelClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDrag (children)\nname: onDrag\nfullName: SparklineProps.onDrag\nsummary: >-\n  Fires as long as the user is dragging the Chart with the mouse or through\n  swipe gestures.\nsyntax:\n  return:\n    type: '(event: DragEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDragEnd (children)\nname: onDragEnd\nfullName: SparklineProps.onDragEnd\nsummary: Fires when the user stops dragging the Chart.\nsyntax:\n  return:\n    type: '(event: DragEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDragStart (children)\nname: onDragStart\nfullName: SparklineProps.onDragStart\nsummary: Fires when the user starts dragging the Chart.\nsyntax:\n  return:\n    type: '(event: DragStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onPlotAreaClick (children)\nname: onPlotAreaClick\nfullName: SparklineProps.onPlotAreaClick\nsummary: |-\n  Fires when the user clicks the plot area. The \n  `click`\n   event is triggered by the \n  `tap`\n   and \n  `contextmenu`\n   events. To distinguish between the original events, inspect the \n  `e.originalEvent.type`\n   field.\nsyntax:\n  return:\n    type: '(event: PlotAreaClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onPlotAreaHover (children)\nname: onPlotAreaHover\nfullName: SparklineProps.onPlotAreaHover\nsummary: >-\n  Fires when the user hovers the plot area ([see example]({% slug\n  crosshairs_chart_charts %}#toc-current-cursor-values)).\nsyntax:\n  return:\n    type: '(event: PlotAreaHoverEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onRefresh (children)\nname: onRefresh\nfullName: SparklineProps.onRefresh\nsummary: >-\n  Fires when the Chart is about to refresh. The event can be used to prevent the\n  refresh of the Chart in specific cases ([see example]({% slug refresh_chart\n  %}).\nsyntax:\n  return:\n    type: '(chartOptions: any, themeOptions: any, chartInstance: any) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onRender (children)\nname: onRender\nfullName: SparklineProps.onRender\nsummary: >-\n  Fires when the Chart is ready to render on screen ([see example]({% slug\n  plotbands_chart_charts %}#toc-custom-plot-bands)). For example, you can use it\n  to remove loading indicators. Any changes made to the options are ignored.\nsyntax:\n  return:\n    type: '(event: RenderEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelect (children)\nname: onSelect\nfullName: SparklineProps.onSelect\nsummary: \"Fires when the user modifies the selection.\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelectEnd (children)\nname: onSelectEnd\nfullName: SparklineProps.onSelectEnd\nsummary: \"Fires when the user completes the modification of the selection ([see example]({% slug selection_chart_charts %}#toc-using-selection-as-navigator)).\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelectStart (children)\nname: onSelectStart\nfullName: SparklineProps.onSelectStart\nsummary: \"Fires when the user starts modifying the axis selection.\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSeriesClick (children)\nname: onSeriesClick\nfullName: SparklineProps.onSeriesClick\nsummary: \"Fires when the user clicks the Chart series.\\r\\n\\r\\nThe \\n`click`\\n event will be triggered by the \\n`tap`\\n and \\n`contextmenu`\\n events. To distinguish between the original events, inspect the \\n`e.originalEvent.type`\\n field.\"\nsyntax:\n  return:\n    type: '(event: SeriesClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSeriesHover (children)\nname: onSeriesHover\nfullName: SparklineProps.onSeriesHover\nsummary: Fires when the user hovers over the Chart series.\nsyntax:\n  return:\n    type: '(event: SeriesHoverEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoom (children)\nname: onZoom\nfullName: SparklineProps.onZoom\nsummary: >-\n  Fires as long as the user is zooming the Chart by using the mousewheel\n  operation.\nsyntax:\n  return:\n    type: '(event: ChartZoomEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoomEnd (children)\nname: onZoomEnd\nfullName: SparklineProps.onZoomEnd\nsummary: Fires when the user stops zooming the Chart.\nsyntax:\n  return:\n    type: '(event: ChartZoomEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoomStart (children)\nname: onZoomStart\nfullName: SparklineProps.onZoomStart\nsummary: Fires when the user uses the mousewheel to zoom the Chart.\nsyntax:\n  return:\n    type: '(event: ChartZoomStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.paneDefaults (children)\nname: paneDefaults\nfullName: SparklineProps.paneDefaults\nsummary: This option allows to override the default pane options.\nsyntax:\n  return:\n    type: PaneDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.panes (children)\nname: panes\nfullName: SparklineProps.panes\nsummary: The chart panes configuration.\nsyntax:\n  return:\n    type: Array<Pane>\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.pannable (children)\nname: pannable\nfullName: SparklineProps.pannable\nsummary: >-\n  Specifies if the Chart can be panned ([see example]({% slug\n  panzoom_chart_charts %})).\nsyntax:\n  return:\n    type: boolean | DragAction\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.renderAs (children)\nname: renderAs\nfullName: SparklineProps.renderAs\nsummary: \"Sets the preferred rendering engine ([see example]({% slug rendering_chart_charts %})). If not supported by the browser, the Chart switches to the first available mode.\\r\\n\\r\\nThe supported values are:\\r\\n- \\n`\\\"svg\\\"`\\n&mdash;If available, renders the component as an inline \\n`.svg`\\n file.\\r\\n- \\n`\\\"canvas\\\"`\\n&mdash;If available, renders the component as a \\n`canvas`\\n element.\"\nsyntax:\n  return:\n    type: '\"svg\" | \"canvas\"'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.seriesColors (children)\nname: seriesColors\nfullName: SparklineProps.seriesColors\nsummary: >-\n  The default colors for the Chart series. When all colors are used, new colors\n  are pulled from the start again.\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.seriesDefaults (children)\nname: seriesDefaults\nfullName: SparklineProps.seriesDefaults\nsummary: This option allows to override the default series options.\nsyntax:\n  return:\n    type: SeriesDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.style (children)\nname: style\nfullName: SparklineProps.style\nsummary: The styles that are applied to the component.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.transitions (children)\nname: transitions\nfullName: SparklineProps.transitions\nsummary: >-\n  If set to \n\n  `true`\n\n  , the Chart plays animations when it displays the series. By default,\n  animations are enabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.type (children)\nname: type\nfullName: SparklineProps.type\nsummary: The data for the default Sparkline series. Discarded if series are supplied.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.zoomable (children)\nname: zoomable\nfullName: SparklineProps.zoomable\nsummary: >-\n  Specifies if the Chart can be zoomed ([see example]({% slug\n  panzoom_chart_charts %})). Currently is only applicable to linear types, where\n  the range on the X axis can be changed based on the zoom level.\nsyntax:\n  return:\n    type: boolean | Zoomable\npackageName: '@progress/kendo-react-charts'\n\n\n## API Reference Item\n- Name: Sparkline\n- Type: Class\n- Summary: The root Sparkline component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Sparkline } from '@progress/kendo-react-charts';\n\nconst App = () => {\n    return <Sparkline data={[1, 4, 6, 8, 2, 5]} />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Sparkline._baseChart (children)\nname: _baseChart\nfullName: Sparkline._baseChart\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### Sparkline.getTarget (children)\nname: getTarget\nfullName: Sparkline.getTarget\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### Sparkline.element (children)\nname: element\nfullName: Sparkline.element\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\n\n---\n### Sparkline.surface (children)\nname: surface\nfullName: Sparkline.surface\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\n\n\nGenerally, Sparklines are simple, word-sized graphics that can be embedded in tables, headlines, or chunks of text. The concept for their graphical representation was developed by <a href=\"https://en.wikipedia.org/wiki/Edward_Tufte\" rel=\"noopener\" target=\"_blank\">Edward Tufte</a>. The KendoReact Sparkline is a version of the <a href=\"/kendo-react-ui-develop/components/charts/chart\">KendoReact Chart</a> which is tailored for this specific application. While the standard KendoReact Chart component behaves like a block element, due to its rendering inside a div element to allow for an easy The KendoReact Sparkline is a tiny chart without axes, coordinates, legends, titles, or other chart-specific elements. KendoReact Sparkline OverviewPremium\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Typography": "React Typography Demo Preview\n\nThe following example demonstrates the Typography variants and styles in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Typography is part of the <a href=\"/kendo-react-ui-develop/components/common\">KendoReact Common Utilities</a> component library. The procedures for installing, importing, and using the Common Utilities are identical for all components in the package. To learn how to use the Typography and the rest of the Common Utilities, see the <a href=\"/kendo-react-ui-develop/components/common\">Getting Started with the KendoReact Common Utilities</a> guide.\n\nKey Features Key Features\n\n\n<a href=\"/kendo-react-ui-develop/components/common/typography/appearance\">Appearance</a>‚ÄîYou can quickly add additional style to the Typography by choosing from the predefined styling options.\n\nAppearance\n\nThe Typography component provides many predefined appearance options such as configure the the alignment and transformation of the text, and also change the theme color.\n\nFont Size\n\nTo set the font size of the element, use the <a href=\"/kendo-react-ui-develop/components/common/api/typographyprops#fontsize\">fontSize</a> property.\nThe possible values are:\n\nxsmall\nsmall\nmedium\nlarge\nxlarge\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFont Weight\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "AppBar": "## API Reference Item\n- Name: AppBar\n- Type: Function\n- Summary: Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### AppBarProps (children)\nname: AppBarProps\nfullName: AppBarProps\nsummary: \"Represents the props of the [KendoReact AppBar component]({% slug overview_appbar %}).\\r\\nUsed to display information, actions, branding titles and additional navigation on the current screen.\"\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - id\n  - position\n  - positionMode\n  - style\n  - themeColor\n\n---\n### AppBar.AppBar.props (children)\nname: props\nfullName: AppBar.AppBar.props\nsyntax:\n  return:\n    type: AppBarProps | RefAttributes\n\n\n## API Reference Item\n- Name: AppBarProps.themeColor\n- Type: Property\n- Summary: Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\r\n\r\n* The possible values are:\r\n* \n`light`\n (Default)\r\n* 'primary'\r\n* 'secondary'\r\n* 'tertiary'\r\n* 'info'\r\n* 'success'\r\n* 'warning'\r\n* 'error'\r\n* 'dark'\r\n* 'inherit'\r\n* 'inverse'\n- Syntax: \n\n- Return Type: name: AppBarThemeColor\nfullName: AppBarThemeColor\nsummary: \"Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\\r\\n\\r\\n* The possible values are:\\r\\n* \\n`light`\\n (Default)\\r\\n* 'primary'\\r\\n* 'secondary'\\r\\n* 'tertiary'\\r\\n* 'info'\\r\\n* 'success'\\r\\n* 'warning'\\r\\n* 'error'\\r\\n* 'dark'\\r\\n* 'inherit'\\r\\n* 'inverse'\"\nsyntax:\n  return:\n    type: >-\n      \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\" |\n      \"warning\" | \"error\" | \"dark\" | \"light\" | \"inherit\" | \"inverse\"\npackageName: '@progress/kendo-react-layout'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\nThe AppBar provides information and actions related to the current application screen. It is typically used to show page titles, brand identity and can contain navigation items.\nThis   is   a  Free React  AppBarThe KendoReact  AppBar   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the AppBar in action. <a href=\"/kendo-react-ui-develop/components/layout/appbar/appearance\">Appearance</a>‚ÄîThe AppBar comes with predefined option that allow you to set its theme color.\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/responsive-design\">Responsive Design</a>‚ÄîThe responsive layout adapts to any device and screen size.\n\nKeyboard Navigation\n\nFor more details about the Appbar component's keyboard navigation, refer to the article on <a href=\"/kendo-react-ui-develop/components/layout/appbar/keyboard-navigation\">keyboard navigation in the Appbar component</a>.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Loader": "## API Reference Item\n- Name: Loader\n- Type: Function\n- Summary: Represents the [KendoReact Loader component]({% slug overview_loader %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Loader } from '@progress/kendo-react-indicators';\n\nexport default function App() {\n    return (\n        <div className=\"k-d-flex k-justify-content-evenly\">\n            <Loader type=\"pulsing\" />\n            <Loader type=\"infinite-spinner\" />\n            <Loader type=\"converging-spinner\" />\n        </div>\n    );\n}\n\n```\n\n\n## Additional Context\n### LoaderProps (children)\nname: LoaderProps\nfullName: LoaderProps\nsummary: >-\n  Represents the props of the [KendoReact Loader component]({% slug\n  overview_loader %}).\nsyntax: {}\npackageName: '@progress/kendo-react-indicators'\nmembers:\n  - className\n  - size\n  - style\n  - themeColor\n  - type\n\n---\n### Loader.Loader.props (children)\nname: props\nfullName: Loader.Loader.props\nsyntax:\n  return:\n    type: LoaderProps | RefAttributes\n\n\nAdd a Loader to indicate that data is being fetched for a <a href=\"/kendo-react-ui/components/grid\">Grid</a>.\nShow unread notifications with a Badge on an <a href=\"/kendo-react-ui/components/layout/appbar\">AppBar</a> or <a href=\"/kendo-react-ui/components/buttons/button\">Button</a>.\nImprove UX with Skeleton placeholders for a <a href=\"/kendo-react-ui/components/layout/card\">Card</a> with profile details while data loads.\n\nWhether you are looking for examples how to use‚ÄØKendoReact‚ÄØin applications, or for a starting point for your own online shops, head over to the live <a href=\"https://telerik.github.io/kendo-react/ecommerce-jewellery-store/\" rel=\"noopener\" target=\"_blank\">Ecommerce Jewellery Store Application</a>. You can find‚ÄØ<a href=\"https://github.com/telerik/kendo-react/tree/master/examples/ecommerce-jewellery-store\" rel=\"noopener\" target=\"_blank\">the Vite application's source code on GitHub</a> and\n\nKendoReact Loader Overview\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Breadcrumb": "## API Reference Item\n- Name: Breadcrumb\n- Type: Function\n- Summary: Represents the Breadcrumb component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Breadcrumb } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    const data = [\n        { id: '1', text: 'Home' },\n        { id: '2', text: 'Products' },\n        { id: '3', text: 'Electronics' }\n    ];\n    return <Breadcrumb data={data} />;\n}\n\n```\n\n\n## Additional Context\n### BreadcrumbProps (children)\nname: BreadcrumbProps\nfullName: BreadcrumbProps\nsummary: >-\n  Represents the props of [Breadcrumb]({% slug api_layout_breadcrumb %})\n  component.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - ariaLabel\n  - breadcrumbDelimiter\n  - breadcrumbLink\n  - breadcrumbListItem\n  - breadcrumbOrderedList\n  - className\n  - data\n  - dir\n  - disabled\n  - iconClassField\n  - iconField\n  - id\n  - onItemSelect\n  - onKeyDown\n  - size\n  - style\n  - tabIndex\n  - textField\n  - valueField\n\n---\n### Breadcrumb.Breadcrumb.props (children)\nname: props\nfullName: Breadcrumb.Breadcrumb.props\nsyntax:\n  return:\n    type: BreadcrumbProps | RefAttributes\n\n\nCustom icon\n\nThe Breadcrumb enables you to set a custom icon item. To achieve this, set the icon inside the <a href=\"/kendo-react-ui-develop/components/layout/api/breadcrumbprops#data\">data</a> property of the Breadcrumb component that sets the <a href=\"/kendo-react-ui-develop/components/layout/api/breadcrumblinkprops#icon\">icon</a> inside the BreadcrumbLink component.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... Item Appearance\n\nThe Breadcrumb component provides different options for customizing the appearance of the items.\n\nSize\n\nThe KendoReact Breadcrumb allows selecting a predefined size option that changes its size.\nTo change the default size of the Breadcrumb, set its <a href=\"/kendo-react-ui-develop/components/layout/api/breadcrumbprops#size\">size</a> property which will change the padding of its elements. The available size options are:\n\n<a href=\"/kendo-react-ui-develop/components/layout/breadcrumb/appearance\">Item Appearance</a>‚ÄîThe Breadcrumb component comes with predefined options for using font and custom icons.\n<a href=\"/kendo-react-ui-develop/components/layout/breadcrumb/delimiter\">Delimiter</a>‚ÄîYou can change the default separator between the Breadcrumb items.\n<a href=\"/kendo-react-ui-develop/components/layout/breadcrumb/disabled\">Disabled Mode</a>‚ÄîYou can easily render disabled Breadcrumb items.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Dialog": "## API Reference Item\n- Name: Dialog\n- Type: Function\n- Summary: Represents the [KendoReact Dialog component]({% slug overview_dialog %}).\r\n\r\nAccepts properties of type [DialogProps]({% slug api_dialogs_dialogprops %}).\r\nObtaining the \n`ref`\n returns an object of type [DialogHandle]({% slug api_dialogs_dialoghandle %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Dialog } from '@progress/kendo-react-dialogs';\n\nfunction App() {\n    return (\n        <Dialog title=\"Dialog\">\n            <div>Dialog content</div>\n        </Dialog>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DialogProps (children)\nname: DialogProps\nfullName: DialogProps\nsummary: >-\n  Represents the props of the [KendoReact Dialog component]({% slug\n  overview_dialog %}).\nsyntax: {}\npackageName: '@progress/kendo-react-dialogs'\nmembers:\n  - appendTo\n  - autoFocus\n  - autoFocusedElement\n  - className\n  - closeIcon\n  - contentStyle\n  - dir\n  - height\n  - id\n  - minWidth\n  - modal\n  - onClose\n  - overlayStyle\n  - style\n  - themeColor\n  - title\n  - width\n\n---\n### Dialog.Dialog.props (children)\nname: props\nfullName: Dialog.Dialog.props\nsyntax:\n  return:\n    type: DialogProps | RefAttributes\n\n\nThe KendoReact Date Inputs is a collection of customizable, responsive, and interactive UI components that let the user pick dates and times when filling in data or scheduling appointments. Based on the chosen component, end users can type the date and time directly, set it with the arrow buttons from the keyboard, or select it from beautifully rendered popups.\n\nThe following demo shows the components included in the KendoReact Dialogs package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... KendoReact Dialogs Overview\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "TabStrip": "## API Reference Item\n- Name: TabStripProps.selected\n- Type: Property\n- Summary: Sets the index of the selected TabStripTab component ([see example]({% slug tabs_tabstrip %}#toc-tabs-on-initial-loading)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TabStrip, TabStripTab, TabStripSelectEventArguments } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    const [selected, setSelected] = React.useState<number>(0);\n\n    const handleSelect = (e: TabStripSelectEventArguments) => {\n        setSelected(e.selected);\n    };\n\n    return (\n        <TabStrip selected={selected} onSelect={handleSelect}>\n            {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((t) => (\n                <TabStripTab key={t} title={`Tab ${t}`}>\n                    <div>{`Content ${t}`}</div>\n                </TabStripTab>\n            ))}\n        </TabStrip>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: TabStripClassComponent\n- Type: Class\n- Summary: Represents the TabStrip component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TabStrip, TabStripSelectEventArguments, TabStripTab } from '@progress/kendo-react-layout';\n\ninterface Tab {\n    title: string;\n    location: string;\n    currentDegree: string;\n    degreeRange: string;\n    rainChance: number;\n    humidity: number;\n}\n\nconst tabs: Tab[] = [\n    {\n        title: 'London',\n        location: 'London, UK',\n        currentDegree: '29¬∞',\n        degreeRange: '30¬∞ / 16¬∞',\n        rainChance: 10,\n        humidity: 36\n    },\n    {\n        title: 'Sofia',\n        location: 'Sofia, BG',\n        currentDegree: '19¬∞',\n        degreeRange: '13¬∞ / 20¬∞',\n        rainChance: 90,\n        humidity: 45\n    },\n    {\n        title: 'Berlin',\n        location: 'Berlin, DE',\n        currentDegree: '25¬∞',\n        degreeRange: '30¬∞ / 22¬∞',\n        rainChance: 5,\n        humidity: 20\n    },\n    {\n        title: 'Paris',\n        location: 'Paris, FR',\n        currentDegree: '23¬∞',\n        degreeRange: '30¬∞ / 18¬∞',\n        rainChance: 20,\n        humidity: 38\n    },\n    {\n        title: 'Vienna',\n        location: 'Vienna, AT',\n        currentDegree: '19¬∞',\n        degreeRange: '22¬∞ / 10¬∞',\n        rainChance: 80,\n        humidity: 46\n    },\n    {\n        title: 'Stockholm',\n        location: 'Stockholm, SE',\n        currentDegree: '10¬∞',\n        degreeRange: '2¬∞ / 15¬∞',\n        rainChance: 85,\n        humidity: 56\n    }\n];\n\nconst Title = (props: { tab: Tab }) => {\n    return <span>{props.tab.title}</span>;\n};\n\nconst App = () => {\n    const [selected, setSelected] = React.useState<number>(0);\n\n    const handleSelect = (e: TabStripSelectEventArguments) => {\n        setSelected(e.selected);\n    };\n\n    return (\n        <TabStrip\n            selected={selected}\n            onSelect={handleSelect}\n            scrollable={true}\n            style={{ width: '350px', userSelect: 'none' }}\n        >\n            {tabs.map((tab, index) => {\n                return (\n                    <TabStripTab title={<Title tab={tab} />} key={index}>\n                        <div>\n                            <div>\n                                <p>{tab.currentDegree}</p>\n                                <p>{tab.degreeRange}</p>\n                            </div>\n                            <div>\n                                <p style={{ fontWeight: 'bolder' }}>{tab.location}</p>\n                                <p>Chance of Rain: {tab.rainChance}%</p>\n                                <p>Humidity: {tab.humidity}%</p>\n                            </div>\n                        </div>\n                    </TabStripTab>\n                );\n            })}\n        </TabStrip>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### TabStripClassComponent.constructor (children)\nname: constructor\nfullName: TabStripClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.children (children)\nname: children\nfullName: TabStripClassComponent.children\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.horizontalScroll (children)\nname: horizontalScroll\nfullName: TabStripClassComponent.horizontalScroll\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.itemsNavRef (children)\nname: itemsNavRef\nfullName: TabStripClassComponent.itemsNavRef\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.navigation (children)\nname: navigation\nfullName: TabStripClassComponent.navigation\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.renderContent (children)\nname: renderContent\nfullName: TabStripClassComponent.renderContent\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.resizeObserver (children)\nname: resizeObserver\nfullName: TabStripClassComponent.resizeObserver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.tabStripRef (children)\nname: tabStripRef\nfullName: TabStripClassComponent.tabStripRef\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.contentPanelId (children)\nname: contentPanelId\nfullName: TabStripClassComponent.contentPanelId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripClassComponent.navItemId (children)\nname: navItemId\nfullName: TabStripClassComponent.navItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: TabStripProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact TabStrip component]({% slug overview_tabstrip %}).\n- Syntax: \n\n## Additional Context\n### TabStripProps.animation (children)\nname: animation\nfullName: TabStripProps.animation\nsummary: Enables the tab animation.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.buttonScrollSpeed (children)\nname: buttonScrollSpeed\nfullName: TabStripProps.buttonScrollSpeed\nsummary: >-\n  Sets the tab list scroll speed in pixels when scrolling via clicking the\n  previous or next button.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.children (children)\nname: children\nfullName: TabStripProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### TabStripProps.dir (children)\nname: dir\nfullName: TabStripProps.dir\nsummary: Sets the direction of the TabStrip component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.id (children)\nname: id\nfullName: TabStripProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### TabStripProps.keepTabsMounted (children)\nname: keepTabsMounted\nfullName: TabStripProps.keepTabsMounted\nsummary: >-\n  Defines if the tabs will remain mounted after another tab is selected.\n  Defaults to \n\n  `false`\n\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.nextButton (children)\nname: nextButton\nfullName: TabStripProps.nextButton\nsummary: \"Defines the custom component that will be rendered as a next button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.onSelect (children)\nname: onSelect\nfullName: TabStripProps.onSelect\nsummary: Fires each time the user makes a selection.\nsyntax:\n  return:\n    type: '(e: TabStripSelectEventArguments) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.prevButton (children)\nname: prevButton\nfullName: TabStripProps.prevButton\nsummary: \"Defines the custom component that will be rendered as a previous button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.renderAllContent (children)\nname: renderAllContent\nfullName: TabStripProps.renderAllContent\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.scrollButtons (children)\nname: scrollButtons\nfullName: TabStripProps.scrollButtons\nsummary: Sets the visibility of the scroll buttons.\nsyntax:\n  return:\n    type: ScrollButtons\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.scrollButtonsPosition (children)\nname: scrollButtonsPosition\nfullName: TabStripProps.scrollButtonsPosition\nsummary: \"Sets the scroll buttons position according to the tab list.\\r\\nThe previous options 'around', 'before', 'after' are going to be deprecated in favor of 'split', 'start', 'end'.\"\nsyntax:\n  return:\n    type: ScrollButtonsPosition\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.scrollable (children)\nname: scrollable\nfullName: TabStripProps.scrollable\nsummary: Determines whether the TabStrip will be scrollable.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.size (children)\nname: size\nfullName: TabStripProps.size\nsummary: Specifies the possible sizes of the TabStrip.\nsyntax:\n  return:\n    type: TabStripSize\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.tabAlignment (children)\nname: tabAlignment\nfullName: TabStripProps.tabAlignment\nsummary: \"Sets the alignment of the tabs. Defaults to \\n`start`\\n.\\r\\n\\r\\nThe available options are:\\r\\n- \\n`\\\"start\\\"`\\n&mdash;Aligns the tabs at the start of the \\n`TabStripNavigation`\\n.\\r\\n- \\n`\\\"center\\\"`\\n&mdash;Aligns the tabs in the center of the \\n`TabStripNavigation`\\n.\\r\\n- \\n`\\\"end\\\"`\\n&mdash;Aligns the tabs at the end of the \\n`TabStripNavigation`\\n.\\r\\n- \\n`\\\"justify\\\"`\\n&mdash;Justifies the tabs inside the \\n`TabStripNavigation`\\n.\\r\\n- \\n`\\\"stretched\\\"`\\n&mdash;Stretches the tabs inside the \\n`TabStripNavigation`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.tabContentStyle (children)\nname: tabContentStyle\nfullName: TabStripProps.tabContentStyle\nsummary: Sets the style of the TabStripContent component.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.tabIndex (children)\nname: tabIndex\nfullName: TabStripProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   of the TabStripNavigation.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### TabStripProps.tabPosition (children)\nname: tabPosition\nfullName: TabStripProps.tabPosition\nsummary: \"Sets the position of the tabs. Defaults to \\n`top`\\n.\\r\\n\\r\\nThe available options are:\\r\\n- \\n`\\\"top\\\"`\\n&mdash;Renders the \\n`TabStripNavigation`\\n to the top of the TabStrip.\\r\\n- \\n`\\\"bottom\\\"`\\n&mdash;Renders the \\n`TabStripNavigation`\\n to the bottom of the TabStrip.\\r\\n- \\n`\\\"left\\\"`\\n&mdash;Renders the \\n`TabStripNavigation`\\n to the left of the TabStrip.\\r\\n- \\n`\\\"right\\\"`\\n&mdash;Renders the \\n`TabStripNavigation`\\n to the right of the TabStrip.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: TabStripProps.className\n- Type: Property\n- Summary: Specifies the CSS class names of the TabStrip component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TabStrip, TabStripSelectEventArguments, TabStripTab } from '@progress/kendo-react-layout';\n\ninterface Tab {\n    temp: number;\n    city: string;\n    weather: string;\n}\n\nconst items: Tab[] = [\n    {\n        city: 'Paris',\n        temp: 17,\n        weather: 'rainy'\n    },\n    {\n        city: 'New York',\n        temp: 29,\n        weather: 'sunny'\n    }\n];\n\nconst App = () => {\n    const [selected, setSelected] = React.useState<number>(1);\n\n    const handleSelect = (e: TabStripSelectEventArguments) => {\n        setSelected(e.selected);\n    };\n\n    return (\n        <TabStrip className=\"my-custom-class\" selected={selected} onSelect={handleSelect}>\n            {items.map((item, index) => {\n                return (\n                    <TabStripTab title={item.city} key={index}>\n                        <p>{item.temp}¬∞C</p>\n                        Weather in {item.city} is {item.weather}.\n                    </TabStripTab>\n                );\n            })}\n        </TabStrip>\n    );\n};\nexport default App;\n\n```\n\n\n<a href=\"/kendo-react-ui-develop/components/layout/tabstrip/tabs\">Tabs</a>‚ÄîYou can customize the TabStrip tabs by configuring their titles, position, disabled state, and more.\n<a href=\"/kendo-react-ui-develop/components/layout/globalization\">Globalization</a>‚ÄîThe TabStrip has built-in globalization support.\n<a href=\"/kendo-react-ui-develop/components/layout/tabstrip/keyboard-navigation\">Keyboard navigation</a>‚ÄîThe TabStrip component supports various keyboard shortcuts. The TabStrip is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the TabStrip and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features\n\n<a href=\"/kendo-react-ui/components/datatools/pager/responsive\">Responsive Design</a>\n\n\n<a href=\"/kendo-react-ui/components/datatools/pager/adaptive-rendering\">Adaptive Rendering</a>\n\n\n<a href=\"/kendo-react-ui/components/datatools/pager/appearance\">Different sizes</a>\n\n\n<a href=\"/kendo-react-ui/components/datatools/globalization\">Globalization</a>\n\n\nOut-of-the-box accessibility and keyboard navigation\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "DateRangePicker": "## API Reference Item\n- Name: DateRangePickerProps.onFocus\n- Type: Property\n- Summary: Fires each time the user focuses any of the DateRangePicker elements.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DateRangePicker } from '@progress/kendo-react-dateinputs';\n\nexport default function App() {\n    const handleFocus = (event) => {\n        console.log('DateRangePicker focused');\n    };\n\n    return <DateRangePicker onFocus={handleFocus} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: DateRangePickerProps.value\n- Type: Property\n- Summary: Set the selected range ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).\r\nProvide \n`start`\n and \n`end`\n valid \n`Date`\n values or \n`null`\n.\n- Syntax: \n\n- Return Type: name: SelectionRange\nfullName: SelectionRange\nsummary: The type that defines the selection range of the Calendar.\nsyntax: {}\npackageName: '@progress/kendo-react-dateinputs'\nmembers:\n  - end\n  - start\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DateRangePicker } from '@progress/kendo-react-dateinputs';\n\nexport default function App() {\n    const range = { start: new Date(2024, 5, 10), end: new Date(2024, 5, 15) };\n\n    return (\n        <DateRangePicker value={range} />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: DateRangePickerProps.popupSettings\n- Type: Property\n- Summary: Represents the additional props that will be passed to the [Popup]({% slug overview_popup %}) inside the DateRangePicker ([see example]({% slug child_settings_daterangepicker %}#toc-configuring-the-popup)).\n- Syntax: \n\n- Return Type: name: DateRangePickerPopupSettings\nfullName: DateRangePickerPopupSettings\nsummary: >-\n  Represents the settings that can be passed to the Popup inside the\n  DateRangePicker.\nsyntax: {}\npackageName: '@progress/kendo-react-dateinputs'\nmembers:\n  - anchor\n  - anchorAlign\n  - animate\n  - appendTo\n  - className\n  - collision\n  - id\n  - margin\n  - offset\n  - onClose\n  - onMouseDownOutside\n  - onOpen\n  - onPosition\n  - popupAlign\n  - popupClass\n  - positionMode\n  - scale\n  - show\n  - style\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DateRangePicker } from '@progress/kendo-react-dateinputs';\n\nexport default function App() {\n    return <DateRangePicker popupSettings={{ className: 'custom-popup', animate: false }} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: DateRangePickerProps.onChange\n- Type: Property\n- Summary: Fires when the user changes part of the range ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { DateRangePicker, DateRangePickerChangeEvent, SelectionRange } from '@progress/kendo-react-dateinputs';\n\nconst App = () => {\n    const [value, setValue] = React.useState<SelectionRange>({\n        start: new Date(2018, 8, 5),\n        end: new Date(2018, 8, 12)\n    });\n\n    const handleChange = (event: DateRangePickerChangeEvent) => {\n        setValue(event.value);\n    };\n\n    return <DateRangePicker value={value} onChange={handleChange} />;\n};\nexport default App;\n\n```\n\n\n## Additional Context\n### DateRangePickerChangeEvent (generic)\nname: DateRangePickerChangeEvent\nfullName: DateRangePickerChangeEvent\nsummary: |-\n  The arguments for the \n  `onChange`\n   event of the DateRangePicker.\nsyntax: {}\npackageName: '@progress/kendo-react-dateinputs'\nmembers:\n  - nativeEvent\n  - show\n  - syntheticEvent\n  - target\n  - value\n\n\n<a href=\"/kendo-react-ui-develop/components/dateinputs/daterangepicker/controlled-state\">Controlled mode</a>‚ÄîBy using the controlled mode, you can manage the date value and the state of the popup in the DateRangePicker.\n<a href=\"/kendo-react-ui-develop/components/dateinputs/daterangepicker/default-value\">Default value</a>‚ÄîThe defaultValue property allows you to configure an initial value, while the defaultShow property sets the initial state of the popup.\n\nCustomizing the Popup\n\nThe <a href=\"/kendo-react-ui-develop/components/popup\">Popup</a> component inside the DateRangePicker acts as a container element with an absolute position. The Popup is displayed on focus and is hidden on blur. To override the component that is responsible for containing the Calendar, set the <a href=\"/kendo-react-ui-develop/components/dateinputs/api/daterangepickerprops#popup\">popup</a> property to a custom component.\nThe following example demonstrates how to override some of the Popup properties.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nUse its <a href=\"/kendo-react-ui-develop/components/dateinputs/api/daterangepickerprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/dateinputs/api/daterangepickerprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nControlling the Popup State\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "TextArea": "## API Reference Item\n- Name: TextAreaProps.autoSize\n- Type: Property\n- Summary: Specifies if the textarea element will resize its height automatically ([see example]({% slug sizing_textarea %})).\r\nDefaults to \n`false`\n.\r\n\r\nSetting the value of the prop to \n`true`\n will make the TextArea component to ignore the resize behavior of the \n`resizable`\n prop.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextArea } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <>\n            <span>Auto resizable textarea</span>\n            <TextArea autoSize={true} />\n        </>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: TextAreaProps.ariaDescribedBy\n- Type: Property\n- Summary: Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\r\nFor example these elements could contain error or hint message.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextArea } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <div>\n            <TextArea ariaDescribedBy=\"textarea-description\" />\n            <div id=\"textarea-description\">This textarea is described by this text.</div>\n        </div>\n    );\n}\n\n```\n\n\nThe KendoReact TextArea component offers a highly customizable interface for the user to submit value on multiple lines.\nIts features cover everything from setting a default value and character counter to form validation.\nThis   is   a  Free React  TextAreaThe KendoReact  TextArea   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\nThe KendoReact Form component <a href=\"https://www.telerik.com/kendo-react-ui/components/form/guidelines-with-examples/\" rel=\"noopener\" target=\"_blank\">integrates with all KendoReact form components</a>.\nYou can display error messages and fully customize the behavior of the rendered component by using the additional properties of the Field component.\nThe following example demonstrates how to render a required TextArea within a KendoReact Form component.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSizing\n\nYou can easily set the initial height of the TextArea component as well as setting an auto size option as the user types.\n\nSetting the Initial Rows\n\nTo set initial rows of the TextArea, use its <a href=\"/kendo-react-ui-develop/components/inputs/api/textareaprops#rows\">rows</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nAuto-Resizing\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Drawer": "## API Reference Item\n- Name: Drawer\n- Type: Function\n- Summary: Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DrawerProps (children)\nname: DrawerProps\nfullName: DrawerProps\nsummary: >-\n  The properties of the [KendoReact Drawer component]({% slug overview_drawer\n  %}).\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - animation\n  - children\n  - className\n  - dir\n  - drawerClassName\n  - expanded\n  - item\n  - items\n  - mini\n  - miniWidth\n  - mode\n  - onOverlayClick\n  - onSelect\n  - position\n  - style\n  - tabIndex\n  - width\n\n---\n### Drawer.Drawer.props (children)\nname: props\nfullName: Drawer.Drawer.props\nsyntax:\n  return:\n    type: DrawerProps | RefAttributes\n\n\nCustom Rendering\n\nThe Drawer enables you to customize the content of its items.\nTo customize the appearance of the items, use the <a href=\"/kendo-react-ui-develop/components/layout/api/drawerprops#item\">item</a> property of the Drawer.\nThe following example demonstrates how to customize the look and feel of the drawer items.\n\nItems\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nHierarchical Drawer\n\nCustom Rendering\n\nThe Drawer enables you to customize the content of its items.\nTo customize the appearance of the items, use the <a href=\"/kendo-react-ui/components/layout/api/drawerprops#item\">item</a> property of the Drawer.\nThe following example demonstrates how to customize the look and feel of the drawer items.\n\nItems\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nHierarchical Drawer\n\nThe KendoReact Drawer component is a dismissible panel for navigating in responsive web applications.\nIt also enables the user to change the content of a specific section of the page.\nThis   is   a  Free React  DrawerThe KendoReact  Drawer   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Popup": "## API Reference Item\n- Name: Popup\n- Type: Function\n- Summary: The KendoReact Popup component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { Button, ButtonHandle } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    const anchor = React.useRef<ButtonHandle | null>(null);\n    const [show, setShow] = React.useState(false);\n\n    const onClick = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div>\n            <Button type=\"button\" onClick={onClick} ref={anchor}>\n                {show ? 'Hide' : 'Show'}\n            </Button>\n            <Popup anchor={anchor.current?.element} show={show}>\n                Popup content.\n            </Popup>\n        </div>\n    );\n}\n\n```\n\n\n## Additional Context\n### Popup.Popup.props (children)\nname: props\nfullName: Popup.Popup.props\nsyntax:\n  return:\n    type: PopupProps | RefAttributes\n\n\n## API Reference Item\n- Name: PopupProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Popup component]({% slug overview_popup %}).\n- Syntax: \n\n## Additional Context\n### PopupProps.anchor (children)\nname: anchor\nfullName: PopupProps.anchor\nsummary: >-\n  Specifies the element which will be used as an anchor ([see example]({% slug\n  alignmentpositioning_popup %})). The Popup opens next to that element.\nsyntax:\n  return:\n    type: null | HTMLElement\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.anchorAlign (children)\nname: anchorAlign\nfullName: PopupProps.anchorAlign\nsummary: >-\n  Specifies the pivot point of the anchor ([see example]({% slug\n  alignmentpositioning_popup %})).\nsyntax:\n  return:\n    type: Align\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.animate (children)\nname: animate\nfullName: PopupProps.animate\nsummary: >-\n  Controls the Popup animation ([see example]({% slug animations_popup %})). By\n  default, the opening and closing animations are enabled.\nsyntax:\n  return:\n    type: boolean | PopupAnimation\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.appendTo (children)\nname: appendTo\nfullName: PopupProps.appendTo\nsummary: \"Defines the container to which the Popup will be appended. Defaults to [\\n`body`\\n](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body).\\r\\n* If set to \\n`null`\\n the Popup will be rendered without React Portal.\"\nsyntax:\n  return:\n    type: null | HTMLElement\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.className (children)\nname: className\nfullName: PopupProps.className\nsummary: Specifies a list of CSS classes that will be added to the Popup element.\nsyntax:\n  return:\n    type: string | Array<string>\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.collision (children)\nname: collision\nfullName: PopupProps.collision\nsummary: >-\n  Configures the collision behavior of the Popup ([see example]({% slug\n  viewportboundarydetection_popup %})).\nsyntax:\n  return:\n    type: Collision\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.id (children)\nname: id\nfullName: PopupProps.id\nsummary: Specifies the id that will be added to the Popup element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.margin (children)\nname: margin\nfullName: PopupProps.margin\nsummary: \"Configures the margin value that will be added to the popup dimensions\\r\\nin pixels and leaves a blank space between the popup and the anchor.\"\nsyntax:\n  return:\n    type: Margin\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.offset (children)\nname: offset\nfullName: PopupProps.offset\nsummary: >-\n  Specifies the absolute position of the element ([see example]({% slug\n  alignmentpositioning_popup %})). The Popup opens next to that point. The pivot\n  point of the Popup is defined by the \n\n  `popupAlign`\n   configuration option. The boundary detection is applied by using the window viewport.\nsyntax:\n  return:\n    type: Offset\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.onClose (children)\nname: onClose\nfullName: PopupProps.onClose\nsummary: Fires after the Popup is closed.\nsyntax:\n  return:\n    type: '(event: PopupCloseEvent) => void'\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.onMouseDownOutside (children)\nname: onMouseDownOutside\nfullName: PopupProps.onMouseDownOutside\nsummary: Fires when the mousedown event is triggered outside the Popup.\nsyntax:\n  return:\n    type: '(event: MouseDownOutsideEvent) => void'\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.onOpen (children)\nname: onOpen\nfullName: PopupProps.onOpen\nsummary: Fires after the Popup is opened and the opening animation ends.\nsyntax:\n  return:\n    type: '(event: PopupOpenEvent) => void'\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.onPosition (children)\nname: onPosition\nfullName: PopupProps.onPosition\nsummary: Fires after the Popup position is set.\nsyntax:\n  return:\n    type: '(event: PositionEvent) => void'\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.popupAlign (children)\nname: popupAlign\nfullName: PopupProps.popupAlign\nsummary: >-\n  Specifies the pivot point of the Popup ([see example]({% slug\n  alignmentpositioning_popup %})).\nsyntax:\n  return:\n    type: Align\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.popupClass (children)\nname: popupClass\nfullName: PopupProps.popupClass\nsummary: >-\n  Specifies a list of CSS classes that will be added to the internal animated\n  element ([see example]({% slug appearance_popup %})).\nsyntax:\n  return:\n    type: 'string | Array<string> | { [key: string]: boolean }'\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.positionMode (children)\nname: positionMode\nfullName: PopupProps.positionMode\nsummary: \"Specifies the position mode of the component. By default, the Popup uses absolute positioning.\\r\\nTo make the Popup acquire fixed positioning, set this option to \\n`fixed`\\n.\"\nsyntax:\n  return:\n    type: PositionMode\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.scale (children)\nname: scale\nfullName: PopupProps.scale\nsummary: \"Used to set the document scale when using a [scale transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale).\\r\\n\\r\\nThe document or container scale is required to compute the popup position correctly. Detecting the scale is not reliable and must be set by providing a value for SCALE.\\r\\n\\r\\n> Using this token is not necessary for user-applied browser zoom.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.show (children)\nname: show\nfullName: PopupProps.show\nsummary: >-\n  Controls the Popup visibility ([see example]({% slug hidden_popup %})).\n  Defaults to \n\n  `false`\n\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-popup'\n\n---\n### PopupProps.style (children)\nname: style\nfullName: PopupProps.style\nsummary: Represents the styles that are applied to the Popup.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-popup'\n\n\nThe following demo shows the components included in the KendoReact Dialogs package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... Key Features\n\nThe KendoReact Dialogs provide the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance\n\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a> KendoReact Dialogs Overview\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Chart": "## API Reference Item\n- Name: ChartXAxisNotes\n- Type: Function\n- Summary: Represents the KendoReact ChartXAxisNotes component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Chart,\n    ChartTitle,\n    ChartXAxis,\n    ChartXAxisItem,\n    ChartSeries,\n    ChartSeriesItem,\n    ChartXAxisNotes\n} from '@progress/kendo-react-charts';\n\nconst data = [\n    {\n        windSpeed: 16.4,\n        rainfall: 5.4\n    },\n    {\n        windSpeed: 21.7,\n        rainfall: 2\n    },\n    {\n        windSpeed: 10.9,\n        rainfall: 8.2\n    }\n];\n\nconst ChartContainer = () => (\n    <Chart>\n        <ChartTitle text=\"Wind Speed vs. Rainfall\" />\n        <ChartSeries>\n            <ChartSeriesItem type=\"scatterLine\" data={data} xField=\"rainfall\" yField=\"windSpeed\" />\n        </ChartSeries>\n        <ChartXAxis>\n            <ChartXAxisItem>\n                <ChartXAxisNotes\n                    data={[\n                        { value: 1, label: { text: 'Note 1' } },\n                        { value: 2, label: { text: 'Note 2' } }\n                    ]}\n                />\n            </ChartXAxisItem>\n        </ChartXAxis>\n    </Chart>\n);\n\nexport default ChartContainer;\n\n```\n\n\n## Additional Context\n### ChartXAxisNotes.ChartXAxisNotes.props (children)\nname: props\nfullName: ChartXAxisNotes.ChartXAxisNotes.props\nsyntax:\n  return:\n    type: ChartXAxisNotesProps\n\n\n## API Reference Item\n- Name: ChartSeriesDefaultsNotes\n- Type: Function\n- Summary: Represents the KendoReact ChartSeriesDefaultsNotes component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Chart, ChartSeries, ChartSeriesItem, ChartSeriesDefaults } from '@progress/kendo-react-charts';\n\nconst seriesData = [{ value: 2 }, { value: 4, extremum: 'Max' }, { value: 3 }, { value: 1, extremum: 'Min' }];\nconst App = () => (\n    <Chart>\n        <ChartSeriesDefaults notes={{ line: { color: 'red' } }} />\n        <ChartSeries>\n            <ChartSeriesItem type=\"line\" data={seriesData} field=\"value\" noteTextField=\"extremum\" />\n        </ChartSeries>\n    </Chart>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ChartSeriesDefaultsNotes.ChartSeriesDefaultsNotes.props (children)\nname: props\nfullName: ChartSeriesDefaultsNotes.ChartSeriesDefaultsNotes.props\nsyntax:\n  return:\n    type: ChartSeriesDefaultsNotesProps\n\n\nThe  Line Chart   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\" Use text labels along the horizontal axis.\nUse a few numerical labels along the horizontal axis.\nUse time scales along the horizontal axis.\n\nLine Style\n\nLine charts enable you to render the lines between the points in different styles. To set the appearance of the lines, use the <a href=\"/kendo-react-ui-develop/components/charts/api/chartseriesitemprops#style\">style</a> option which provides the following available styles:\n\nThe  Bullet Chart   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\"\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "Button": "## API Reference Item\n- Name: ButtonProps.selected\n- Type: Property\n- Summary: Sets the selected state of the Button. You can use this for controlled mode.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    const [isSelected, setIsSelected] = React.useState(false);\n\n    const handleClick = () => {\n        setIsSelected(!isSelected)\n    }\n    \n    return (\n        <Button selected={isSelected} togglable={true} onClick={handleClick}>\n            Selected Button\n        </Button>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Button\n- Type: Function\n- Summary: \n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return(\n        <Button>Button</Button>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ButtonProps (children)\nname: ButtonProps\nfullName: ButtonProps\nsummary: \"Represents the props of the [KendoReact Button component]({% slug overview_button %}).\\r\\nExtends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).\"\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - about\n  - accessKey\n  - aria-activedescendant\n  - aria-atomic\n  - aria-autocomplete\n  - aria-braillelabel\n  - aria-brailleroledescription\n  - aria-busy\n  - aria-checked\n  - aria-colcount\n  - aria-colindex\n  - aria-colindextext\n  - aria-colspan\n  - aria-controls\n  - aria-current\n  - aria-describedby\n  - aria-description\n  - aria-details\n  - aria-disabled\n  - aria-dropeffect\n  - aria-errormessage\n  - aria-expanded\n  - aria-flowto\n  - aria-grabbed\n  - aria-haspopup\n  - aria-hidden\n  - aria-invalid\n  - aria-keyshortcuts\n  - aria-label\n  - aria-labelledby\n  - aria-level\n  - aria-live\n  - aria-modal\n  - aria-multiline\n  - aria-multiselectable\n  - aria-orientation\n  - aria-owns\n  - aria-placeholder\n  - aria-posinset\n  - aria-pressed\n  - aria-readonly\n  - aria-relevant\n  - aria-required\n  - aria-roledescription\n  - aria-rowcount\n  - aria-rowindex\n  - aria-rowindextext\n  - aria-rowspan\n  - aria-selected\n  - aria-setsize\n  - aria-sort\n  - aria-valuemax\n  - aria-valuemin\n  - aria-valuenow\n  - aria-valuetext\n  - autoCapitalize\n  - autoCorrect\n  - autoFocus\n  - autoSave\n  - className\n  - color\n  - content\n  - contentEditable\n  - contextMenu\n  - dangerouslySetInnerHTML\n  - datatype\n  - defaultChecked\n  - defaultValue\n  - dir\n  - disabled\n  - draggable\n  - endIcon\n  - enterKeyHint\n  - exportparts\n  - fillMode\n  - form\n  - formAction\n  - formEncType\n  - formMethod\n  - formNoValidate\n  - formTarget\n  - hidden\n  - icon\n  - iconClass\n  - iconSize\n  - id\n  - imageAlt\n  - imageUrl\n  - inert\n  - inlist\n  - inputMode\n  - is\n  - itemID\n  - itemProp\n  - itemRef\n  - itemScope\n  - itemType\n  - lang\n  - name\n  - nonce\n  - onAbort\n  - onAbortCapture\n  - onAnimationEnd\n  - onAnimationEndCapture\n  - onAnimationIteration\n  - onAnimationIterationCapture\n  - onAnimationStart\n  - onAnimationStartCapture\n  - onAuxClick\n  - onAuxClickCapture\n  - onBeforeInput\n  - onBeforeInputCapture\n  - onBeforeToggle\n  - onBlur\n  - onBlurCapture\n  - onCanPlay\n  - onCanPlayCapture\n  - onCanPlayThrough\n  - onCanPlayThroughCapture\n  - onChange\n  - onChangeCapture\n  - onClick\n  - onClickCapture\n  - onCompositionEnd\n  - onCompositionEndCapture\n  - onCompositionStart\n  - onCompositionStartCapture\n  - onCompositionUpdate\n  - onCompositionUpdateCapture\n  - onContextMenu\n  - onContextMenuCapture\n  - onCopy\n  - onCopyCapture\n  - onCut\n  - onCutCapture\n  - onDoubleClick\n  - onDoubleClickCapture\n  - onDrag\n  - onDragCapture\n  - onDragEnd\n  - onDragEndCapture\n  - onDragEnter\n  - onDragEnterCapture\n  - onDragExit\n  - onDragExitCapture\n  - onDragLeave\n  - onDragLeaveCapture\n  - onDragOver\n  - onDragOverCapture\n  - onDragStart\n  - onDragStartCapture\n  - onDrop\n  - onDropCapture\n  - onDurationChange\n  - onDurationChangeCapture\n  - onEmptied\n  - onEmptiedCapture\n  - onEncrypted\n  - onEncryptedCapture\n  - onEnded\n  - onEndedCapture\n  - onError\n  - onErrorCapture\n  - onFocus\n  - onFocusCapture\n  - onGotPointerCapture\n  - onGotPointerCaptureCapture\n  - onInput\n  - onInputCapture\n  - onInvalid\n  - onInvalidCapture\n  - onKeyDown\n  - onKeyDownCapture\n  - onKeyPress\n  - onKeyPressCapture\n  - onKeyUp\n  - onKeyUpCapture\n  - onLoad\n  - onLoadCapture\n  - onLoadStart\n  - onLoadStartCapture\n  - onLoadedData\n  - onLoadedDataCapture\n  - onLoadedMetadata\n  - onLoadedMetadataCapture\n  - onLostPointerCapture\n  - onLostPointerCaptureCapture\n  - onMouseDown\n  - onMouseDownCapture\n  - onMouseEnter\n  - onMouseLeave\n  - onMouseMove\n  - onMouseMoveCapture\n  - onMouseOut\n  - onMouseOutCapture\n  - onMouseOver\n  - onMouseOverCapture\n  - onMouseUp\n  - onMouseUpCapture\n  - onPaste\n  - onPasteCapture\n  - onPause\n  - onPauseCapture\n  - onPlay\n  - onPlayCapture\n  - onPlaying\n  - onPlayingCapture\n  - onPointerCancel\n  - onPointerCancelCapture\n  - onPointerDown\n  - onPointerDownCapture\n  - onPointerEnter\n  - onPointerLeave\n  - onPointerMove\n  - onPointerMoveCapture\n  - onPointerOut\n  - onPointerOutCapture\n  - onPointerOver\n  - onPointerOverCapture\n  - onPointerUp\n  - onPointerUpCapture\n  - onProgress\n  - onProgressCapture\n  - onRateChange\n  - onRateChangeCapture\n  - onReset\n  - onResetCapture\n  - onScroll\n  - onScrollCapture\n  - onScrollEnd\n  - onScrollEndCapture\n  - onSeeked\n  - onSeekedCapture\n  - onSeeking\n  - onSeekingCapture\n  - onSelect\n  - onSelectCapture\n  - onStalled\n  - onStalledCapture\n  - onSubmit\n  - onSubmitCapture\n  - onSuspend\n  - onSuspendCapture\n  - onTimeUpdate\n  - onTimeUpdateCapture\n  - onToggle\n  - onTouchCancel\n  - onTouchCancelCapture\n  - onTouchEnd\n  - onTouchEndCapture\n  - onTouchMove\n  - onTouchMoveCapture\n  - onTouchStart\n  - onTouchStartCapture\n  - onTransitionCancel\n  - onTransitionCancelCapture\n  - onTransitionEnd\n  - onTransitionEndCapture\n  - onTransitionRun\n  - onTransitionRunCapture\n  - onTransitionStart\n  - onTransitionStartCapture\n  - onVolumeChange\n  - onVolumeChangeCapture\n  - onWaiting\n  - onWaitingCapture\n  - onWheel\n  - onWheelCapture\n  - part\n  - popover\n  - popoverTarget\n  - popoverTargetAction\n  - prefix\n  - property\n  - radioGroup\n  - rel\n  - resource\n  - results\n  - rev\n  - role\n  - rounded\n  - security\n  - selected\n  - size\n  - slot\n  - spellCheck\n  - startIcon\n  - style\n  - suppressContentEditableWarning\n  - suppressHydrationWarning\n  - svgIcon\n  - tabIndex\n  - themeColor\n  - title\n  - togglable\n  - translate\n  - type\n  - typeof\n  - unselectable\n  - unstyled\n  - value\n  - vocab\n\n---\n### Button.Button.props (children)\nname: props\nfullName: Button.Button.props\nsyntax:\n  return:\n    type: ButtonProps | RefAttributes\n\n\nAdd a Loader to indicate that data is being fetched for a <a href=\"/kendo-react-ui/components/grid\">Grid</a>.\nShow unread notifications with a Badge on an <a href=\"/kendo-react-ui/components/layout/appbar\">AppBar</a> or <a href=\"/kendo-react-ui/components/buttons/button\">Button</a>.\nImprove UX with Skeleton placeholders for a <a href=\"/kendo-react-ui/components/layout/card\">Card</a> with profile details while data loads.\n\nKey Features\n\nThe KendoReact Dialogs provide the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance\n\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a> Fully customizable <a href=\"/kendo-react-ui/components/dialogs/dialog/action-buttons\">Action Buttons</a>\nFlexible <a href=\"/kendo-react-ui/components/dialogs/dialog/title\">Title customization</a>\nAdjustable dimensions via the width and height properties\n<a href=\"/kendo-react-ui/components/dialogs/globalization\">Globalization</a>\nOut-of-the-box accessibility and keyboard navigation\n\nHow Do the KendoReact Dialogs Work?\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n",
    "AutoComplete": "## API Reference Item\n- Name: AutoCompleteProps.suggest\n- Type: Property\n- Summary: Enables the auto-completion of the text based on the first data item ([see example]({% slug suggestions_autocomplete %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AutoComplete } from '@progress/kendo-react-dropdowns';\n\nconst methods = ['GET', 'POST'];\n\nexport default function App() {\n    return <AutoComplete data={methods} suggest={true} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: AutoCompleteProps.skipDisabledItems\n- Type: Property\n- Summary: Defines if AutoComplete's disabled items will be skipped or focused when navigating through the list of items using a keyboard. Defaults to \n`true`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AutoComplete } from '@progress/kendo-react-dropdowns';\nimport { text } from 'stream/consumers';\n\nconst animals = [\n    { id: 1, text: 'Dog' },\n    { id: 2, text: 'Cat', disabled: true }\n];\n\nexport default function App() {\n    return <AutoComplete data={animals} dataItemKey=\"id\" textField=\"text\" skipDisabledItems={false} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: AutoCompleteProps.data\n- Type: Property\n- Summary: Sets the data of the AutoComplete ([more information and example]({% slug binding_autocomplete %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AutoComplete } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    return (\n        <AutoComplete data={['Apple', 'Banana', 'Cherry']} />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: AutoCompleteProps.loading\n- Type: Property\n- Summary: Sets the loading state of the AutoComplete ([see example]({% slug filtering_autocomplete %}#toc-basic-configuration)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AutoComplete } from '@progress/kendo-react-dropdowns';\n\nconst networks = ['WiFi', 'Ethernet'];\n\nexport default function App() {\n    return <AutoComplete data={networks} loading={true} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: AutoCompleteProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact AutoComplete component]({% slug overview_autocomplete %}).\n- Syntax: \n\n## Additional Context\n### AutoCompleteProps.accessKey (children)\nname: accessKey\nfullName: AutoCompleteProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the AutoComplete.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.adaptive (children)\nname: adaptive\nfullName: AutoCompleteProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: AutoCompleteProps.adaptiveSubtitle\nsummary: \"Specifies the text that is rendered as subtitle in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: AutoCompleteProps.adaptiveTitle\nsummary: \"Specifies the text that is rendered as title in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\\r\\nIf not provided, the title will be the same as the label.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: AutoCompleteProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: AutoCompleteProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.className (children)\nname: className\nfullName: AutoCompleteProps.className\nsummary: Sets additional classes to the AutoComplete.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.clearButton (children)\nname: clearButton\nfullName: AutoCompleteProps.clearButton\nsummary: \"By default, the AutoComplete renders a button on hovering over the component, which resets the value.\\r\\nIf \\n`clearButton`\\n is set to \\n`false`\\n, the button will not be rendered.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.dataItemKey (children)\nname: dataItemKey\nfullName: AutoCompleteProps.dataItemKey\nsummary: |-\n  Sets the key for comparing the data items of the AutoComplete. If \n  `dataItemKey`\n   is not set, the AutoComplete compares the items by reference.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.defaultValue (children)\nname: defaultValue\nfullName: AutoCompleteProps.defaultValue\nsummary: |-\n  Sets the default value of the AutoComplete. Similar to the native \n  `input`\n   HTML element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.dir (children)\nname: dir\nfullName: AutoCompleteProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.disabled (children)\nname: disabled\nfullName: AutoCompleteProps.disabled\nsummary: Sets the disabled state of the AutoComplete.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.fillMode (children)\nname: fillMode\nfullName: AutoCompleteProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the AutoComplete.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- flat\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.focusedItemIndex (children)\nname: focusedItemIndex\nfullName: AutoCompleteProps.focusedItemIndex\nsummary: \"If set, the AutoComplete will use it to get the focused item index.\\r\\n\\r\\nDefault functionality returns the first item which starts with the input text.\"\nsyntax:\n  return:\n    type: '(data: any, inputText: string, textField?: string) => number'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.footer (children)\nname: footer\nfullName: AutoCompleteProps.footer\nsummary: >-\n  Sets the footer component of the AutoComplete ([see example]({% slug\n  customrendering_autocomplete %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.groupField (children)\nname: groupField\nfullName: AutoCompleteProps.groupField\nsummary: >-\n  Sets the data item field that represents the start of a group. Applicable to\n  objects data.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.groupHeaderItemRender (children)\nname: groupHeaderItemRender\nfullName: AutoCompleteProps.groupHeaderItemRender\nsummary: >-\n  Fires when a AutoComplete group header item is about to be rendered. Used to\n  override the default appearance of the group's headers.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListGroupItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.groupStickyHeaderItemRender (children)\nname: groupStickyHeaderItemRender\nfullName: AutoCompleteProps.groupStickyHeaderItemRender\nsummary: >-\n  Fires when a AutoComplete sticky group header item is about to be rendered.\n  Used to override the default appearance of the sticky group header of the\n  component.\nsyntax:\n  return:\n    type: >-\n      (div: ReactElement<HTMLDivElement, string | JSXElementConstructor<any>>,\n      stickyHeaderProps: GroupStickyHeaderProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.header (children)\nname: header\nfullName: AutoCompleteProps.header\nsummary: >-\n  Sets the header component of the AutoComplete ([see example]({% slug\n  customrendering_autocomplete %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.id (children)\nname: id\nfullName: AutoCompleteProps.id\nsummary: Specifies the id of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.inputAttributes (children)\nname: inputAttributes\nfullName: AutoCompleteProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.label (children)\nname: label\nfullName: AutoCompleteProps.label\nsummary: Renders a floating label for the AutoComplete.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.listNoDataRender (children)\nname: listNoDataRender\nfullName: AutoCompleteProps.listNoDataRender\nsummary: >-\n  Fires when the element which indicates no data in the popup is about to be\n  rendered ([see example]({% slug customrendering_autocomplete %}#toc-no-data)).\n  Used to override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLDivElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.name (children)\nname: name\nfullName: AutoCompleteProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.onBlur (children)\nname: onBlur\nfullName: AutoCompleteProps.onBlur\nsummary: Fires each time the AutoComplete gets blurred.\nsyntax:\n  return:\n    type: '(event: AutoCompleteBlurEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onChange (children)\nname: onChange\nfullName: AutoCompleteProps.onChange\nsummary: >-\n  Fires each time the value of the AutoComplete is about to change ([more\n  information and example]({% slug binding_autocomplete %})).\nsyntax:\n  return:\n    type: '(event: AutoCompleteChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onClose (children)\nname: onClose\nfullName: AutoCompleteProps.onClose\nsummary: Fires each time the popup of the AutoComplete is about to close.\nsyntax:\n  return:\n    type: '(event: AutoCompleteCloseEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onFocus (children)\nname: onFocus\nfullName: AutoCompleteProps.onFocus\nsummary: Fires each time the user focuses the AutoComplete.\nsyntax:\n  return:\n    type: '(event: AutoCompleteFocusEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onOpen (children)\nname: onOpen\nfullName: AutoCompleteProps.onOpen\nsummary: Fires each time the popup of the AutoComplete is about to open.\nsyntax:\n  return:\n    type: '(event: AutoCompleteOpenEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.opened (children)\nname: opened\nfullName: AutoCompleteProps.opened\nsummary: Sets the opened and closed state of the AutoComplete.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.placeholder (children)\nname: placeholder\nfullName: AutoCompleteProps.placeholder\nsummary: The hint that is displayed when the AutoComplete is empty.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.popupSettings (children)\nname: popupSettings\nfullName: AutoCompleteProps.popupSettings\nsummary: Configures the popup of the AutoComplete.\nsyntax:\n  return:\n    type: DropDownsPopupSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.prefix (children)\nname: prefix\nfullName: AutoCompleteProps.prefix\nsummary: Sets a custom prefix to the AutoComplete component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.readonly (children)\nname: readonly\nfullName: AutoCompleteProps.readonly\nsummary: Sets the read-only state of the AutoComplete.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.required (children)\nname: required\nfullName: AutoCompleteProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.rounded (children)\nname: rounded\nfullName: AutoCompleteProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the AutoComplete.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.size (children)\nname: size\nfullName: AutoCompleteProps.size\nsummary: \"Configures the \\n`size`\\n of the AutoComplete.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.style (children)\nname: style\nfullName: AutoCompleteProps.style\nsummary: The styles that are applied to the AutoComplete.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.suffix (children)\nname: suffix\nfullName: AutoCompleteProps.suffix\nsummary: Sets a custom suffix to the AutoComplete component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.tabIndex (children)\nname: tabIndex\nfullName: AutoCompleteProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the AutoComplete.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.textField (children)\nname: textField\nfullName: AutoCompleteProps.textField\nsummary: >-\n  Sets the data item field that represents the item text ([see example]({% slug\n  binding_autocomplete %}#toc-datasets-of-objects)). If the data contains only\n  primitive values, do not define it.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.valid (children)\nname: valid\nfullName: AutoCompleteProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.validationMessage (children)\nname: validationMessage\nfullName: AutoCompleteProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.validityStyles (children)\nname: validityStyles\nfullName: AutoCompleteProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.value (children)\nname: value\nfullName: AutoCompleteProps.value\nsummary: >-\n  Sets the value of the AutoComplete ([more information and example]({% slug\n  binding_autocomplete %})).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.valueRender (children)\nname: valueRender\nfullName: AutoCompleteProps.valueRender\nsummary: >-\n  Fires when the AutoComplete input element is about to be rendered. Use it to\n  override the default appearance of the component.\nsyntax:\n  return:\n    type: >-\n      (rendering: ReactElement<HTMLSpanElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n\n## API Reference Item\n- Name: AutoCompleteProps.itemRender\n- Type: Property\n- Summary: Fires when an AutoComplete list item is about to be rendered ([see example]({% slug customrendering_autocomplete %}#toc-items)). Used to override the default appearance of the list items.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AutoComplete } from '@progress/kendo-react-dropdowns';\n\nconst regions = [\n    { id: 1, text: 'North America', category: 'Continent' },\n    { id: 2, text: 'Europe', category: 'Continent' },\n    { id: 3, text: 'Asia', category: 'Continent' }\n];\nconst itemRender = (li, itemProps) => {\n    const itemChildren = (\n        <>\n            <strong>{itemProps.dataItem.category}</strong>: {itemProps.dataItem.text}\n        </>\n    );\n    return React.cloneElement(li, li.props, itemChildren);\n};\nexport default function App() {\n    return <AutoComplete data={regions} dataItemKey=\"id\" textField=\"text\" itemRender={itemRender} />;\n}\n\n```\n\n\n## Additional Context\n### ListItemProps (generic)\nname: ListItemProps\nfullName: ListItemProps\nsummary: Represents the props of the ListItem component.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - dataItem\n  - disabled\n  - focused\n  - group\n  - groupMode\n  - id\n  - index\n  - onClick\n  - render\n  - selected\n  - textField\n\n\nCustom Rendering\n\nThe AutoComplete provides options for customizing the way it renders its elements.\nThe AutoComplete utilizes custom renderers which enable you to moderate the content of its:\n\nSuggestion list items\nHeader and footer elements\nSuggestion list when no data is available\n\nItems\n\nTo customize the content of each suggestion list item, use the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/autocompleteprops#itemrender\">itemRender</a> prop.\nThe following example demonstrates how to set the itemRender prop of the AutoComplete and customize the list elements.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThis   is   a  Free React  AutoCompleteThe KendoReact  AutoComplete   is  free to use, including in production‚Äîno sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the AutoComplete in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... <a href=\"/kendo-react-ui-develop/components/dropdowns/globalization\">Globalization</a>‚ÄîThe built-in globalization support allows you to create apps that are ready to be implemented worldwide.\n<a href=\"/kendo-react-ui-develop/components/dropdowns/autocomplete/keyboard-navigation\">Keyboard navigation</a>‚ÄîThe AutoComplete supports various keyboard shortcuts.\n<a href=\"/kendo-react-ui-develop/components/dropdowns/autocomplete/accessibility/wai-aria-support\">Accessibility</a>‚ÄîThe AutoComplete is accessible for screen readers and supports WAI-ARIA attributes.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned‚Äîregardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)‚Äîyou should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given‚Äîalways normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n‚úÖ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n‚ùå Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n‚úÖ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n‚ùå Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField ‚Üí use the select state property\n- editField ‚Üí use the edit state property\n- expandedField ‚Üí use the detailExpand state property\n- onExpandChange ‚Üí use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender ‚Üí use the cells={{ data: CustomCell }} prop\n- rowRender ‚Üí use the rows={{ data: CustomRow }} prop\n- filterCellRender ‚Üí use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender ‚Üí use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell ‚Üí use the column.cells={{ data: CustomCell }} prop\n- column.headerCell ‚Üí use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell ‚Üí use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell ‚Üí use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n‚ùå Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n‚úÖ Modern: Use select and edit state properties with proper configuration\n"
  }
}