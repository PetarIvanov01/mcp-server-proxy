{
  "code": {
    "imports": [
      "import React from 'react';",
      "import { AppBar, AppBarSection, AppBarSpacer, Card, CardHeader, CardBody, PanelBar, PanelBarItem, Avatar as KendoAvatar, Breadcrumb } from '@progress/kendo-react-layout';",
      "import { StackLayout } from '@progress/kendo-react-layout';",
      "import { Button, DropDownButton, Chip } from '@progress/kendo-react-buttons';",
      "import { Badge } from '@progress/kendo-react-indicators';",
      "import { DropDownList } from '@progress/kendo-react-dropdowns';",
      "import { AutoComplete } from '@progress/kendo-react-dropdowns';",
      "import { ListView } from '@progress/kendo-react-listview';",
      "import { Switch } from '@progress/kendo-react-inputs';",
      "import { Menu } from '@progress/kendo-react-layout';",
      "import { ProgressBar } from '@progress/kendo-react-progressbars';",
      "import { Form, Field, FormElement, FieldWrapper } from '@progress/kendo-react-form';",
      "import { DateRangePicker } from '@progress/kendo-react-dateinputs';",
      "import { Input } from '@progress/kendo-react-inputs';",
      "import { Grid, GridColumn as Column, GridToolbar } from '@progress/kendo-react-grid';",
      "import { Pager } from '@progress/kendo-react-data-tools';",
      "import { Sparkline } from '@progress/kendo-react-charts';",
      "import { Tooltip } from '@progress/kendo-react-tooltip';",
      "import { Chart, ChartSeries, ChartSeriesItem, ChartCategoryAxis, ChartCategoryAxisItem, ChartLegend, ChartTooltip as KChartTooltip, ChartArea } from '@progress/kendo-react-charts';",
      "import { SvgIcon } from '@progress/kendo-react-common';",
      "import { plusIcon, bellIcon, questionCircleIcon, downloadIcon } from '@progress/kendo-svg-icons';",
      "import { Notification, NotificationGroup } from '@progress/kendo-react-notification';",
      "import { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';",
      "import { Skeleton } from '@progress/kendo-react-indicators';"
    ],
    "mainComponent": "export default function SaaSDashboardShell() {\n  const [themeDark, setThemeDark] = React.useState(false);\n  const [notifOpen, setNotifOpen] = React.useState(false);\n  const [notifItems, setNotifItems] = React.useState([\n    { id: 1, title: 'Payment received', snippet: 'Invoice #1842 paid', timestamp: '2m', read: false },\n    { id: 2, title: 'New signup', snippet: 'Alice joined plan Pro', timestamp: '1h', read: false },\n    { id: 3, title: 'Export ready', snippet: 'Your CSV export is complete', timestamp: '3h', read: true }\n  ]);\n  const unread = notifItems.filter(n => !n.read).length;\n  const [helpOpen, setHelpOpen] = React.useState(false);\n  const [userMenuOpen, setUserMenuOpen] = React.useState(false);\n  const user = { name: 'Jordan Lee', role: 'Admin', avatarUrl: 'https://i.pravatar.cc/80?img=13' };\n  const orgs = [\n    { id: 'acme', name: 'Acme Inc.', logo: 'https://dummyimage.com/24x24/111827/ffffff&text=A' },\n    { id: 'globex', name: 'Globex', logo: 'https://dummyimage.com/24x24/2563eb/ffffff&text=G' },\n    { id: 'initech', name: 'Initech', logo: 'https://dummyimage.com/24x24/16a34a/ffffff&text=I' }\n  ];\n  const [org, setOrg] = React.useState(orgs[0]);\n  const [globalSearch, setGlobalSearch] = React.useState('');\n  const searchData = ['Customers', 'Invoices', 'Transactions', 'MRR Report', 'AR Aging', 'Settings'];\n\n  // Filters\n  const [dateRange, setDateRange] = React.useState({ start: new Date(new Date().setDate(new Date().getDate()-29)), end: new Date() });\n  const segments = [\n    { id: 'all', label: 'All segments' },\n    { id: 'pro', label: 'Pro' },\n    { id: 'enterprise', label: 'Enterprise' },\n    { id: 'trial', label: 'Trial' }\n  ];\n  const [segment, setSegment] = React.useState(segments[0]);\n  const [keyword, setKeyword] = React.useState('');\n\n  // KPI mock\n  const kpis = [\n    { key: 'MRR', title: 'Monthly Recurring Revenue', value: 128540, delta: 5.2, series: [95,98,102,105,110,115,118,120,122,128], note: 'MRR = sum of monthly subscription revenue' },\n    { key: 'ARR', title: 'Annual Recurring Revenue', value: 1542480, delta: 4.1, series: [1200,1240,1290,1330,1380,1420,1470,1490,1520,1542] },\n    { key: 'ACTIVE', title: 'Active Users', value: 18432, delta: 2.7, series: [15,15.2,15.6,16,16.4,16.9,17.3,17.9,18.2,18.4] },\n    { key: 'CHURN', title: 'Churn Rate', value: 3.1, delta: -0.4, series: [4.2,4.1,3.9,3.8,3.6,3.5,3.3,3.2,3.1,3.1] }\n  ];\n\n  // Charts mock\n  const categories = Array.from({length: 30}, (_,i)=>`Day ${i+1}`);\n  const revenueSeries = [\n    { name: 'MRR', data: [95,96,98,99,100,102,104,105,106,108,110,112,113,115,116,118,119,120,121,123,124,125,126,127,128,129,130,131,132,133] },\n    { name: 'Expansion', data: [5,5,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20] }\n  ];\n  const [showLegend, setShowLegend] = React.useState(true);\n  const [userChartType, setUserChartType] = React.useState('area');\n\n  // Grid mock\n  const [txPage, setTxPage] = React.useState({ skip: 0, take: 10 });\n  const [txSearch, setTxSearch] = React.useState('');\n  const txAll = Array.from({ length: 128 }).map((_, i) => ({\n    id: i+1,\n    date: new Date(2025, 8, 1 + (i%28)),\n    customer: { name: `Customer ${i+1}`, avatar: `https://i.pravatar.cc/40?img=${(i%70)+1}` },\n    plan: ['Pro','Enterprise','Starter'][i%3],\n    amount: ((i%5)+1) * 49.0 + (i%3)*10,\n    status: ['Paid','Pending','Failed'][i%3],\n    method: ['Card','PayPal','Bank'][i%3]\n  }));\n  const filteredTx = txAll.filter(r => r.customer.name.toLowerCase().includes(txSearch.toLowerCase()));\n  const pageData = filteredTx.slice(txPage.skip, txPage.skip + txPage.take);\n\n  // Notification/Toasts\n  const [toasts, setToasts] = React.useState([{ id: 't1', type: 'success', text: 'Welcome back!' }]);\n  const removeToast = id => setToasts(prev => prev.filter(t => t.id !== id));\n\n  // Dialog\n  const [dialog, setDialog] = React.useState({ open: false, title: '', action: '' });\n\n  const formatCurrency = v => v.toLocaleString(undefined, { style: 'currency', currency: 'USD' });\n\n  return (\n    <div className={`min-h-screen bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100`}>\n      {/* Header */}\n      <AppBar className=\"sticky top-0 z-40 bg-white/80 dark:bg-gray-800/80 backdrop-blur border-b border-gray-200 dark:border-gray-700 shadow-sm\">\n        <AppBarSection>\n          <div className=\"flex items-center gap-3\">\n            <KendoAvatar type=\"image\" rounded=\"medium\">\n              <img className=\"h-8 w-8 rounded-md shadow-sm\" src=\"https://dummyimage.com/64x64/111827/ffffff&text=A\" alt=\"Acme\" />\n            </KendoAvatar>\n            <span className=\"text-lg font-semibold tracking-tight\">Acme Analytics</span>\n          </div>\n        </AppBarSection>\n        <AppBarSpacer style={{ width: 16 }} />\n        <AppBarSection className=\"hidden md:flex flex-1 max-w-xl mx-6\">\n          <AutoComplete\n            className=\"w-full\"\n            data={searchData}\n            placeholder=\"Search...\"\n            value={globalSearch}\n            onChange={e => setGlobalSearch(e.value)}\n            clearButton\n          />\n        </AppBarSection>\n        <AppBarSpacer />\n        <AppBarSection className=\"flex items-center gap-2 ml-auto\">\n          <div className=\"relative\">\n            <Button fillMode=\"flat\" onClick={()=>setNotifOpen(p=>!p)} className=\"relative p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700\" aria-label=\"Notifications\">\n              <SvgIcon icon={bellIcon} />\n            </Button>\n            {unread > 0 && (\n              <span className=\"absolute -top-0.5 -right-0.5 bg-red-600 text-white text-xs px-1.5 py-0.5 rounded-full shadow\">{unread}</span>\n            )}\n            {notifOpen && (\n              <div className=\"absolute right-0 mt-2 w-80 max-h-96 overflow-auto bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-2\">\n                <ListView\n                  className=\"divide-y divide-gray-200 dark:divide-gray-700\"\n                  data={notifItems}\n                  item={(props)=> {\n                    const it = props.dataItem;\n                    return (\n                      <div className=\"p-2 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700\" onClick={()=>{\n                        setNotifItems(prev=>prev.map(n=> n.id===it.id ? { ...n, read: true } : n));\n                        setNotifOpen(false);\n                      }}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"font-medium\">{it.title}</div>\n                          <span className=\"text-xs text-gray-500\">{it.timestamp}</span>\n                        </div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-300\">{it.snippet}</div>\n                        {!it.read && <span className=\"inline-block mt-1 h-2 w-2 rounded-full bg-blue-600\" />}\n                      </div>\n                    );\n                  }}\n                />\n              </div>\n            )}\n          </div>\n          <Button fillMode=\"flat\" className=\"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={()=>setHelpOpen(p=>!p)} aria-label=\"Help\">\n            <SvgIcon icon={questionCircleIcon} />\n          </Button>\n          <Switch className=\"mx-2\" checked={themeDark} onChange={(e)=>setThemeDark(e.value)} ariaLabel=\"Toggle theme\" />\n          <div className=\"relative flex items-center gap-2\">\n            <KendoAvatar type=\"image\" rounded=\"full\" border>\n              <img className=\"h-8 w-8 rounded-full ring-2 ring-white dark:ring-gray-800\" src={user.avatarUrl} alt={user.name} />\n            </KendoAvatar>\n            <DropDownButton\n              text={`${user.name} • ${user.role}`}\n              items={[{ text: 'Profile' }, { text: 'Settings' }, { text: 'Sign out' }]}\n              onItemClick={(e)=>{\n                if (e.item?.text === 'Sign out') setToasts(prev=>[{ id: Date.now()+'' , type:'info', text:'Signing out...' }, ...prev]);\n              }}\n            />\n          </div>\n        </AppBarSection>\n      </AppBar>\n\n      {/* Body: Sidebar + Main */}\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside className=\"hidden md:flex md:flex-col w-64 shrink-0 bg-white dark:bg-gray-850 border-r border-gray-200 dark:border-gray-700 transition-all duration-200\">\n          <div className=\"m-3 self-end\">\n            <Button fillMode=\"flat\" className=\"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700\" aria-label=\"Collapse sidebar\">≡</Button>\n          </div>\n          <div className=\"mx-3 mb-2\">\n            <DropDownList\n              data={orgs}\n              textField=\"name\"\n              dataItemKey=\"id\"\n              value={org}\n              onChange={(e)=>setOrg(e.value)}\n              valueRender={(el, value)=> (\n                <div className=\"flex items-center gap-2\">\n                  <img src={value.logo} alt=\"logo\" className=\"h-4 w-4 rounded\" />\n                  <span>{value.name}</span>\n                </div>\n              )}\n              itemRender={(li, itemProps)=> React.cloneElement(li, {}, (\n                <div className=\"flex items-center gap-2\">\n                  <img src={itemProps.dataItem.logo} alt=\"logo\" className=\"h-4 w-4 rounded\" />\n                  <span>{itemProps.dataItem.name}</span>\n                </div>\n              ))}\n            />\n          </div>\n          <nav className=\"flex-1 overflow-y-auto px-2\">\n            <StackLayout orientation=\"vertical\" gap={8}>\n              <a className=\"px-2 py-2 rounded-md bg-gray-100 dark:bg-gray-700 font-medium\" href=\"#\">Dashboard</a>\n              <a className=\"px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700\" href=\"#\">Analytics</a>\n              <a className=\"px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700\" href=\"#\">Transactions</a>\n              <a className=\"px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700\" href=\"#\">Customers</a>\n              <a className=\"px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700\" href=\"#\">Billing</a>\n              <a className=\"px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700\" href=\"#\">Settings</a>\n            </StackLayout>\n          </nav>\n          <div className=\"p-3 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"text-xs text-gray-500\">v2.3.1</div>\n            <ProgressBar value={62} labelVisible className=\"mt-2\" />\n          </div>\n        </aside>\n\n        {/* Main */}\n        <main className=\"flex-1 min-w-0\">\n          {/* Page header */}\n          <section className=\"px-4 sm:px-6 lg:px-10 py-6\">\n            <div className=\"flex items-center justify-between flex-wrap gap-4\">\n              <div className=\"flex items-center gap-3\">\n                <h1 className=\"text-2xl font-bold tracking-tight\">Dashboard</h1>\n                <Breadcrumb data={[{ id:'home', text:'Home' }, { id:'dash', text:'Dashboard' }]} />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button className=\"bg-gray-900 hover:bg-black text-white px-3 py-2 rounded-md dark:bg-gray-100 dark:text-gray-900 dark:hover:bg-white\" onClick={()=> setToasts(prev=>[{ id: Date.now()+'' , type:'success', text:'Data refreshed' }, ...prev])}>Refresh</Button>\n                <DropDownButton\n                  className=\"relative\"\n                  text=\"Export\"\n                  items={[{ text: 'CSV' }, { text: 'XLSX' }, { text: 'PDF' }]}\n                  onItemClick={(e)=> setToasts(prev=>[{ id: Date.now()+'' , type:'info', text:`Exporting ${e.item.text}...` }, ...prev])}\n                />\n              </div>\n            </div>\n            {/* Filters */}\n            <Form\n              initialValues={{}}\n              render={() => (\n                <FormElement>\n                  <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <DateRangePicker className=\"w-full\" value={dateRange} onChange={(e)=> setDateRange(e.value)} />\n                    <DropDownList className=\"w-full\" data={segments} textField=\"label\" dataItemKey=\"id\" value={segment} onChange={(e)=> setSegment(e.value)} />\n                    <Input className=\"w-full\" value={keyword} onChange={(e)=> setKeyword(e.value)} placeholder=\"Keyword search\" />\n                  </div>\n                </FormElement>\n              )}\n            />\n          </section>\n\n          {/* KPI Grid */}\n          <section className=\"px-4 sm:px-6 lg:px-10 pb-6\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6\">\n              {kpis.map(k => (\n                <Tooltip key={k.key} content={k.note}>\n                  <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700 hover:shadow-lg transition-shadow\">\n                    <div className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{k.title}</div>\n                    <div className=\"mt-2 text-3xl font-semibold\">{k.key==='CHURN' ? `${k.value.toFixed(1)}%` : formatCurrency(k.value)}</div>\n                    <div className={`mt-1 flex items-center gap-2 ${k.delta>=0 ? 'text-green-600' : 'text-red-600'}`}>{k.delta>=0?'▲':'▼'} {Math.abs(k.delta).toFixed(1)}%</div>\n                    <div className=\"mt-3 h-10\">\n                      <Sparkline type=\"area\" data={k.series} transitions={true} style={{ height: '40px', width: '100%' }} />\n                    </div>\n                  </div>\n                </Tooltip>\n              ))}\n            </div>\n          </section>\n\n          {/* Charts Row */}\n          <section className=\"px-4 sm:px-6 lg:px-10 pb-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-base font-semibold\">Revenue Trend</h3>\n                  <div className=\"flex items-center gap-2\">\n                    <Chip text=\"Last 30 days\" className=\"bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200\" />\n                    <Switch checked={showLegend} onChange={(e)=>setShowLegend(e.value)} ariaLabel=\"Legend\" />\n                    <Button className=\"px-3 py-1.5 rounded-md bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900\" onClick={()=> setToasts(prev=>[{ id: Date.now()+'' , type:'success', text:'Chart image downloaded' }, ...prev])}>\n                      <SvgIcon icon={downloadIcon} />\n                    </Button>\n                  </div>\n                </div>\n                <Chart style={{ height: 288 }}>\n                  <ChartArea background=\"transparent\" />\n                  <ChartLegend visible={showLegend} />\n                  <KChartTooltip shared={true} />\n                  <ChartCategoryAxis>\n                    <ChartCategoryAxisItem categories={categories} />\n                  </ChartCategoryAxis>\n                  <ChartSeries>\n                    {revenueSeries.map(s => (\n                      <ChartSeriesItem key={s.name} type=\"line\" data={s.data} name={s.name} />\n                    ))}\n                  </ChartSeries>\n                </Chart>\n              </div>\n              <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-base font-semibold\">User Growth</h3>\n                  <div className=\"flex items-center gap-2\">\n                    <Button className=\"px-3 py-1.5 rounded-md border\" onClick={()=>setUserChartType('area')}>Area</Button>\n                    <Button className=\"px-3 py-1.5 rounded-md border\" onClick={()=>setUserChartType('bar')}>Bar</Button>\n                    <Button className=\"px-3 py-1.5 rounded-md bg-gray-100 dark:bg-gray-700\" onClick={()=>{/* reset zoom noop in demo */}}>Reset</Button>\n                  </div>\n                </div>\n                <Chart style={{ height: 288 }}>\n                  <ChartArea background=\"transparent\" />\n                  <KChartTooltip shared={true} />\n                  <ChartCategoryAxis>\n                    <ChartCategoryAxisItem categories={categories} />\n                  </ChartCategoryAxis>\n                  <ChartSeries>\n                    <ChartSeriesItem type={userChartType} data={revenueSeries[0].data.map(v=> v*120)} name=\"Users\" />\n                  </ChartSeries>\n                </Chart>\n              </div>\n            </div>\n          </section>\n\n          {/* Transactions Table */}\n          <section className=\"px-4 sm:px-6 lg:px-10 pb-24\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-base font-semibold\">Recent Transactions</h3>\n              <div className=\"flex items-center gap-3\">\n                <span className=\"bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded\">{filteredTx.length}</span>\n                <Input className=\"w-56\" value={txSearch} onChange={(e)=>{ setTxSearch(e.value); setTxPage(p=>({ ...p, skip: 0 })); }} placeholder=\"Search transactions\" />\n              </div>\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-100 dark:border-gray-700\">\n              <Grid data={pageData} dataItemKey=\"id\" autoProcessData={true} style={{ width: '100%' }}>\n                <GridToolbar>\n                  <div className=\"px-4 py-2 border-b border-gray-100 dark:border-gray-700 flex items-center gap-2 w-full\">\n                    <Button className=\"px-3 py-1.5 rounded-md bg-red-600 text-white\">Refund</Button>\n                    <Button className=\"px-3 py-1.5 rounded-md bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900\">Export</Button>\n                    <Button className=\"px-3 py-1.5 rounded-md border\">Tag</Button>\n                  </div>\n                </GridToolbar>\n                <Column field=\"date\" title=\"Date\" format=\"{0:MM/dd/yyyy}\" />\n                <Column field=\"customer.name\" title=\"Customer\" cell={(props)=>{\n                  const it = props.dataItem;\n                  return (\n                    <td className={props.tdProps?.className} style={props.tdProps?.style}>\n                      <div className=\"flex items-center gap-2\"><img src={it.customer.avatar} alt={it.customer.name} className=\"h-6 w-6 rounded-full\" />{it.customer.name}</div>\n                    </td>\n                  );\n                }} />\n                <Column field=\"plan\" title=\"Plan\" />\n                <Column field=\"amount\" title=\"Amount\" className=\"text-right\" cell={(p)=> (<td className=\"text-right\">{formatCurrency(p.dataItem.amount)}</td>)} />\n                <Column field=\"status\" title=\"Status\" cell={(p)=> (\n                  <td>\n                    <span className={`px-2 py-1 rounded-full text-xs ${p.dataItem.status==='Paid' ? 'bg-green-100 text-green-700' : p.dataItem.status==='Pending' ? 'bg-yellow-100 text-yellow-700' : 'bg-red-100 text-red-700'}`}>{p.dataItem.status}</span>\n                  </td>\n                )} />\n                <Column field=\"method\" title=\"Method\" />\n                <Column title=\"Actions\" cell={()=> (<td className=\"text-right\"><Button fillMode=\"flat\">•••</Button></td>)} />\n              </Grid>\n              <div className=\"px-4 py-3 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between\">\n                <Pager\n                  skip={txPage.skip}\n                  take={txPage.take}\n                  total={filteredTx.length}\n                  onPageChange={(e)=> setTxPage({ skip: e.skip, take: e.take })}\n                  previousNext\n                  type=\"numeric\"\n                  pageSizes={[10,20,50]}\n                  adaptive\n                />\n              </div>\n            </div>\n          </section>\n        </main>\n\n        {/* FAB */}\n        <div className=\"fixed bottom-6 right-6\">\n          <Button className=\"h-14 w-14 rounded-full bg-blue-600 hover:bg-blue-700 text-white shadow-xl flex items-center justify-center\" onClick={()=> setUserMenuOpen(p=>!p)} aria-label=\"Quick actions\">\n            <SvgIcon icon={plusIcon} />\n          </Button>\n          {userMenuOpen && (\n            <div className=\"absolute bottom-16 right-0 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl overflow-hidden\">\n              <StackLayout orientation=\"vertical\" gap={0}>\n                {['Create invoice','Add customer','Record payment','New report'].map(text => (\n                  <button key={text} className=\"px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700 text-left\" onClick={()=> setDialog({ open: true, title: text, action: text })}>{text}</button>\n                ))}\n              </StackLayout>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur border-t border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-10 py-4\">\n        <div className=\"flex items-center justify-between flex-wrap gap-3\">\n          <span className=\"text-sm text-gray-500\">© 2025 Acme Inc.</span>\n          <a href=\"#status\" className=\"px-2 py-1 rounded-full bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300\">All systems operational</a>\n          <div className=\"flex items-center gap-3\">\n            <DropDownList className=\"min-w-32\" data={[{code:'en',label:'English'},{code:'es',label:'Español'}]} textField=\"label\" dataItemKey=\"code\" defaultValue={{code:'en',label:'English'}} />\n            <a href=\"#shortcuts\" className=\"text-sm text-blue-600 hover:underline\" onClick={()=> setDialog({ open: true, title: 'Keyboard Shortcuts', action: 'shortcuts' })}>Keyboard shortcuts</a>\n          </div>\n        </div>\n      </footer>\n\n      {/* Toasts */}\n      <NotificationGroup style={{ position:'fixed', top: 16, right: 16, zIndex: 50, gap: 8, display:'flex', flexDirection:'column' }}>\n        {toasts.map(t => (\n          <Notification key={t.id} type={{ style: t.type, icon: true }} closable onClose={()=>removeToast(t.id)}>\n            <span>{t.text}</span>\n          </Notification>\n        ))}\n      </NotificationGroup>\n\n      {/* Global Dialog */}\n      {dialog.open && (\n        <Dialog title={dialog.title} onClose={()=> setDialog({ open:false, title:'', action:'' })} className=\"z-50\">\n          <p className=\"mb-4 text-sm text-gray-700 dark:text-gray-200\">This is a placeholder form for “{dialog.action}”.</p>\n          <FieldWrapper>\n            <Input placeholder=\"Name\" />\n          </FieldWrapper>\n          <FieldWrapper>\n            <Input placeholder=\"Notes\" />\n          </FieldWrapper>\n          <DialogActionsBar>\n            <Button onClick={()=> setDialog({ open:false, title:'', action:'' })}>Cancel</Button>\n            <Button themeColor=\"primary\" onClick={()=> { setDialog({ open:false, title:'', action:'' }); setToasts(prev=>[{ id: Date.now()+'' , type:'success', text:`${dialog.action} saved` }, ...prev]); }}>Save</Button>\n          </DialogActionsBar>\n        </Dialog>\n      )}\n\n      {/* Skeleton placeholder (hidden) */}\n      <div className=\"hidden\">\n        <Skeleton shape={'rectangle'} style={{ width: '100%', height: 120 }} />\n      </div>\n    </div>\n  );\n}\n",
    "metadata": {
      "totalComponents": 146,
      "componentTypes": [
        "AppBar",
        "AppBarSection",
        "AppBarSpacer",
        "AutoComplete",
        "Avatar",
        "Button",
        "Badge",
        "DropDownList",
        "ListView",
        "Switch",
        "DropDownButton",
        "StackLayout",
        "ProgressBar",
        "Breadcrumb",
        "Form",
        "FormElement",
        "DateRangePicker",
        "Input",
        "Card",
        "Sparkline",
        "Tooltip",
        "Chart",
        "ChartSeries",
        "ChartSeriesItem",
        "ChartCategoryAxis",
        "ChartCategoryAxisItem",
        "ChartLegend",
        "Grid",
        "GridToolbar",
        "Column",
        "Pager",
        "SvgIcon",
        "Notification",
        "NotificationGroup",
        "Dialog",
        "DialogActionsBar",
        "Skeleton"
      ]
    }
  },
  "originalACT": {
    "structure": {
      "component": "container",
      "description": "App shell root for SaaS dashboard with sticky header, collapsible sidebar, scrollable main content, and footer. Manages global theme, auth user, permissions, and global filters state.",
      "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
      "styleInfo": "min-h-screen bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100",
      "children": [
        {
          "component": "header",
          "description": "Top app bar with branding, global search, and utilities (notifications, help, theme toggle, user menu). Requires user profile data, notification summaries, help links, theme state.",
          "mcpQuery": "Show me Kendo UI AppBar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
          "styleInfo": "sticky top-0 z-40 bg-white/80 dark:bg-gray-800/80 backdrop-blur border-b border-gray-200 dark:border-gray-700 shadow-sm",
          "children": [
            {
              "component": "div",
              "description": "Brand area with logo and product name. Needs brand logo URL and app name.",
              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
              "styleInfo": "flex items-center gap-3",
              "children": [
                {
                  "component": "logo",
                  "description": "Brand logo image.",
                  "mcpQuery": "Show me Kendo UI Avatar examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                  "styleInfo": "h-8 w-8 rounded-md shadow-sm",
                  "children": ""
                },
                {
                  "component": "title",
                  "description": "Product name text.",
                  "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                  "styleInfo": "text-lg font-semibold tracking-tight",
                  "children": "Acme Analytics"
                }
              ]
            },
            {
              "component": "search",
              "description": "Global search input with debounced queries to backend search endpoint.",
              "mcpQuery": "Show me Kendo UI SearchBox or AutoComplete examples for a global app header with debounced search, clear button, and keyboard navigation. Include styling for a compact header variant and examples for async data fetching and loading indicators.",
              "styleInfo": "hidden md:flex flex-1 max-w-xl mx-6",
              "children": [
                {
                  "component": "autocomplete",
                  "description": "Typeahead suggestions connected to /search endpoint.",
                  "mcpQuery": "Show me Kendo UI AutoComplete with remote data, custom item template (icon + label + type), loading spinner, and keyboard navigation. Include aria attributes and debounce config.",
                  "styleInfo": "w-full",
                  "children": ""
                }
              ]
            },
            {
              "component": "div",
              "description": "Utilities group: notifications, help, theme toggle, user menu.",
              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
              "styleInfo": "flex items-center gap-2 ml-auto",
              "children": [
                {
                  "component": "button",
                  "description": "Notifications icon button with unread badge; opens dropdown fetching /notifications.",
                  "mcpQuery": "Show me Kendo UI DropDownButton or Popup + Button for a notifications bell with badge, async load on open, and scrollable list. Include examples for read/unread states and item click handling.",
                  "styleInfo": "relative p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700",
                  "children": [
                    {
                      "component": "badge",
                      "description": "Unread count badge bound to unread notifications.",
                      "mcpQuery": "Show me Kendo UI Badge usage on top-right of an icon button with dynamic count and color variants.",
                      "styleInfo": "absolute -top-0.5 -right-0.5 bg-red-600 text-white text-xs px-1.5 py-0.5 rounded-full shadow",
                      "children": "3"
                    },
                    {
                      "component": "dropdown",
                      "description": "Notifications dropdown list with virtualization if long. Data: {id,title,snippet,timestamp,read}.",
                      "mcpQuery": "Show me Kendo UI Popup/ListView inside a Popup for notifications with virtualization, item templates, and mark-as-read on click. Include max-height and keyboard navigation.",
                      "styleInfo": "w-80 max-h-96 overflow-auto bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-2",
                      "children": [
                        {
                          "component": "listview",
                          "description": "Scrollable notification items.",
                          "mcpQuery": "Show me Kendo UI ListView with custom item template (title, snippet, time, unread dot) and click handler.",
                          "styleInfo": "divide-y divide-gray-200 dark:divide-gray-700",
                          "children": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "component": "button",
                  "description": "Help/Support icon opens quick links menu. Data: helpLinks [{label,url}].",
                  "mcpQuery": "Show me Kendo UI Menu or ContextMenu for a help icon that opens a small menu with external links and keyboard navigation.",
                  "styleInfo": "p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700",
                  "children": ""
                },
                {
                  "component": "switch",
                  "description": "Theme toggle (light/dark). Persists to local storage.",
                  "mcpQuery": "Show me Kendo UI Switch examples for theme toggling with controlled state and custom on/off icons.",
                  "styleInfo": "mx-2",
                  "children": ""
                },
                {
                  "component": "menu",
                  "description": "User avatar menu: profile, settings, sign out. Needs user {name, avatarUrl, role}.",
                  "mcpQuery": "Show me Kendo UI Menu/Avatar with a user menu in header including avatar, name, role, and menu items (Profile, Settings, Sign out). Include placement and accessibility.",
                  "styleInfo": "flex items-center gap-2",
                  "children": [
                    {
                      "component": "avatar",
                      "description": "User avatar image.",
                      "mcpQuery": "Show me Kendo UI Avatar with image fallback and status dot.",
                      "styleInfo": "h-8 w-8 rounded-full ring-2 ring-white dark:ring-gray-800",
                      "children": ""
                    },
                    {
                      "component": "dropdownmenu",
                      "description": "User actions menu.",
                      "mcpQuery": "Show me Kendo UI Menu as a dropdown triggered by avatar with keyboard nav and focus management.",
                      "styleInfo": "min-w-48 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg",
                      "children": [
                        {
                          "component": "menuitem",
                          "description": "Profile link.",
                          "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                          "styleInfo": "px-3 py-2 hover:bg-gray-50 dark:hover:bg-gray-700",
                          "children": "Profile"
                        },
                        {
                          "component": "menuitem",
                          "description": "Settings link.",
                          "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                          "styleInfo": "px-3 py-2 hover:bg-gray-50 dark:hover:bg-gray-700",
                          "children": "Settings"
                        },
                        {
                          "component": "menuitem",
                          "description": "Sign out action triggers auth flow.",
                          "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                          "styleInfo": "px-3 py-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20",
                          "children": "Sign out"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "component": "div",
          "description": "App shell body: sidebar + main content region.",
          "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
          "styleInfo": "flex",
          "children": [
            {
              "component": "aside",
              "description": "Collapsible sidebar navigation with org switcher, nav sections, and version/status. Data: navigation items with permissions; org list; app meta.",
              "mcpQuery": "Show me Kendo UI PanelBar examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
              "styleInfo": "hidden md:flex md:flex-col w-64 shrink-0 bg-white dark:bg-gray-850 border-r border-gray-200 dark:border-gray-700 transition-all duration-200",
              "children": [
                {
                  "component": "button",
                  "description": "Collapse/expand toggle; persists state.",
                  "mcpQuery": "Show me Kendo UI Button with icon-only style and tooltip for collapsing a sidebar, including aria-expanded and controlled state.",
                  "styleInfo": "m-3 self-end p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700",
                  "children": ""
                },
                {
                  "component": "dropdown",
                  "description": "Organization switcher with logos. Data: orgs [{id,name,logo}].",
                  "mcpQuery": "Show me Kendo UI DropDownList with item templates (logo + name) and value template for current org.",
                  "styleInfo": "mx-3 mb-2",
                  "children": ""
                },
                {
                  "component": "navigation",
                  "description": "Vertical navigation menu with active item, icons, badges. Items: Dashboard, Analytics, Transactions, Customers, Billing, Settings.",
                  "mcpQuery": "Show me Kendo UI PanelBar or Menu for vertical sidebar navigation with icons, active state, and badge counts. Include routing integration examples.",
                  "styleInfo": "flex-1 overflow-y-auto px-2",
                  "children": [
                    {
                      "component": "menuitem",
                      "description": "Dashboard (active).",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-2 py-2 rounded-md bg-gray-100 dark:bg-gray-700 font-medium",
                      "children": "Dashboard"
                    },
                    {
                      "component": "menuitem",
                      "description": "Analytics",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Analytics"
                    },
                    {
                      "component": "menuitem",
                      "description": "Transactions",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Transactions"
                    },
                    {
                      "component": "menuitem",
                      "description": "Customers",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Customers"
                    },
                    {
                      "component": "menuitem",
                      "description": "Billing",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Billing"
                    },
                    {
                      "component": "menuitem",
                      "description": "Settings",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-2 py-2 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Settings"
                    }
                  ]
                },
                {
                  "component": "div",
                  "description": "Sidebar footer with app version and storage usage meter. Data: version string, usage percent.",
                  "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "styleInfo": "p-3 border-t border-gray-200 dark:border-gray-700",
                  "children": [
                    {
                      "component": "text",
                      "description": "App version label.",
                      "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                      "styleInfo": "text-xs text-gray-500",
                      "children": "v2.3.1"
                    },
                    {
                      "component": "progressbar",
                      "description": "Storage usage indicator bound to usage metrics.",
                      "mcpQuery": "Show me Kendo UI ProgressBar for a compact usage meter with percentage label and colors by threshold.",
                      "styleInfo": "mt-2 h-2 bg-gray-100 dark:bg-gray-700 rounded-full",
                      "children": ""
                    }
                  ]
                }
              ]
            },
            {
              "component": "main",
              "description": "Primary content area with page header, KPI grid, charts, and recent transactions table.",
              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
              "styleInfo": "flex-1 min-w-0",
              "children": [
                {
                  "component": "section",
                  "description": "Page header row: title, breadcrumbs, filters, and actions. Data: default filters, export endpoints.",
                  "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "styleInfo": "px-4 sm:px-6 lg:px-10 py-6",
                  "children": [
                    {
                      "component": "div",
                      "description": "Title and breadcrumbs.",
                      "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                      "styleInfo": "flex items-center justify-between flex-wrap gap-4",
                      "children": [
                        {
                          "component": "div",
                          "description": "Title + breadcrumb group.",
                          "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                          "styleInfo": "flex items-center gap-3",
                          "children": [
                            {
                              "component": "h1",
                              "description": "Page title.",
                              "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                              "styleInfo": "text-2xl font-bold tracking-tight",
                              "children": "Dashboard"
                            },
                            {
                              "component": "breadcrumb",
                              "description": "Optional breadcrumb trail.",
                              "mcpQuery": "Show me Kendo UI Breadcrumb examples with truncation and responsive collapse.",
                              "styleInfo": "text-sm text-gray-500",
                              "children": "Home / Dashboard"
                            }
                          ]
                        },
                        {
                          "component": "div",
                          "description": "Header actions: Refresh, Export menu.",
                          "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                          "styleInfo": "flex items-center gap-2",
                          "children": [
                            {
                              "component": "button",
                              "description": "Refresh data using current filters.",
                              "mcpQuery": "Show me Kendo UI Button with loading state/spinner for refresh operations.",
                              "styleInfo": "bg-gray-900 hover:bg-black text-white px-3 py-2 rounded-md dark:bg-gray-100 dark:text-gray-900 dark:hover:bg-white",
                              "children": "Refresh"
                            },
                            {
                              "component": "dropdownmenu",
                              "description": "Export menu (CSV/XLSX/PDF) using current filters.",
                              "mcpQuery": "Show me Kendo UI DropDownButton with export options and disabled state while exporting.",
                              "styleInfo": "relative",
                              "children": [
                                {
                                  "component": "menuitem",
                                  "description": "Export CSV",
                                  "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                                  "styleInfo": "px-3 py-2",
                                  "children": "CSV"
                                },
                                {
                                  "component": "menuitem",
                                  "description": "Export XLSX",
                                  "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                                  "styleInfo": "px-3 py-2",
                                  "children": "XLSX"
                                },
                                {
                                  "component": "menuitem",
                                  "description": "Export PDF",
                                  "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                                  "styleInfo": "px-3 py-2",
                                  "children": "PDF"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "component": "form",
                      "description": "Filters form controlling global query state. Fields: date range, segment dropdown, search input. Updates KPIs, charts, table.",
                      "mcpQuery": "Show me Kendo UI Form with DateRangePicker, DropDownList, and SearchBox integrated into a responsive row, with validation and submit-on-change behavior.",
                      "styleInfo": "mt-4 grid grid-cols-1 md:grid-cols-3 gap-4",
                      "children": [
                        {
                          "component": "daterangepicker",
                          "description": "Global date range filter (relative and absolute).",
                          "mcpQuery": "Show me Kendo UI DateRangePicker with presets (Last 7/30/90 days) and change events to update global filters.",
                          "styleInfo": "w-full",
                          "children": ""
                        },
                        {
                          "component": "dropdown",
                          "description": "Segment/Product dropdown.",
                          "mcpQuery": "Show me Kendo UI DropDownList with remote data, clearable option, and value/label mapping.",
                          "styleInfo": "w-full",
                          "children": ""
                        },
                        {
                          "component": "search",
                          "description": "Keyword search within dashboard context.",
                          "mcpQuery": "Show me Kendo UI SearchBox integrated in a form with onInput debounce and clear button.",
                          "styleInfo": "w-full",
                          "children": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "component": "section",
                  "description": "KPI Metric Cards Grid. Data from /metrics: [{metricKey,value,deltaPercent,previousValue,timeseries[]}].",
                  "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "styleInfo": "px-4 sm:px-6 lg:px-10 pb-6",
                  "children": [
                    {
                      "component": "grid",
                      "description": "Responsive grid for KPI cards (4/2/1 columns).",
                      "mcpQuery": "Show me Kendo UI Grid examples with data binding, sorting, filtering, and pagination. Include examples with realistic sample data, custom cell templates, and responsive design. Provide complete implementation with all necessary props.",
                      "styleInfo": "grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6",
                      "children": [
                        {
                          "component": "card",
                          "description": "Metric card with title, value, delta, sparkline, tooltip. Click to drill down.",
                          "mcpQuery": "Show me Kendo UI Card with embedded Sparkline for KPI display, including up/down delta indicators and tooltip.",
                          "styleInfo": "bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700 hover:shadow-lg transition-shadow",
                          "children": [
                            {
                              "component": "h3",
                              "description": "Metric title (e.g., MRR).",
                              "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                              "styleInfo": "text-sm font-medium text-gray-500 dark:text-gray-400",
                              "children": "Monthly Recurring Revenue"
                            },
                            {
                              "component": "div",
                              "description": "Primary value display with unit formatting.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "mt-2 text-3xl font-semibold",
                              "children": "$128,540"
                            },
                            {
                              "component": "div",
                              "description": "Delta indicator vs previous period.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "mt-1 flex items-center gap-2 text-green-600",
                              "children": "▲ 5.2%"
                            },
                            {
                              "component": "sparkline",
                              "description": "Mini sparkline using timeseries[].",
                              "mcpQuery": "Show me Kendo UI Sparkline bound to small timeseries with smooth area style and tooltip.",
                              "styleInfo": "mt-3 h-10",
                              "children": ""
                            },
                            {
                              "component": "tooltip",
                              "description": "Definition tooltip for metric calculation.",
                              "mcpQuery": "Show me Kendo UI Tooltip attached to card header explaining metric definition.",
                              "styleInfo": "",
                              "children": "MRR = sum of monthly subscription revenue"
                            }
                          ]
                        },
                        {
                          "component": "card",
                          "description": "ARR metric card.",
                          "mcpQuery": "Show me Kendo UI Card + Sparkline for ARR.",
                          "styleInfo": "bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700 hover:shadow-lg transition-shadow",
                          "children": ""
                        },
                        {
                          "component": "card",
                          "description": "Active Users metric card.",
                          "mcpQuery": "Show me Kendo UI Card + Sparkline for Active Users with number formatting.",
                          "styleInfo": "bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700 hover:shadow-lg transition-shadow",
                          "children": ""
                        },
                        {
                          "component": "card",
                          "description": "Churn Rate metric card.",
                          "mcpQuery": "Show me Kendo UI Card + Sparkline for Churn Rate with percentage formatting and red/green variant.",
                          "styleInfo": "bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700 hover:shadow-lg transition-shadow",
                          "children": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "component": "section",
                  "description": "Charts row showing revenue trend and user growth. Data: timeseries with {timestamp,value,seriesKey}.",
                  "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "styleInfo": "px-4 sm:px-6 lg:px-10 pb-6",
                  "children": [
                    {
                      "component": "grid",
                      "description": "Responsive two-card layout for charts.",
                      "mcpQuery": "Show me Kendo UI Grid examples with data binding, sorting, filtering, and pagination. Include examples with realistic sample data, custom cell templates, and responsive design. Provide complete implementation with all necessary props.",
                      "styleInfo": "grid grid-cols-1 lg:grid-cols-2 gap-6",
                      "children": [
                        {
                          "component": "card",
                          "description": "Revenue trend chart card with header controls, crosshair/tooltip, zoom/pan.",
                          "mcpQuery": "Show me Kendo UI Chart (Line/Area) with crosshair, zoom/pan, legend toggle, export image button, and dark mode styling.",
                          "styleInfo": "bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700",
                          "children": [
                            {
                              "component": "div",
                              "description": "Card header with title and controls.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "flex items-center justify-between mb-4",
                              "children": [
                                {
                                  "component": "h3",
                                  "description": "Chart title.",
                                  "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                                  "styleInfo": "text-base font-semibold",
                                  "children": "Revenue Trend"
                                },
                                {
                                  "component": "toolbar",
                                  "description": "Controls: timeframe chip, legend toggle, download image.",
                                  "mcpQuery": "Show me Kendo UI ToolBar with buttons, toggle buttons, and chip/badge controls inside a card header.",
                                  "styleInfo": "flex items-center gap-2",
                                  "children": [
                                    {
                                      "component": "chip",
                                      "description": "Timeframe indicator (e.g., Last 30 days).",
                                      "mcpQuery": "Show me Kendo UI Chip component with selectable states.",
                                      "styleInfo": "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200",
                                      "children": "Last 30 days"
                                    },
                                    {
                                      "component": "toggle",
                                      "description": "Legend visibility toggle.",
                                      "mcpQuery": "Show me Kendo UI Switch or ToggleButton controlling legend visibility in a Chart.",
                                      "styleInfo": "",
                                      "children": "Legend"
                                    },
                                    {
                                      "component": "button",
                                      "description": "Download chart image.",
                                      "mcpQuery": "Show me Kendo UI Button integrated with Chart exportImage API.",
                                      "styleInfo": "px-3 py-1.5 rounded-md bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900",
                                      "children": "Download"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "component": "linechart",
                              "description": "Revenue chart bound to /timeseries/revenue.",
                              "mcpQuery": "Show me Kendo UI Line Chart with multiple series, tooltip, crosshair, pannable/zoomable, and responsive legend.",
                              "styleInfo": "h-72",
                              "children": ""
                            }
                          ]
                        },
                        {
                          "component": "card",
                          "description": "User growth chart card with header controls, supports bar/area view.",
                          "mcpQuery": "Show me Kendo UI Chart (Bar/Area toggle) with smooth animation and dark theme support.",
                          "styleInfo": "bg-white dark:bg-gray-800 rounded-xl shadow-md p-5 border border-gray-100 dark:border-gray-700",
                          "children": [
                            {
                              "component": "div",
                              "description": "Card header with controls.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "flex items-center justify-between mb-4",
                              "children": [
                                {
                                  "component": "h3",
                                  "description": "Chart title.",
                                  "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                                  "styleInfo": "text-base font-semibold",
                                  "children": "User Growth"
                                },
                                {
                                  "component": "toolbar",
                                  "description": "Controls: view toggle, reset zoom.",
                                  "mcpQuery": "Show me Kendo UI ToolBar with ToggleButton group for chart type and a reset zoom action.",
                                  "styleInfo": "flex items-center gap-2",
                                  "children": [
                                    {
                                      "component": "button",
                                      "description": "Toggle to Area view.",
                                      "mcpQuery": "Show me Kendo UI ButtonGroup with toggle buttons for selecting chart type.",
                                      "styleInfo": "px-3 py-1.5 rounded-md border",
                                      "children": "Area"
                                    },
                                    {
                                      "component": "button",
                                      "description": "Toggle to Bar view.",
                                      "mcpQuery": "Show me Kendo UI ButtonGroup with toggle buttons for selecting chart type.",
                                      "styleInfo": "px-3 py-1.5 rounded-md border",
                                      "children": "Bar"
                                    },
                                    {
                                      "component": "button",
                                      "description": "Reset zoom.",
                                      "mcpQuery": "Show me Kendo UI Button wired to chart navigator reset/pan/zoom reset.",
                                      "styleInfo": "px-3 py-1.5 rounded-md bg-gray-100 dark:bg-gray-700",
                                      "children": "Reset"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "component": "areachart",
                              "description": "User growth chart bound to /timeseries/users with tooltips and navigator.",
                              "mcpQuery": "Show me Kendo UI Area Chart with navigator/selection for zooming and shared tooltip.",
                              "styleInfo": "h-72",
                              "children": ""
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "component": "section",
                  "description": "Recent Transactions data table with search, sort, selection, pagination, density toggle, and row actions. Data: GET /transactions with pagination and total count.",
                  "mcpQuery": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "styleInfo": "px-4 sm:px-6 lg:px-10 pb-24",
                  "children": [
                    {
                      "component": "div",
                      "description": "Table header row with title, row count, and search within table.",
                      "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                      "styleInfo": "flex items-center justify-between mb-3",
                      "children": [
                        {
                          "component": "h3",
                          "description": "Section title.",
                          "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                          "styleInfo": "text-base font-semibold",
                          "children": "Recent Transactions"
                        },
                        {
                          "component": "div",
                          "description": "Right-side: row count and search.",
                          "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                          "styleInfo": "flex items-center gap-3",
                          "children": [
                            {
                              "component": "badge",
                              "description": "Row count badge bound to total.",
                              "mcpQuery": "Show me Kendo UI Badge bound to dynamic count.",
                              "styleInfo": "bg-gray-100 dark:bg-gray-700",
                              "children": "128"
                            },
                            {
                              "component": "search",
                              "description": "Search within transactions table.",
                              "mcpQuery": "Show me Kendo UI SearchBox filtering a Grid data source with debounce.",
                              "styleInfo": "w-56",
                              "children": ""
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "component": "datatable",
                      "description": "Interactive table for transactions with sorting, filtering, selection, pagination, and row expansion. Columns: Date, Customer, Plan/Product, Amount, Status, Method, Actions.",
                      "mcpQuery": "Show me Kendo UI Grid with remote data operations (paging, sorting, filtering), selectable rows, column templates (avatar, badges), toolbar with bulk actions, and expandable detail rows.",
                      "styleInfo": "bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-100 dark:border-gray-700",
                      "children": [
                        {
                          "component": "toolbar",
                          "description": "Bulk actions shown when rows selected: refund, export selected, tag.",
                          "mcpQuery": "Show me Kendo UI Grid Toolbar with custom buttons visible on selection.",
                          "styleInfo": "px-4 py-2 border-b border-gray-100 dark:border-gray-700 flex items-center gap-2",
                          "children": [
                            {
                              "component": "button",
                              "description": "Refund selected.",
                              "mcpQuery": "Show me Kendo UI Button dangerous action styling within Grid Toolbar.",
                              "styleInfo": "px-3 py-1.5 rounded-md bg-red-600 text-white",
                              "children": "Refund"
                            },
                            {
                              "component": "button",
                              "description": "Export selected.",
                              "mcpQuery": "Show me Kendo UI Button to export selected grid rows.",
                              "styleInfo": "px-3 py-1.5 rounded-md bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900",
                              "children": "Export"
                            },
                            {
                              "component": "button",
                              "description": "Tag selected.",
                              "mcpQuery": "Show me Kendo UI Button opening a tagging dialog for selected rows.",
                              "styleInfo": "px-3 py-1.5 rounded-md border",
                              "children": "Tag"
                            }
                          ]
                        },
                        {
                          "component": "grid",
                          "description": "Grid columns and data region.",
                          "mcpQuery": "Show me Kendo UI Grid column definitions with templates for avatar, amount formatting, and status badges.",
                          "styleInfo": "w-full",
                          "children": [
                            {
                              "component": "column",
                              "description": "Date column with sortable header.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "",
                              "children": "Date"
                            },
                            {
                              "component": "column",
                              "description": "Customer column with avatar and name.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "",
                              "children": "Customer"
                            },
                            {
                              "component": "column",
                              "description": "Plan/Product column.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "",
                              "children": "Plan"
                            },
                            {
                              "component": "column",
                              "description": "Amount with currency formatting and right alignment.",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "text-right",
                              "children": "Amount"
                            },
                            {
                              "component": "column",
                              "description": "Status with colored badge (Paid, Pending, Failed).",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "",
                              "children": "Status"
                            },
                            {
                              "component": "column",
                              "description": "Payment method (Card, PayPal, Bank).",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "",
                              "children": "Method"
                            },
                            {
                              "component": "column",
                              "description": "Row actions (overflow menu).",
                              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                              "styleInfo": "text-right",
                              "children": "Actions"
                            }
                          ]
                        },
                        {
                          "component": "pagination",
                          "description": "Pager controls bound to total count and page size.",
                          "mcpQuery": "Show me Kendo UI Pager integrated with Grid with page size dropdown and responsive layout.",
                          "styleInfo": "px-4 py-3 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between",
                          "children": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "component": "button",
              "description": "Floating Action Button (FAB) fixed bottom-right opening speed-dial with quick actions. Requires permissions and endpoints for actions.",
              "mcpQuery": "Show me Kendo UI FloatingActionButton or SpeedDial with actions (Create invoice, Add customer, Record payment, New report), including positioning and elevation.",
              "styleInfo": "fixed bottom-6 right-6 h-14 w-14 rounded-full bg-blue-600 hover:bg-blue-700 text-white shadow-xl flex items-center justify-center",
              "children": [
                {
                  "component": "icon",
                  "description": "Plus icon for FAB.",
                  "mcpQuery": "Show me Kendo UI SVGIcon examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                  "styleInfo": "h-6 w-6",
                  "children": ""
                },
                {
                  "component": "menu",
                  "description": "Speed-dial actions opened by FAB.",
                  "mcpQuery": "Show me Kendo UI SpeedDial examples with tooltips and action icons, opening forms in modals.",
                  "styleInfo": "absolute bottom-16 right-0 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl overflow-hidden",
                  "children": [
                    {
                      "component": "menuitem",
                      "description": "Create invoice opens modal form.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Create invoice"
                    },
                    {
                      "component": "menuitem",
                      "description": "Add customer opens modal form.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Add customer"
                    },
                    {
                      "component": "menuitem",
                      "description": "Record payment opens modal form.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "Record payment"
                    },
                    {
                      "component": "menuitem",
                      "description": "New report opens modal form.",
                      "mcpQuery": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
                      "styleInfo": "px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700",
                      "children": "New report"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "component": "footer",
          "description": "Footer with copyright, system status pill, language selector, region, shortcuts link. Data: status API, locales list.",
          "mcpQuery": "Show me Kendo UI AppBar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
          "styleInfo": "bg-white/80 dark:bg-gray-800/80 backdrop-blur border-t border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-10 py-4",
          "children": [
            {
              "component": "div",
              "description": "Footer layout row.",
              "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
              "styleInfo": "flex items-center justify-between flex-wrap gap-3",
              "children": [
                {
                  "component": "text",
                  "description": "Copyright notice.",
                  "mcpQuery": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
                  "styleInfo": "text-sm text-gray-500",
                  "children": "© 2025 Acme Inc."
                },
                {
                  "component": "badge",
                  "description": "System status pill linking to status page. Color reflects uptime.",
                  "mcpQuery": "Show me Kendo UI Badge/Chip representing system status with clickable link and color variants.",
                  "styleInfo": "px-2 py-1 rounded-full bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300",
                  "children": "All systems operational"
                },
                {
                  "component": "div",
                  "description": "Language selector and shortcuts link.",
                  "mcpQuery": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
                  "styleInfo": "flex items-center gap-3",
                  "children": [
                    {
                      "component": "dropdown",
                      "description": "Language selector using /locales.",
                      "mcpQuery": "Show me Kendo UI DropDownList for locale selection with flag icons and persistence.",
                      "styleInfo": "min-w-32",
                      "children": ""
                    },
                    {
                      "component": "link",
                      "description": "Keyboard shortcuts link opens help modal.",
                      "mcpQuery": "Show me Kendo UI Dialog triggered from a link for shortcuts reference.",
                      "styleInfo": "text-sm text-blue-600 hover:underline",
                      "children": "Keyboard shortcuts"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "component": "toast",
          "description": "Global toast notifications for success/error/info events.",
          "mcpQuery": "Show me Kendo UI Notification/Toast positioned top-right with stacking and auto-hide.",
          "styleInfo": "fixed top-4 right-4 space-y-2 z-50",
          "children": ""
        },
        {
          "component": "modal",
          "description": "Global modal container used by FAB actions and table row actions with validation and progress states.",
          "mcpQuery": "Show me Kendo UI Dialog with form content, validation messages, loading state, and focus trap.",
          "styleInfo": "z-50",
          "children": ""
        },
        {
          "component": "skeleton",
          "description": "Page-level skeletons for cards, charts, and table while loading.",
          "mcpQuery": "Show me Kendo UI Skeleton placeholders matching cards and grid rows with shimmer effect.",
          "styleInfo": "hidden",
          "children": ""
        }
      ]
    },
    "metadata": {
      "totalComponents": 118,
      "maxDepth": 7,
      "componentTypes": [
        "container",
        "header",
        "div",
        "logo",
        "title",
        "search",
        "autocomplete",
        "button",
        "badge",
        "dropdown",
        "listview",
        "menu",
        "avatar",
        "dropdownmenu",
        "menuitem",
        "aside",
        "navigation",
        "progressbar",
        "main",
        "section",
        "h1",
        "breadcrumb",
        "toolbar",
        "chip",
        "toggle",
        "h3",
        "grid",
        "card",
        "sparkline",
        "tooltip",
        "linechart",
        "areachart",
        "form",
        "daterangepicker",
        "datatable",
        "column",
        "pagination",
        "icon",
        "footer",
        "text",
        "link",
        "toast",
        "modal",
        "skeleton"
      ],
      "description": "Comprehensive SaaS dashboard ACT with sticky header, collapsible sidebar, KPI cards, interactive charts, transactions table, FAB, and footer. Includes forms, data displays, media, feedback, and navigation components with Tailwind styles and targeted Kendo MCP queries."
    }
  },
  "routePath": "/generated/3beebcec5b242feb957a7ef38c147cfb",
  "mcpQueries": {
    "StackLayout": "Show me Kendo UI StackLayout examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
    "AppBar": "Show me Kendo UI AppBar examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
    "Avatar": "Show me Kendo UI Avatar with image fallback and status dot.",
    "Typography": "Show me Kendo UI Typography examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
    "AutoComplete": "Show me Kendo UI SearchBox filtering a Grid data source with debounce.",
    "Button": "Show me Kendo UI FloatingActionButton or SpeedDial with actions (Create invoice, Add customer, Record payment, New report), including positioning and elevation.",
    "Badge": "Show me Kendo UI Badge/Chip representing system status with clickable link and color variants.",
    "DropDownList": "Show me Kendo UI DropDownList for locale selection with flag icons and persistence.",
    "ListView": "Show me Kendo UI ListView with custom item template (title, snippet, time, unread dot) and click handler.",
    "Switch": "Show me Kendo UI Switch or ToggleButton controlling legend visibility in a Chart.",
    "Menu": "Show me Kendo UI Menu examples with navigation patterns, active states, and responsive behavior. Include examples for different menu structures and styling. Provide complete implementation with event handlers.",
    "DropDownButton": "Show me Kendo UI DropDownButton with export options and disabled state while exporting.",
    "PanelBar": "Show me Kendo UI PanelBar examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
    "ProgressBar": "Show me Kendo UI ProgressBar for a compact usage meter with percentage label and colors by threshold.",
    "Card": "Show me Kendo UI Card examples with different orientations, spacing, and responsive behavior. Include examples for common layout patterns and styling with Tailwind CSS classes. Provide complete implementation with all props.",
    "Breadcrumb": "Show me Kendo UI Breadcrumb examples with truncation and responsive collapse.",
    "Form": "Show me Kendo UI Form with DateRangePicker, DropDownList, and SearchBox integrated into a responsive row, with validation and submit-on-change behavior.",
    "DateRangePicker": "Show me Kendo UI DateRangePicker with presets (Last 7/30/90 days) and change events to update global filters.",
    "Grid": "Show me Kendo UI Grid column definitions with templates for avatar, amount formatting, and status badges.",
    "Sparkline": "Show me Kendo UI Sparkline bound to small timeseries with smooth area style and tooltip.",
    "Tooltip": "Show me Kendo UI Tooltip attached to card header explaining metric definition.",
    "Toolbar": "Show me Kendo UI Grid Toolbar with custom buttons visible on selection.",
    "Chip": "Show me Kendo UI Chip component with selectable states.",
    "Chart": "Show me Kendo UI Area Chart with navigator/selection for zooming and shared tooltip.",
    "DataGrid": "Show me Kendo UI Grid with remote data operations (paging, sorting, filtering), selectable rows, column templates (avatar, badges), toolbar with bulk actions, and expandable detail rows.",
    "Pager": "Show me Kendo UI Pager integrated with Grid with page size dropdown and responsive layout.",
    "SVGIcon": "Show me Kendo UI SVGIcon examples with different variants, sizes, and styling options. Include examples for common display patterns and accessibility features. Provide complete implementation with all props.",
    "Notification": "Show me Kendo UI Notification/Toast positioned top-right with stacking and auto-hide.",
    "Dialog": "Show me Kendo UI Dialog with form content, validation messages, loading state, and focus trap.",
    "Skeleton": "Show me Kendo UI Skeleton placeholders matching cards and grid rows with shimmer effect."
  },
  "mcpResponses": {
    "AutoComplete": "When your browser refreshes, you’ll see your first basic KendoReact Data Grid. Next, you will add the DropDownList component, and then you will use it to enable Grid filtering and several advanced features.\n\n2. Adding the KendoReact DropDownList\n\nAdding the <a href=\"/kendo-react-ui/components/dropdowns/dropdownlist\">KendoReact DropDownList</a> allows you to display all available categories of products. This is a free React DropDownList component, and you need a license to use its premium filtering and virtualization functionality.\nTo use the component, you must import it and bind it to data. Finally, add Grid <a href=\"/kendo-react-ui/components/grid/filtering\">filtering</a> through the DropDownList. To do that, use the existing handleDropDownChange function and add a <a href=\"/kendo-react-ui/components/dataquery/api/filterdescriptor\">filter descriptor</a> to gridDataState. As the number of data items and pages will decrease, reset the page index (skip) to zero.\n\n\n\nSample Code with all React Grid Features Enabled Define an <a href=\"/kendo-react-ui/components/grid/api/griddatastatechangeevent\">onDataStateChange</a> handler. Its purpose is to update dataState after each user interaction. In turn, this will cause the Grid to refresh and display the expected data.\n\n\nTo display the correct Grid data, you bind the Grid to the output of a function, rather than the products array directly. For this purpose, import the process function from the kendo-data-query package.\njsx\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Typography": "React Typography Demo Preview\n\nThe following example demonstrates the Typography variants and styles in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Typography is part of the <a href=\"/kendo-react-ui-develop/components/common\">KendoReact Common Utilities</a> component library. The procedures for installing, importing, and using the Common Utilities are identical for all components in the package. To learn how to use the Typography and the rest of the Common Utilities, see the <a href=\"/kendo-react-ui-develop/components/common\">Getting Started with the KendoReact Common Utilities</a> guide.\n\nKey Features Key Features\n\n\n<a href=\"/kendo-react-ui-develop/components/common/typography/appearance\">Appearance</a>—You can quickly add additional style to the Typography by choosing from the predefined styling options. KendoReact Typography Overview\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Dialog": "## API Reference Item\n- Name: DialogProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Dialog component]({% slug overview_dialog %}).\n- Syntax: \n\n## Additional Context\n### DialogProps.appendTo (children)\nname: appendTo\nfullName: DialogProps.appendTo\nsummary: \"Defines the container to which the Dialog will be appended.\\r\\n* If set to \\n`null`\\n the Dialog will be rendered without React Portal.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.autoFocus (children)\nname: autoFocus\nfullName: DialogProps.autoFocus\nsummary: Set the focus the Dialog container automatically when mounted.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.className (children)\nname: className\nfullName: DialogProps.className\nsummary: Sets a class of the Dialog DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.closeIcon (children)\nname: closeIcon\nfullName: DialogProps.closeIcon\nsummary: >-\n  Specifies whether a close button should be rendered at the top corner of the\n  dialog.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.contentStyle (children)\nname: contentStyle\nfullName: DialogProps.contentStyle\nsummary: The styles that are applied to the content of the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.dir (children)\nname: dir\nfullName: DialogProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.height (children)\nname: height\nfullName: DialogProps.height\nsummary: >-\n  Specifies the height of the Dialog ([see example]({% slug dimensions_dialog\n  %})).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.id (children)\nname: id\nfullName: DialogProps.id\nsummary: |-\n  Sets the \n  `aria-labelledby`\n   value.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.minWidth (children)\nname: minWidth\nfullName: DialogProps.minWidth\nsummary: Specifies the minimum width of the Dialog.\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.modal (children)\nname: modal\nfullName: DialogProps.modal\nsummary: >-\n  Specifies if the Dialog will be modal by rendering an overlay under the\n  component.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.onClose (children)\nname: onClose\nfullName: DialogProps.onClose\nsummary: |-\n  Fires when the **Close** button in the title is clicked or when the \n  `Esc`\n   button is pressed.\nsyntax:\n  return:\n    type: '(event: DialogCloseEvent) => void'\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.overlayStyle (children)\nname: overlayStyle\nfullName: DialogProps.overlayStyle\nsummary: |-\n  Set styles to the Dialog overlay element rendered when the \n  `modal`\n   prop is enabled.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.style (children)\nname: style\nfullName: DialogProps.style\nsummary: The styles that are applied to the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.themeColor (children)\nname: themeColor\nfullName: DialogProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Dialog.\\r\\n\\r\\nThe available options are:\\r\\n- primary\\r\\n- dark\\r\\n- light\"\nsyntax:\n  return:\n    type: '\"primary\" | \"dark\" | \"light\"'\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.title (children)\nname: title\nfullName: DialogProps.title\nsummary: >-\n  Sets the title of the Dialog ([see example]({% slug title_dialog %})). If you\n  do not specify the \n\n  `title`\n\n  , the Dialog does not render a **Close** button.\nsyntax:\n  return:\n    type: string | ReactElement\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.width (children)\nname: width\nfullName: DialogProps.width\nsummary: >-\n  Specifies the width of the Dialog ([see example]({% slug dimensions_dialog\n  %})).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n\n## API Reference Item\n- Name: DialogProps.autoFocusedElement\n- Type: Property\n- Summary: Specifies the query selector used to set the initial focus ([see examples]({% slug initial_focus_dialogs %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Dialog } from '@progress/kendo-react-dialogs';\n\nexport default function App() {\n    return (\n        <Dialog autoFocusedElement=\"#my-input\">\n            <div>\n                <input id=\"my-input\" placeholder=\"This input will be focused\" />\n            </div>\n        </Dialog>\n    );\n}\n\n```\n\n\nThis   is   a  Free React  DialogThe KendoReact  Dialog   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Dialog in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nKeyboard Navigation\n\nThe dialog component should implement tab key trap to allow navigation in the dialog. Only the x button in the dialog element is included in the tab sequence. The dialog itself is not a focusable element. By default, on open the focus goes to the first focusable element in the content, or the primary action button if there is no focusable element in the content.\n\nKeyboard Shortcuts\n\nButton element\n\nShortcutBehaviorTabFocus is moved between the elements in the dialog and is trapped into the component.EscapeCloses the dialog. When the dialog is modal, the focus should be returned to the element that triggered the open.\n\nResources\n\nKey Features\n\nThe KendoReact Dialogs provide the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance\n\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "StackLayout": "## API Reference Item\n- Name: StackLayoutProps.gap\n- Type: Property\n- Summary: Specifies the gap between the inner elements ([see example]({% slug layout_stacklayout %}#toc-gaps)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: StackLayout\n- Type: Function\n- Summary: Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\r\nArranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={100}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StackLayout.StackLayout.props (children)\nname: props\nfullName: StackLayout.StackLayout.props\nsyntax:\n  return:\n    type: StackLayoutProps | RefAttributes\n\n\n## API Reference Item\n- Name: StackLayoutProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\n- Syntax: \n\n## Additional Context\n### StackLayoutProps.align (children)\nname: align\nfullName: StackLayoutProps.align\nsummary: \"Specifies the horizontal and vertical alignment of the inner StackLayout elements.\\r\\nDemo ([here]({% slug layout_stacklayout %}#toc-horizontal-alignment)) and ([here]({% slug layout_stacklayout %}#toc-vertical-alignment)).\\r\\n\\r\\nThe possible keys are:\\r\\n* \\n`horizontal`\\n&mdash;Defines the possible horizontal alignment of the inner StackLayout elements.\\r\\n  * \\n`start`\\n&mdash;Uses the start point of the container.\\r\\n  * \\n`center`\\n&mdash;Uses the central point of the container.\\r\\n  * \\n`end`\\n&mdash;Uses the end point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the width of the container.\\r\\n* \\n`vertical`\\n&mdash;Defines the possible vertical alignment of the inner StackLayout elements.\\r\\n  * \\n`top`\\n&mdash;Uses the top point of the container.\\r\\n  * \\n`middle`\\n&mdash;Uses the middle point of the container.\\r\\n  * \\n`bottom`\\n&mdash;Uses the bottom point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the height of the container.\"\nsyntax:\n  return:\n    type: StackLayoutAlign\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.children (children)\nname: children\nfullName: StackLayoutProps.children\nsummary: The React elements that will be rendered inside the StackLayout.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.id (children)\nname: id\nfullName: StackLayoutProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root StackLayout element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.orientation (children)\nname: orientation\nfullName: StackLayoutProps.orientation\nsummary: \"Specifies the StackLayout orientation.\\r\\n([see example]({% slug layout_stacklayout %}#toc-orientation)).\\r\\n\\r\\nThe possible values are:\\r\\n* (Default)\\n`horizontal`\\n\\r\\n* \\n`vertical`\"\nsyntax:\n  return:\n    type: StackLayoutOrientation\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.style (children)\nname: style\nfullName: StackLayoutProps.style\nsummary: Sets additional CSS styles to the StackLayout.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: StackLayoutProps.className\n- Type: Property\n- Summary: Sets additional CSS classes to the StackLayout.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout className=\"custom-stacklayout-class\" gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\nThe following example demonstrates the StackLayout component in action and also showcases other KendoReact components—the <a href=\"/kendo-react-ui-develop/components/buttons/buttongroup\">ButtonGroup</a>, <a href=\"/kendo-react-ui-develop/components/layout/avatar\">Avatars</a> and <a href=\"/kendo-react-ui-develop/components/layout/card\">Cards</a> components. The components are arranged in a stack and can be switched from horizontal to vertical orientation.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... The KendoReact StackLayout component allows you to easily align vertically or horizontally multiple elements in a stack.\nIt delivers different orientations, alignments, spacings and other handy options.\nThis   is   a  Free React  StackLayoutThe KendoReact  StackLayout   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\nLayout\n\nThe StackLayout component provides options for controlling its appearance.\nTo customize the layout of the StackLayout, use any of the following configuration options:\n\nOrientation\nGaps\nHorizontal alignment\nVertical alignment\nNested StackLayouts\n\nOrientation\n\nTo set the StackLayout orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#orientation\">orientation</a> property.\nBy default, orientation is set to horizontal.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGaps\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Notification": "## API Reference Item\n- Name: NotificationProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Notification component]({% slug overview_notification %}).\n- Syntax: \n\n## Additional Context\n### NotificationProps.className (children)\nname: className\nfullName: NotificationProps.className\nsummary: Sets additional classes to the Notification.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.dir (children)\nname: dir\nfullName: NotificationProps.dir\nsummary: |-\n  Sets the \n  `dir`\n   HTML attribute, which determines the text direction.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.onClose (children)\nname: onClose\nfullName: NotificationProps.onClose\nsummary: Fires when you click the **Close** button.\nsyntax:\n  return:\n    type: '(event: NotificationEvent) => void'\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.style (children)\nname: style\nfullName: NotificationProps.style\nsummary: The styles that are applied to the Notification.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.type (children)\nname: type\nfullName: NotificationProps.type\nsummary: Sets the Notification type, which determines its style and icon.\nsyntax:\n  return:\n    type: >-\n      { icon?: boolean, style?: \"base\" | \"primary\" | \"secondary\" | \"tertiary\" |\n      \"info\" | \"success\" | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\" |\n      \"none\" }\npackageName: '@progress/kendo-react-notification'\n\n\n## API Reference Item\n- Name: NotificationProps.closable\n- Type: Property\n- Summary: Sets if the Notification requires a user action to hide.\r\nIf the property is set to \n`true`\n, the Notification renders a **Close** button.\r\nIf the property is set to an object, the Notification renders a **Close** button\r\nby extending the default props with the provided object.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Notification, NotificationGroup } from '@progress/kendo-react-notification';\nimport { Fade } from '@progress/kendo-react-animation';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    const [info, setInfo] = React.useState<boolean>(false);\n\n    const onToggle = () => setInfo(!info);\n\n    return (\n        <React.Fragment>\n            <Button type=\"button\" onClick={onToggle}>\n                {(info ? 'Hide ' : 'Show ') + 'Info'}\n            </Button>\n            <NotificationGroup\n                style={{\n                    right: 0,\n                    bottom: 0,\n                    alignItems: 'flex-start',\n                    flexWrap: 'wrap-reverse'\n                }}\n            >\n                <Fade>\n                    {info && (\n                        <Notification\n                            type={{ style: 'info', icon: true }}\n                            closable={true}\n                            onClose={() => setInfo(false)}\n                        >\n                            <span>You have 1 new message!</span>\n                        </Notification>\n                    )}\n                </Fade>\n            </NotificationGroup>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n\n```\n\n\nThe KendoReact Notification positions a piece of content next to a specific anchor component.\nThis   is   a  Free React  NotificationThe KendoReact  Notification   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following demo shows the Notification component which is included in the KendoReact Notification package: Different built-in <a href=\"/kendo-react-ui-develop/components/notification/animations\">Animations</a>\nBuilt-in <a href=\"/kendo-react-ui-develop/components/notification/types\">Types</a>\nFull control over the <a href=\"/kendo-react-ui-develop/components/notification/positioning\">Aligning and Positioning</a>\nOut-of-the-box accessibility and keyboard navigation\n\nHow Does the KendoReact Notification Work?\n\nPositioning\n\nYou can configure the position of the Notification through the <a href=\"/kendo-react-ui-develop/components/notification/api/notificationgroupprops#style\">style</a> property of the <a href=\"/kendo-react-ui-develop/components/notification/api/notificationgroup\">NotificationGroup</a> component.\nThe following example demonstrates how to align the Notification to the browser viewport.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Card": "## API Reference Item\n- Name: CardProps.orientation\n- Type: Property\n- Summary: Sets the Card orientation.\r\n\r\nThe supported values are:\r\n* \n`horizontal`\n - Default\r\n* \n`vertical`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            orientation=\"vertical\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Card\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### CardProps (children)\nname: CardProps\nfullName: CardProps\nsyntax:\n  return:\n    type: any\n  parameters:\n    - id: 26200\n      name: key\n      type: string\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - dir\n  - orientation\n  - style\n  - type\n\n---\n### Card.Card.props (children)\nname: props\nfullName: Card.Card.props\nsyntax:\n  return:\n    type: Omit<CardProps, \"ref\"> | RefAttributes\n\n\n## API Reference Item\n- Name: CardProps.className\n- Type: Property\n- Summary: Sets additional classes to the Card.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            className=\"custom-card-class\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\nOrientation\n\nThe Card enables you to arrange its content either vertically or horizontally.\nTo set the Card orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/cardprops#orientation\">orientation</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe following example demonstrates the Card in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Card is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Card and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features <a href=\"/kendo-react-ui-develop/components/layout/card/orientation\">Orientation</a>—You can arrange the content of the Card vertically or horizontally.\n<a href=\"/kendo-react-ui-develop/components/layout/card/types\">Types</a>—The predefined types provide a convenient way to change the appearance of the Card.\n<a href=\"/kendo-react-ui-develop/components/layout/card/action_buttons\">Actions</a>—The Card allows you to render custom action buttons and to customize their orientation and layout.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Pager": "## API Reference Item\n- Name: PagerProps.adaptive\n- Type: Property\n- Summary: Providing different rendering of the page sizes select element based on the screen dimensions.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Pager, PageChangeEvent } from '@progress/kendo-react-data-tools';\n\ninterface PageInterface {\n    skip: number;\n    take: number;\n}\n\nconst App = () => {\n    const [page, setPage] = React.useState<PageInterface>({ skip: 0, take: 5 });\n\n    const handlePageChange = (event: PageChangeEvent) => {\n        setPage({ skip: event.skip, take: event.take });\n    };\n\n    return (\n        <Pager\n            skip={page.skip}\n            take={page.take}\n            total={100}\n            onPageChange={handlePageChange}\n            previousNext={true}\n            type=\"numeric\"\n            pageSizes={[5, 10]}\n            adaptive={true}\n        />\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Pager\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### PagerProps (children)\nname: PagerProps\nfullName: PagerProps\nsyntax: {}\npackageName: '@progress/kendo-react-data-tools'\nmembers:\n  - adaptive\n  - adaptiveTitle\n  - buttonCount\n  - className\n  - dir\n  - disabled\n  - info\n  - messagesMap\n  - navigatable\n  - onPageChange\n  - pageSizeValue\n  - pageSizes\n  - previousNext\n  - responsive\n  - size\n  - skip\n  - style\n  - take\n  - total\n  - type\n\n---\n### Pager.Pager.props (children)\nname: props\nfullName: Pager.Pager.props\nsyntax:\n  return:\n    type: PagerProps | RefAttributes\n\n\nAdaptive Rendering\n\nThe Pager provides an option for enabling adaptive rendering for the popup element of the <a href=\"/kendo-react-ui-develop/components/datatools/api/pagerprops#pagesizes\">drop-down list with the page sizes</a>. This functionality allows the component to adapt to the screen size by adjusting its popup element dynamically based on the screen dimensions.\n\n\nTo enable the adaptive rendering, set the <a href=\"/kendo-react-ui-develop/components/datatools/api/pagerprops#adaptive\">adaptive</a> property of the Pager to true.\n\nAppearance\n\nThe KendoReact Pager allows selecting a predefined size option that changes its size.\nTo change the default size of the Pager, set its <a href=\"/kendo-react-ui-develop/components/datatools/api/pagerprops#size\">size</a> property which will change the padding of its elements. The available size options are:\n\nsmall - sets the padding of the elements to 2px 8px\nmedium (default) - sets the padding of the elements to 4px 8px\nlarge - sets the padding of the elements to 8px 8px\nnull - removes the styling related to the Pager sizing option\n\nResponsive Design\n\nThe Pager supports responsive web design by adapting its layout based on the set width or the available screen size. To enable the responsive layout, set the <a href=\"/kendo-react-ui-develop/components/datatools/api/pagerprops#responsive\">responsive</a> property to true.\n\nVisible Pager Elements\n\nBased on its width, the Pager component determines which internal elements will be rendered. When the Pager width is greater than or equal to 768 pixels, it will display all elements as follows:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "SVGIcon": "The SvgIcon allows you to use predefined theme colors through the themeColor property. Any custom color could by applied via <a href=\"/kendo-react-ui/components/common/api/svgiconprops#style\">style</a> property.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSize\n\nThe Icon allows you to specify its <a href=\"/kendo-react-ui/components/common/api/iconsize\">size</a>. The available values are:\n\n<a href=\"/kendo-react-ui/components/common/svgicon/appearance\">Appearance</a>—You can quickly style the SvgIcon by choosing from the predefined styling options.\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled Mode</a>—You can remove all default visual effects and style the KendoReact SvgIcon in a way that matches your application design perfectly.\n\n<a href=\"/kendo-react-ui/components/common/svgicon/appearance\">Appearance</a>—You can quickly style the SvgIcon by choosing from the predefined styling options.\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled Mode</a>—You can remove all default visual effects and style the KendoReact SvgIcon in a way that matches your application design perfectly.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "DropDownList": "## API Reference Item\n- Name: DropDownListProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact DropDownList component]({% slug overview_dropdownlist %}).\n- Syntax: \n\n## Additional Context\n### DropDownListProps.accessKey (children)\nname: accessKey\nfullName: DropDownListProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptive (children)\nname: adaptive\nfullName: DropDownListProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: DropDownListProps.adaptiveSubtitle\nsummary: \"Specifies the text that is rendered as subtitle in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: DropDownListProps.adaptiveTitle\nsummary: \"Specifies the text that is rendered as title in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\\r\\nIf not provided, the title will be the same as the label.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: DropDownListProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaLabel (children)\nname: ariaLabel\nfullName: DropDownListProps.ariaLabel\nsummary: |-\n  The accessible label of the component. By default is set to value of \n  `label`\n   prop.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: DropDownListProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.className (children)\nname: className\nfullName: DropDownListProps.className\nsummary: Sets additional classes to the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.data (children)\nname: data\nfullName: DropDownListProps.data\nsummary: >-\n  Sets the data of the DropDownList ([see example]({% slug binding_dropdownlist\n  %})).\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.dataItemKey (children)\nname: dataItemKey\nfullName: DropDownListProps.dataItemKey\nsummary: |-\n  Sets the key for comparing the data items of the DropDownList. If \n  `dataItemKey`\n   is not set, the DropDownList compares the items by reference ([see example]({% slug binding_dropdownlist %}#toc-datasets-of-objects)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.defaultItem (children)\nname: defaultItem\nfullName: DropDownListProps.defaultItem\nsummary: >-\n  Sets the text of the default empty item. The type of the defined value has to\n  match the data type.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.defaultValue (children)\nname: defaultValue\nfullName: DropDownListProps.defaultValue\nsummary: >-\n  Sets the default value of the DropDownList ([see example]({% slug\n  defaultitem_dropdownlist %})). Similar to the native \n\n  `select`\n   HTML element.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.delay (children)\nname: delay\nfullName: DropDownListProps.delay\nsummary: >-\n  Sets the delay before an item search is performed. When filtration is\n  disabled, use this option.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.dir (children)\nname: dir\nfullName: DropDownListProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.disabled (children)\nname: disabled\nfullName: DropDownListProps.disabled\nsummary: Sets the disabled state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.fillMode (children)\nname: fillMode\nfullName: DropDownListProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- flat\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.filter (children)\nname: filter\nfullName: DropDownListProps.filter\nsummary: >-\n  Sets the value of filtering input. Useful for making the filtering input a\n  [controlled\n  component](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.filterable (children)\nname: filterable\nfullName: DropDownListProps.filterable\nsummary: >-\n  Enables the filtering functionality of the DropDownList ([more information and\n  examples]({% slug filtering_dropdownlist %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.focusedItemIndex (children)\nname: focusedItemIndex\nfullName: DropDownListProps.focusedItemIndex\nsummary: \"If set, the DropDownList will use it to get the focused item index.\\r\\n\\r\\nDefault functionality returns the first item which starts with the input text.\"\nsyntax:\n  return:\n    type: '(data: any, inputText: string, textField?: string) => number'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.footer (children)\nname: footer\nfullName: DropDownListProps.footer\nsummary: >-\n  Sets the footer component of the DropDownList ([see example]({% slug\n  customrendering_dropdownlist %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupField (children)\nname: groupField\nfullName: DropDownListProps.groupField\nsummary: >-\n  Sets the data item field that represents the start of a group. Applicable to\n  objects data.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupHeaderItemRender (children)\nname: groupHeaderItemRender\nfullName: DropDownListProps.groupHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's group header item is about to be rendered. Used to\n  override the default appearance of the group's headers.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListGroupItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupStickyHeaderItemRender (children)\nname: groupStickyHeaderItemRender\nfullName: DropDownListProps.groupStickyHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's sticky group header item is about to be rendered.\n  Used to override the default appearance of the sticky group header of the\n  component.\nsyntax:\n  return:\n    type: >-\n      (div: ReactElement<HTMLDivElement, string | JSXElementConstructor<any>>,\n      stickyHeaderProps: GroupStickyHeaderProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.header (children)\nname: header\nfullName: DropDownListProps.header\nsummary: >-\n  Sets the header component of the DropDownList ([see example]({% slug\n  customrendering_dropdownlist %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.iconClassName (children)\nname: iconClassName\nfullName: DropDownListProps.iconClassName\nsummary: |-\n  Sets CSS classes to the expand \n  `icon`\n   DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.id (children)\nname: id\nfullName: DropDownListProps.id\nsummary: Specifies the id of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ignoreCase (children)\nname: ignoreCase\nfullName: DropDownListProps.ignoreCase\nsummary: >-\n  Enables a case-insensitive search. When filtering is disabled, use this\n  option.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.label (children)\nname: label\nfullName: DropDownListProps.label\nsummary: Renders a floating label for the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.leftRightKeysNavigation (children)\nname: leftRightKeysNavigation\nfullName: DropDownListProps.leftRightKeysNavigation\nsummary: \"If set to \\n`false`\\n, the DropDownList will not navigate over its data through left and right keys.\\r\\nUseful when the DropDownList is placed inside a toolbar which needs to handle left and right keys.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.listNoDataRender (children)\nname: listNoDataRender\nfullName: DropDownListProps.listNoDataRender\nsummary: >-\n  Fires when the element which indicates no data in the popup is about to be\n  rendered ([see example]({% slug customrendering_dropdownlist %}#toc-no-data)).\n  Used to override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLDivElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.loading (children)\nname: loading\nfullName: DropDownListProps.loading\nsummary: Sets the loading state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.name (children)\nname: name\nfullName: DropDownListProps.name\nsummary: |-\n  Specifies the \n  `name`\n   property of the \n  `select`\n   DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onBlur (children)\nname: onBlur\nfullName: DropDownListProps.onBlur\nsummary: Fires each time the DropDownList gets blurred.\nsyntax:\n  return:\n    type: '(event: DropDownListBlurEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onChange (children)\nname: onChange\nfullName: DropDownListProps.onChange\nsummary: >-\n  Fires each time the value of the DropDownList is about to change ([see\n  examples]({% slug binding_dropdownlist %})).\nsyntax:\n  return:\n    type: '(event: DropDownListChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onClose (children)\nname: onClose\nfullName: DropDownListProps.onClose\nsummary: Fires each time the popup of the DropDownList is about to close.\nsyntax:\n  return:\n    type: '(event: DropDownListCloseEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onFilterChange (children)\nname: onFilterChange\nfullName: DropDownListProps.onFilterChange\nsummary: >-\n  Fires each time the user types in the filter input. You can filter the source\n  based on the passed filtration value.\nsyntax:\n  return:\n    type: '(event: DropDownListFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onFocus (children)\nname: onFocus\nfullName: DropDownListProps.onFocus\nsummary: Fires each time the user focuses the DropDownList.\nsyntax:\n  return:\n    type: '(event: DropDownListFocusEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onOpen (children)\nname: onOpen\nfullName: DropDownListProps.onOpen\nsummary: Fires each time the popup of the DropDownList is about to open.\nsyntax:\n  return:\n    type: '(event: DropDownListOpenEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onPageChange (children)\nname: onPageChange\nfullName: DropDownListProps.onPageChange\nsummary: >-\n  Fires when both the virtual scrolling of the DropDownList is enabled and the\n  component requires data for another page ([see example]({% slug\n  virtualization_dropdownlist %})).\nsyntax:\n  return:\n    type: '(event: DropDownListPageChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.opened (children)\nname: opened\nfullName: DropDownListProps.opened\nsummary: Sets the opened and closed state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.popupSettings (children)\nname: popupSettings\nfullName: DropDownListProps.popupSettings\nsummary: Configures the popup of the DropDownList.\nsyntax:\n  return:\n    type: DropDownsPopupSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.required (children)\nname: required\nfullName: DropDownListProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.rounded (children)\nname: rounded\nfullName: DropDownListProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.size (children)\nname: size\nfullName: DropDownListProps.size\nsummary: \"Configures the \\n`size`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.skipDisabledItems (children)\nname: skipDisabledItems\nfullName: DropDownListProps.skipDisabledItems\nsummary: >-\n  Defines if DropDownList's disabled items will be skipped or focused when\n  navigating through the list of items using a keyboard. Defaults to \n\n  `true`\n\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.svgIcon (children)\nname: svgIcon\nfullName: DropDownListProps.svgIcon\nsummary: Sets the specified SVG icon.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.tabIndex (children)\nname: tabIndex\nfullName: DropDownListProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the DropDownList.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.textField (children)\nname: textField\nfullName: DropDownListProps.textField\nsummary: >-\n  Sets the data item field that represents the item text ([see example]({% slug\n  defaultitem_dropdownlist %})). If the data contains only primitive values, do\n  not define it.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.title (children)\nname: title\nfullName: DropDownListProps.title\nsummary: Sets the title attribute to the DropDownList DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valid (children)\nname: valid\nfullName: DropDownListProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.validationMessage (children)\nname: validationMessage\nfullName: DropDownListProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.validityStyles (children)\nname: validityStyles\nfullName: DropDownListProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.value (children)\nname: value\nfullName: DropDownListProps.value\nsummary: >-\n  Sets the value of the DropDownList ([see example]({% slug binding_dropdownlist\n  %})). It can either be of the primitive (string, numbers) or of the complex\n  (objects) type.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valueMap (children)\nname: valueMap\nfullName: DropDownListProps.valueMap\nsummary: >-\n  Represents a callback function, which returns the value for submitting. The\n  returned value will be rendered in an \n\n  `option`\n   of a hidden [\n  `select`\n\n  ](https://react.dev/reference/react-dom/components/select) element.\nsyntax:\n  return:\n    type: '(value: any) => any'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valueRender (children)\nname: valueRender\nfullName: DropDownListProps.valueRender\nsummary: >-\n  Fires when the element which renders the value is about to be rendered ([see\n  example]({% slug customrendering_dropdownlist %}#toc-values)). Used to\n  override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLSpanElement, string |\n      JSXElementConstructor<any>>, value: any) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.virtual (children)\nname: virtual\nfullName: DropDownListProps.virtual\nsummary: >-\n  Configures the virtual scrolling of the DropDownList ([see example]({% slug\n  virtualization_dropdownlist %})).\nsyntax:\n  return:\n    type: VirtualizationSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n\n## API Reference Item\n- Name: DropDownListProps.style\n- Type: Property\n- Summary: The styles that are applied to the DropDownList.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    const data = ['Item 1', 'Item 2', 'Item 3'];\n    return <DropDownList data={data} style={{ width: 200 }} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: DropDownListProps.itemRender\n- Type: Property\n- Summary: Fires when a DropDownList item is about to be rendered ([see example]({% slug customrendering_dropdownlist %}#toc-items)). Used to override the default appearance of the list items.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\n\nconst customItemRender = (li, itemProps) => {\n    return React.cloneElement(li, { style: { color: 'red' } }, itemProps.dataItem);\n};\n\nexport default function App() {\n    const data = ['Item 1', 'Item 2', 'Item 3'];\n    return <DropDownList data={data} itemRender={customItemRender} />;\n}\n\n```\n\n\n## Additional Context\n### ListItemProps (generic)\nname: ListItemProps\nfullName: ListItemProps\nsummary: Represents the props of the ListItem component.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - dataItem\n  - disabled\n  - focused\n  - group\n  - groupMode\n  - id\n  - index\n  - onClick\n  - render\n  - selected\n  - textField\n\n\nOut of the box, the Kendo React DropDownList provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\nDropDownList Code with Enabled Features\n\nThe following code represents a sample DropDownList implementation that also renders the ID of the selected category next to the DropDownList. To achieve this, define a category field in the application state and implement an <a href=\"/kendo-react-ui/components/dropdowns/api/dropdownlistprops#onchange\">onChange</a> handler.\nTo see the DropDownList in use, copy the sample code below and add it to your src/App.js file.\n\n3. Configuring an Advanced React Grid with DropDownList Filtering\n\nof this  DropDownList  in production—no sign-up or license required. It is part of KendoReact, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components. To test-drive premium functionality such as virtualization, <a href=\"https://www.telerik.com/try/kendo-react-ui\" rel=\"noopener\" target=\"_blank\">start a 30-day trial</a>.\nThe following example demonstrates the DropDownList in action.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "PanelBar": "## API Reference Item\n- Name: PanelBarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact PanelBar component]({% slug overview_panelbar %}).\n- Syntax: \n\n## Additional Context\n### PanelBarProps.animation (children)\nname: animation\nfullName: PanelBarProps.animation\nsummary: Sets the animation state of the PanelBar.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.children (children)\nname: children\nfullName: PanelBarProps.children\nsummary: The child can be either a single PanelBarItem or a PanelBarItem array.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.dir (children)\nname: dir\nfullName: PanelBarProps.dir\nsummary: Sets the direction of the PanelBar component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.expandMode (children)\nname: expandMode\nfullName: PanelBarProps.expandMode\nsummary: \"Sets the expand mode of the PanelBar ([see example]({% slug expandmodes_panelbar %})).\\r\\n\\r\\nThe available modes are:\\r\\n- \\n`\\\"single\\\"`\\n&mdash;Allows you to expand only one item at a time. The expanding of an item collapses the item that was previously expanded.\\r\\n- \\n`\\\"multiple\\\"`\\n&mdash;Allows you to expand two or more items at a time. Items can also be toggled.\"\nsyntax:\n  return:\n    type: PanelBarExpandMode\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.expanded (children)\nname: expanded\nfullName: PanelBarProps.expanded\nsummary: |-\n  Sets the initial expanded state of the PanelBar. Takes the \n  `id`\n   of the item.\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.focused (children)\nname: focused\nfullName: PanelBarProps.focused\nsummary: |-\n  Sets the initial focused state of the PanelBar. Takes the \n  `id`\n   of the item.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.isControlled (children)\nname: isControlled\nfullName: PanelBarProps.isControlled\nsummary: Determines if the PanelBar is going to be used in controlled state.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.keepItemsMounted (children)\nname: keepItemsMounted\nfullName: PanelBarProps.keepItemsMounted\nsummary: Determines if the PanelBar items will be mounted after expand collapse.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.onSelect (children)\nname: onSelect\nfullName: PanelBarProps.onSelect\nsummary: >-\n  Fires each time the user makes a selection ([see example]({% slug\n  controlling_state_panelbar %})).\nsyntax:\n  return:\n    type: '(event: PanelBarSelectEventArguments) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.selected (children)\nname: selected\nfullName: PanelBarProps.selected\nsummary: >-\n  If set, overrides the currently selected property in the PanelBar state. Takes\n  the \n\n  `id`\n   of the item.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.style (children)\nname: style\nfullName: PanelBarProps.style\nsummary: Sets additional CSS styles to the PanelBar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: PanelBarProps.className\n- Type: Property\n- Summary: The class name that is set to the PanelBar.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar className=\"custom-panelbar\">\n            <PanelBarItem title=\"Item 1\" />\n            <PanelBarItem title=\"Item 2\" />\n        </PanelBar>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: PanelBar\n- Type: Class\n- Summary: Represents the [KendoReact PanelBar component]({% slug overview_panelbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 2\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 3\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 4\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 5\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 6\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 7\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 8\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n\n\n## Additional Context\n### PanelBar.constructor (children)\nname: constructor\nfullName: PanelBar.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar._element (children)\nname: _element\nfullName: PanelBar._element\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.activeDescendant (children)\nname: activeDescendant\nfullName: PanelBar.activeDescendant\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleKeyDown (children)\nname: handleKeyDown\nfullName: PanelBar.handleKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleWrapperBlur (children)\nname: handleWrapperBlur\nfullName: PanelBar.handleWrapperBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleWrapperFocus (children)\nname: handleWrapperFocus\nfullName: PanelBar.handleWrapperFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.nextTickId (children)\nname: nextTickId\nfullName: PanelBar.nextTickId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.children (children)\nname: children\nfullName: PanelBar.children\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.expandMode (children)\nname: expandMode\nfullName: PanelBar.expandMode\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.expandedItems (children)\nname: expandedItems\nfullName: PanelBar.expandedItems\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.selectedItem (children)\nname: selectedItem\nfullName: PanelBar.selectedItem\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.nextTick (children)\nname: nextTick\nfullName: PanelBar.nextTick\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\nKendoReact PanelBar Overview\n\nThe KendoReact PanelBar displays hierarchical data as a multi-level, expandable component.\nYou can describe the children items by:\n\nUsing nested PanelBarItem components, or\n<a href=\"/kendo-react-ui-develop/components/layout/panelbar/data-binding\">Binding a data collection</a> to the PanelBarItem components.\n\n<a href=\"https://telerik.github.io/kendo-react/kendo-react-tailwind/\" rel=\"noopener\" target=\"_blank\">Open the sample in a new tab</a> to explore its responsive design, built with Tailwind CSS utility classes.\n\nCustomizing Styled KendoReact Components with Tailwind CSS\n\nSince KendoReact components do not natively utilize Tailwind CSS utility classes in their markup, you cannot style them directly using Tailwind CSS class names. Instead, you can customize their visual appearance by overriding the corresponding Kendo UI theme variables with default Tailwind CSS variables or with your own custom variables.\n\nBuilt-in animations for the components that show and hide\nConfigurable orientation to determine the direction of the elements\n<a href=\"/kendo-react-ui/components/layout/globalization\">Globalization</a>\nOut-of-the-box accessibility and keyboard navigation\n\nHow Do the KendoReact Layout Components Work?\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "DataGrid": "## API Reference Item\n- Name: GridProps.autoProcessData\n- Type: Property\n- Summary: Enables data-processing inside the GridComponent based on its state.\r\nProvides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridCellsSettings.data\n- Type: Property\n- Summary: Custom component for rendering the data cell.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn as Column, GridCellsSettings } from '@progress/kendo-react-grid';\n\nconst products = [\n    {\n        ProductID: 1,\n        ProductName: 'Chai',\n        SupplierID: 1,\n        CategoryID: 1,\n        QuantityPerUnit: '10 boxes x 20 bags',\n        UnitPrice: 18.0,\n        UnitsInStock: 39,\n        UnitsOnOrder: 0,\n        ReorderLevel: 10,\n        Discontinued: false,\n        Category: {\n            CategoryID: 1,\n            CategoryName: 'Beverages',\n            Description: 'Soft drinks, coffees, teas, beers, and ales'\n        }\n    },\n    {\n        ProductID: 2,\n        ProductName: 'Chang',\n        SupplierID: 1,\n        CategoryID: 1,\n        QuantityPerUnit: '24 - 12 oz bottles',\n        UnitPrice: 19.0,\n        UnitsInStock: 17,\n        UnitsOnOrder: 40,\n        ReorderLevel: 25,\n        Discontinued: false,\n        Category: {\n            CategoryID: 1,\n            CategoryName: 'Beverages',\n            Description: 'Soft drinks, coffees, teas, beers, and ales'\n        }\n    },\n    {\n        ProductID: 3,\n        ProductName: 'Aniseed Syrup',\n        SupplierID: 1,\n        CategoryID: 2,\n        QuantityPerUnit: '12 - 550 ml bottles',\n        UnitPrice: 10.0,\n        UnitsInStock: 13,\n        UnitsOnOrder: 70,\n        ReorderLevel: 25,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 4,\n        ProductName: 'Chef Antons Cajun Seasoning',\n        SupplierID: 2,\n        CategoryID: 2,\n        QuantityPerUnit: '48 - 6 oz jars',\n        UnitPrice: 22.0,\n        UnitsInStock: 53,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 5,\n        ProductName: 'Chef Antons Gumbo Mix',\n        SupplierID: 2,\n        CategoryID: 2,\n        QuantityPerUnit: '36 boxes',\n        UnitPrice: 21.35,\n        UnitsInStock: 0,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: true,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 6,\n        ProductName: 'Grandmas Boysenberry Spread',\n        SupplierID: 3,\n        CategoryID: 2,\n        QuantityPerUnit: '12 - 8 oz jars',\n        UnitPrice: 25.0,\n        UnitsInStock: 120,\n        UnitsOnOrder: 0,\n        ReorderLevel: 25,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 7,\n        ProductName: 'Uncle Bobs Organic Dried Pears',\n        SupplierID: 3,\n        CategoryID: 7,\n        QuantityPerUnit: '12 - 1 lb pkgs.',\n        UnitPrice: 30.0,\n        UnitsInStock: 15,\n        UnitsOnOrder: 0,\n        ReorderLevel: 10,\n        Discontinued: false,\n        Category: {\n            CategoryID: 7,\n            CategoryName: 'Produce',\n            Description: 'Dried fruit and bean curd'\n        }\n    },\n    {\n        ProductID: 8,\n        ProductName: 'Northwoods Cranberry Sauce',\n        SupplierID: 3,\n        CategoryID: 2,\n        QuantityPerUnit: '12 - 12 oz jars',\n        UnitPrice: 40.0,\n        UnitsInStock: 6,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 9,\n        ProductName: 'Mishi Kobe Niku',\n        SupplierID: 4,\n        CategoryID: 6,\n        QuantityPerUnit: '18 - 500 g pkgs.',\n        UnitPrice: 97.0,\n        UnitsInStock: 29,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: true,\n        Category: {\n            CategoryID: 6,\n            CategoryName: 'Meat/Poultry',\n            Description: 'Prepared meats'\n        }\n    },\n    {\n        ProductID: 10,\n        ProductName: 'Ikura',\n        SupplierID: 4,\n        CategoryID: 8,\n        QuantityPerUnit: '12 - 200 ml jars',\n        UnitPrice: 31.0,\n        UnitsInStock: 31,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: false,\n        Category: {\n            CategoryID: 8,\n            CategoryName: 'Seafood',\n            Description: 'Seaweed and fish'\n        }\n    }\n];\n\nconst App = () => {\n    const cellsSettings: GridCellsSettings = {\n        data: (tdProps) => {\n            const { ProductName } = tdProps.dataItem;\n            const { style, className, colSpan } = tdProps;\n\n            return (\n                <td style={style} className={className} colSpan={colSpan}>\n                    {ProductName} Custom Cell\n                </td>\n            );\n        }\n    };\n\n    return (\n        <Grid data={products} cells={cellsSettings}>\n            <Column field=\"ProductID\" title=\"ID\" />\n            <Column field=\"ProductName\" title=\"Product Name\" />\n            <Column field=\"UnitPrice\" title=\"Price\" />\n            <Column field=\"UnitsInStock\" title=\"In stock\" />\n        </Grid>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: GridProps.onDetailExpandChange\n- Type: Property\n- Summary: Fires when the user expands or collapses a detail row.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridDetailExpandChangeEvent, GridDetailRowProps } from '@progress/kendo-react-grid';\nimport { DetailExpandDescriptor } from '@progress/kendo-react-data-tools';\n\nconst sampleData = [\n    {\n        id: 1,\n        name: 'Alice',\n        description: 'description 1',\n        catName: 'cat 1',\n        catId: 'cat1'\n    },\n    {\n        id: 2,\n        name: 'Bob',\n        description: 'description 2',\n        catName: 'cat 2',\n        catId: 'cat2'\n    },\n    {\n        id: 3,\n        name: 'Charlie',\n        description: 'description 3',\n        catName: 'cat 3',\n        catId: 'cat3'\n    }\n];\n\nconst DetailComponent = (props: GridDetailRowProps) => {\n    const dataItem = props.dataItem;\n    return (\n        <section>\n            <p>\n                <strong>Category ID:</strong> {dataItem.catName}\n            </p>\n            <p>\n                <strong>Category Name:</strong> {dataItem.catId}\n            </p>\n        </section>\n    );\n};\n\nexport default function App() {\n    const [detailExpand, setDetailExpand] = React.useState<DetailExpandDescriptor>({ [sampleData[1].id]: true });\n\n    const handleDetailExpandChange = (event: GridDetailExpandChangeEvent) => {\n        setDetailExpand(event.detailExpand);\n    };\n\n    return (\n        <Grid\n            data={sampleData}\n            autoProcessData={true}\n            dataItemKey=\"id\"\n            detail={DetailComponent}\n            detailExpand={detailExpand}\n            onDetailExpandChange={handleDetailExpandChange}\n        >\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## Additional Context\n### GridDetailExpandChangeEvent (generic)\nname: GridDetailExpandChangeEvent\nfullName: GridDetailExpandChangeEvent\nsummary: |-\n  Represents the object of the \n  `onDetailExpandChange`\n   Grid event.\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - detailExpand\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n## API Reference Item\n- Name: GridToolbar\n- Type: Function\n- Summary: Represents the GridToolbar component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridToolbar } from '@progress/kendo-react-grid';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridToolbar>\n                <Button>My Toolbar Button</Button>\n            </GridToolbar>\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## Additional Context\n### GridToolbar.GridToolbar.props (children)\nname: props\nfullName: GridToolbar.GridToolbar.props\nsyntax:\n  return:\n    type: GridToolbarProps\n\n\n## API Reference Item\n- Name: GridProps.selectable\n- Type: Property\n- Summary: The Grid selectable settings.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid\n            data={sampleData}\n            autoProcessData={true}\n            dataItemKey=\"id\"\n            selectable={{\n                enabled: true\n            }}\n        >\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\nThe KendoReact Data Grid provides toolbar tools to enhance user interactions and streamline workflows. These tools allow you to perform actions like sorting, filtering, and managing columns directly from the toolbar.\n\n<a href=\"/kendo-react-ui/components/datatools/api/usedatasource\">useDataSource</a>—A basic hook for managing in-memory data with built-in support for sorting, filtering, grouping, and paging.\n<a href=\"/kendo-react-ui/components/datatools/api/useremotedatasource\">useRemoteDataSource</a>—Extends the base functionality to work with remote data sources, handling server-side data operations.\n\nRemote Data OperationsPremium\n\nThis guide demonstrates how to use the <a href=\"/kendo-react-ui/components/datatools/api/useremotedatasource\">useRemoteDataSource</a> and <a href=\"/kendo-react-ui/components/datatools/api/useodatadatasource\">useODataDataSource</a> hooks for working with remote data services.\n\nRemote Data Integration Example\n\nHere is a complete example showing how to integrate a Grid with useRemoteDataSource to perform CRUD operations against a remote API:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nUsing useRemoteDataSource\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Badge": "## API Reference Item\n- Name: BadgeProps.themeColor\n- Type: Property\n- Summary: Specifies the theme color of the Badge.\r\n\r\nThe possible values are:\r\n* \n`base`\n &mdash;Applies coloring based on the \n`base`\n theme color.\r\n* \n`primary`\n (Default)&mdash;Applies coloring based on primary theme color.\r\n* \n`secondary`\n&mdash;Applies coloring based on secondary theme color.\r\n* \n`tertiary`\n&mdash; Applies coloring based on tertiary theme color.\r\n* \n`inherit`\n&mdash; Applies inherited coloring value.\r\n* \n`info`\n&mdash;Applies coloring based on info theme color.\r\n* \n`success`\n&mdash; Applies coloring based on success theme color.\r\n* \n`warning`\n&mdash; Applies coloring based on warning theme color.\r\n* \n`error`\n&mdash; Applies coloring based on error theme color.\r\n* \n`dark`\n&mdash; Applies coloring based on dark theme color.\r\n* \n`light`\n&mdash; Applies coloring based on light theme color.\r\n* \n`inverse`\n&mdash; Applies coloring based on inverse theme color.\r\n* null&mdash;Does not set a themeColor \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge themeColor=\"success\">Success</Badge>\n        </Button>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Badge\n- Type: Function\n- Summary: Represents the [KendoReact Badge component]({% slug overview_badge %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge themeColor=\"info\" />\n        </Button>\n    );\n}\n\n```\n\n\n## Additional Context\n### Badge.Badge.props (children)\nname: props\nfullName: Badge.Badge.props\nsyntax:\n  return:\n    type: BadgeProps | RefAttributes\n\n\n## API Reference Item\n- Name: BadgeProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Badge component]({% slug overview_badge %}).\n- Syntax: \n\n## Additional Context\n### BadgeProps.align (children)\nname: align\nfullName: BadgeProps.align\nsummary: \"Specifies the alignment of the Badge.\\r\\n\\r\\nThe possible keys are:\\r\\n* \\n`horizontal`\\n&mdash; Defines the possible horizontal alignment of the Badge.\\r\\n  * \\n`'start'`\\n&mdash;Uses the start point of the parent element.\\r\\n  * \\n`'end'`\\n(Default)&mdash;Uses the end point of the parent element.\\r\\n  *  \\n`null`\\n No horizontal alignment.\\r\\n* \\n`vertical`\\n&mdash; Defines the possible vertical alignment of the Badge.\\r\\n  * \\n`'top'`\\n(Default)&mdash;Uses the top point of the parent element.\\r\\n  * \\n`'bottom'`\\n&mdash;Uses the bottom point of the parent element.\\r\\n  *  \\n`null`\\n No horizontal alignment.\"\nsyntax:\n  return:\n    type: '{ horizontal: null | \"start\" | \"end\", vertical: null | \"top\" | \"bottom\" }'\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.children (children)\nname: children\nfullName: BadgeProps.children\nsummary: The React elements that will be rendered inside the Badge.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.className (children)\nname: className\nfullName: BadgeProps.className\nsummary: Specifies a list of CSS classes that will be added to the Badge.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.cutoutBorder (children)\nname: cutoutBorder\nfullName: BadgeProps.cutoutBorder\nsummary: \"Specifies wether or not to render additional \\\"cutout\\\" border around the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`true`\\n\\r\\n* \\n`false`\\n (Default)\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.dir (children)\nname: dir\nfullName: BadgeProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute. This is used to switch from LTR to RTL.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.fillMode (children)\nname: fillMode\nfullName: BadgeProps.fillMode\nsummary: \"Specifies the appearance fill style of the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`solid`\\n (Default)\\r\\n* \\n`outline`\\n\\r\\n* null&mdash;Does not set a fillMode \\n`className`\"\nsyntax:\n  return:\n    type: null | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.position (children)\nname: position\nfullName: BadgeProps.position\nsummary: \"Specifies the position of the Badge relative to the edge of the container element.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`'edge'`\\n (Default)&mdash;The center of the Badge is positioned on the edge of the container element.\\r\\n* \\n`'outside'`\\n&mdash;The Badge is entirely positioned outside the edge of the container element.\\r\\n* \\n`'inside'`\\n&mdash;The Badge is entirely positioned inside the edge of the the container element.\\r\\n* \\n`null`\\n &mdash; No position class is applied.\"\nsyntax:\n  return:\n    type: null | \"edge\" | \"outside\" | \"inside\"\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.rounded (children)\nname: rounded\nfullName: BadgeProps.rounded\nsummary: \"Specifies the roundness of the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n- small\\r\\n- medium (Default)\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.size (children)\nname: size\nfullName: BadgeProps.size\nsummary: \"Specifies the size of the Badge.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`small`\\n\\r\\n* \\n`medium`\\n (Default)\\r\\n* \\n`large`\\n\\r\\n* null&mdash;Does not set a size \\n`className`\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-indicators'\n\n---\n### BadgeProps.style (children)\nname: style\nfullName: BadgeProps.style\nsummary: Sets additional CSS styles to the Badge.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-indicators'\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/indicators/badge\">\n\n\n\nBadge\nA component that represents a visual indicator such as status or notification.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/indicators/loader\">\n\n\n\nLoader\nA component that represents a visual indication of an indeterminate wait time.\n</a>\n\nThe Badge component is a visual indicator for UI elements. It enables you to easily show statuses, notifications, and short messages in your app. Badges provide additional contextual information for other elements on the page.\nThe KendoReact Badge is distributed through the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-indicators\" rel=\"noopener\" target=\"_blank\">kendo-react-indicators NPM package</a>.\n\nAppearance\n\nThe Badge component provides many predefined appearance options such as different shapes, sizes, theme colors and optional cutout borders.\n\nTheme Color\n\nThe Badge allows you to specify predefined theme colors.\nThe available <a href=\"/kendo-react-ui-develop/components/indicators/api/badgeprops#themecolor\">themeColor</a> values are:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Avatar": "## API Reference Item\n- Name: AvatarProps.rounded\n- Type: Property\n- Summary: Configures the \n`roundness`\n of the Avatar.\r\n\r\nThe available options are:\r\n- small\r\n- medium\r\n- large\r\n- full\r\n- null&mdash;Does not set a rounded \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Avatar } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Avatar rounded=\"large\">AB</Avatar>;\n}\n\n```\n\n\n## API Reference Item\n- Name: AvatarProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Avatar.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Avatar } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Avatar style={{ backgroundColor: 'green', color: 'white' }}>A</Avatar>;\n}\n\n```\n\n\nThe Avatar component is typically used to display images, icons, or initials representing people or other entities.\nThis   is   a  Free React  AvatarThe KendoReact  Avatar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Avatar in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... Key Features\n\n\n<a href=\"/kendo-react-ui-develop/components/layout/avatar/appearance\">Appearance</a>—The Avatar comes with predefined option that allow you to set its shape, type, color, size, border, and fill.\n\n<a href=\"/kendo-react-ui/components/layout/avatar\">KendoReact Avatar</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Toolbar": "## API Reference Item\n- Name: ToolbarProps.scrollButtons\n- Type: Property\n- Summary: Determines the Toolbar scroll buttons visibility.\r\nApplicable when the overflow property is set to \n`scroll`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar, Button, ButtonGroup } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return (\n        <Toolbar overflow=\"scroll\" scrollButtons=\"hidden\" style={{ width: '300px' }}>\n            <ButtonGroup>\n                <Button>Tool 1</Button>\n                <Button>Tool 2</Button>\n                <Button>Tool 3</Button>\n                <Button>Tool 4</Button>\n                <Button>Tool 5</Button>\n                <Button>Tool 6</Button>\n                <Button>Tool 7</Button>\n                <Button>Tool 8</Button>\n            </ButtonGroup>\n        </Toolbar>\n    );\n};\nexport default App;\n\n```\n\n\nThe KendoReact Toolbar allows you to render Button, ButtonGroup, DropDownButton, SplitButton and custom button components in it.\n\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/tools\">Tools</a>—You can include various button types in the Toolbar and create a handy selection of tools.\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/adaptive-rendering\">Adaptive Rendering</a>—The ToolBar provides options to hide the tools that do not fit its width in an overflow section or rendering scroll arrows.\n\nAdd buttons to your <a href=\"/kendo-react-ui/components/grid\">Grid</a> header or rows.\nUse buttons to submit data with <a href=\"/kendo-react-ui/components/inputs\">Inputs</a>.\nBuild more interactive <a href=\"/kendo-react-ui/components/dialogs\">Dialogs</a> with buttons.\nShow <a href=\"/kendo-react-ui/components/notification\">Notifications</a> when you trigger an action with a button.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Chip": "## API Reference Item\n- Name: ChipProps\n- Type: Interface\n- Summary: Represents the properties of [Chip]({% slug api_buttons_chip %}) component.\n- Syntax: \n\n## Additional Context\n### ChipProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: ChipProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which describe the component, similar to an [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example, these elements could contain an error or a hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.ariaLabel (children)\nname: ariaLabel\nfullName: ChipProps.ariaLabel\nsummary: Represents the label of the Chip component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.avatar (children)\nname: avatar\nfullName: ChipProps.avatar\nsummary: Determines if the Chip has an avatar.\nsyntax:\n  return:\n    type: ChipAvatarProps\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.children (children)\nname: children\nfullName: ChipProps.children\nsummary: The React elements that will be rendered as custom content inside the Chip.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.className (children)\nname: className\nfullName: ChipProps.className\nsummary: Sets additional classes to the Chip.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.dataItem (children)\nname: dataItem\nfullName: ChipProps.dataItem\nsummary: |-\n  Represents the item data, coming from the \n  `ChipList`\n   component.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.dir (children)\nname: dir\nfullName: ChipProps.dir\nsummary: The Chip direction 'ltr' as default or 'rtl'.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.disabled (children)\nname: disabled\nfullName: ChipProps.disabled\nsummary: Determines if the Chip is disabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.fillMode (children)\nname: fillMode\nfullName: ChipProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Chip.\\r\\nThe available options are:\\r\\n- \\n`solid`\\n\\r\\n- \\n`outline`\\n\\r\\n- \\n`null`\\n (removes built-in fill mode styles)\"\nsyntax:\n  return:\n    type: null | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.icon (children)\nname: icon\nfullName: ChipProps.icon\nsummary: |-\n  Determines if the Chip has a font \n  `icon`\n  .\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.id (children)\nname: id\nfullName: ChipProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the Chip.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onBlur (children)\nname: onBlur\nfullName: ChipProps.onBlur\nsummary: |-\n  Fires on \n  `onBlur`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipFocusEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onClick (children)\nname: onClick\nfullName: ChipProps.onClick\nsummary: |-\n  Fires on \n  `onClick`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onDoubleClick (children)\nname: onDoubleClick\nfullName: ChipProps.onDoubleClick\nsummary: |-\n  Fires on \n  `onDoubleClick`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onFocus (children)\nname: onFocus\nfullName: ChipProps.onFocus\nsummary: |-\n  Fires on \n  `onFocus`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipFocusEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onKeyDown (children)\nname: onKeyDown\nfullName: ChipProps.onKeyDown\nsummary: |-\n  Fires on \n  `onKeyDown`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipKeyboardEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseDown (children)\nname: onMouseDown\nfullName: ChipProps.onMouseDown\nsummary: |-\n  Fires on \n  `onMouseDown`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseEnter (children)\nname: onMouseEnter\nfullName: ChipProps.onMouseEnter\nsummary: |-\n  Fires on \n  `onMouseEnter`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseLeave (children)\nname: onMouseLeave\nfullName: ChipProps.onMouseLeave\nsummary: |-\n  Fires on \n  `onMouseLeave`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseMove (children)\nname: onMouseMove\nfullName: ChipProps.onMouseMove\nsummary: |-\n  Fires on \n  `onMouseMove`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseOut (children)\nname: onMouseOut\nfullName: ChipProps.onMouseOut\nsummary: |-\n  Fires on \n  `onMouseOut`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseOver (children)\nname: onMouseOver\nfullName: ChipProps.onMouseOver\nsummary: |-\n  Fires on \n  `onMouseOver`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onMouseUp (children)\nname: onMouseUp\nfullName: ChipProps.onMouseUp\nsummary: |-\n  Fires on \n  `onMouseUp`\n   event.\nsyntax:\n  return:\n    type: '(event: ChipMouseEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.onRemove (children)\nname: onRemove\nfullName: ChipProps.onRemove\nsummary: Fires on Chip removing.\nsyntax:\n  return:\n    type: '(event: ChipRemoveEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.removable (children)\nname: removable\nfullName: ChipProps.removable\nsummary: Determines if the Chip could be removed.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.removeIcon (children)\nname: removeIcon\nfullName: ChipProps.removeIcon\nsummary: |-\n  Determines if the Chip has custom font \n  `removeIcon`\n  .\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.removeSvgIcon (children)\nname: removeSvgIcon\nfullName: ChipProps.removeSvgIcon\nsummary: |-\n  Determines if the Chip has custom SVG \n  `removeIcon`\n  .\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.rounded (children)\nname: rounded\nfullName: ChipProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the Chip.\\r\\nThe available options are:\\r\\n- \\n`small`\\n\\r\\n- \\n`medium`\\n\\r\\n- \\n`large`\\n\\r\\n- \\n`full`\\n\\r\\n- \\n`null`\\n (removes built-in roundness styles)\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.selected (children)\nname: selected\nfullName: ChipProps.selected\nsummary: Determines if the Chip is selected.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.selectedIcon (children)\nname: selectedIcon\nfullName: ChipProps.selectedIcon\nsummary: |-\n  Determines if the Chip has custom selection font \n  `icon`\n  .\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.selectedSvgIcon (children)\nname: selectedSvgIcon\nfullName: ChipProps.selectedSvgIcon\nsummary: |-\n  Determines if the Chip has custom selection SVG \n  `icon`\n  .\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.size (children)\nname: size\nfullName: ChipProps.size\nsummary: \"Configures the \\n`size`\\n of the Chip.\\r\\nThe available options are:\\r\\n- \\n`small`\\n\\r\\n- \\n`medium`\\n\\r\\n- \\n`large`\\n\\r\\n- \\n`null`\\n (removes built-in size styles)\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.style (children)\nname: style\nfullName: ChipProps.style\nsummary: Sets additional CSS styles to the Chip.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.svgIcon (children)\nname: svgIcon\nfullName: ChipProps.svgIcon\nsummary: |-\n  Determines if the Chip has an SVG \n  `icon`\n  .\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.tabIndex (children)\nname: tabIndex\nfullName: ChipProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   attribute.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.text (children)\nname: text\nfullName: ChipProps.text\nsummary: Sets the label text of the Chip.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.themeColor (children)\nname: themeColor\nfullName: ChipProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Chip.\\r\\nThe available options are:\\r\\n- \\n`base`\\n\\r\\n- \\n`info`\\n\\r\\n- \\n`success`\\n\\r\\n- \\n`warning`\\n\\r\\n- \\n`error`\\n\\r\\n- \\n`null`\\n (removes built-in theme color styles)\"\nsyntax:\n  return:\n    type: null | \"base\" | \"info\" | \"success\" | \"warning\" | \"error\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ChipProps.value (children)\nname: value\nfullName: ChipProps.value\nsummary: |-\n  Sets the \n  `id`\n   value of the Chip.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-buttons'\n\n\nThe KendoReact Chip component allows users to enter information, make selections, filter content, or trigger actions.\nThe KendoReact Chip is distributed through the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-buttons\" rel=\"noopener\" target=\"_blank\">kendo-react-buttons NPM package</a>. This   is   a  Free React  ChipThe KendoReact  Chip   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Chip in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustomization\n\nThe Chip component provides the following options for customizing its look and feel:\n\nDisplay avatar, custom classes and icons\nSelect icon\nCustom remove icon\nCustom content\n\nDisplay avatar, custom classes and icons\n\nYou can specify a display avatar or custom classes, icons by using the <a href=\"/kendo-react-ui-develop/components/buttons/api/chipprops#icon\">icon</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom Select Icon\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "ProgressBar": "## API Reference Item\n- Name: ProgressBarProps.label\n- Type: Property\n- Summary: Provides a custom label component for the ProgressBar ([see example]({% slug progressbar_label %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ProgressBar, LabelProps } from '@progress/kendo-react-progressbars';\n\nconst CustomLabel = (props: LabelProps) => <span>{props.value}%</span>;\n\nconst App = () => {\n    return <ProgressBar value={50} label={CustomLabel} />;\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: ProgressBar\n- Type: Function\n- Summary: Represents the [KendoReact ProgressBar component]({% slug overview_progressbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ProgressBar } from '@progress/kendo-react-progressbars';\n\nexport default function App() {\n    return (\n        <ProgressBar value={50} />\n    );\n}\n\n```\n\n\n## Additional Context\n### ProgressBarProps (children)\nname: ProgressBarProps\nfullName: ProgressBarProps\nsummary: >-\n  Represents the props of the [KendoReact ProgressBar component]({% slug\n  overview_progressbar %}).\nsyntax: {}\npackageName: '@progress/kendo-react-progressbars'\nmembers:\n  - animation\n  - ariaLabel\n  - className\n  - dir\n  - disabled\n  - emptyClassName\n  - emptyStyle\n  - label\n  - labelPlacement\n  - labelVisible\n  - max\n  - min\n  - orientation\n  - progressClassName\n  - progressStyle\n  - reverse\n  - style\n  - tabIndex\n  - value\n\n---\n### ProgressBar.ProgressBar.props (children)\nname: props\nfullName: ProgressBar.ProgressBar.props\nsyntax:\n  return:\n    type: ProgressBarProps | RefAttributes\n\n\nLabel\n\nYou can configure the visibility, position of the label as well as customizing the label which indicates the status of the task progress in the ProgressBar.\n\nGetting Started\n\nTo customize the label position and visibility in the ProgressBar, use the <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#labelvisible\">labelVisible</a> and <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#labelplacement\">labelPlacement</a> properties.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSetting Custom Format\n\nKey Features\n\nThe KendoReact Progress Bars provide the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance\n\nBuilt-in appearance options to adjust the dimensions of your Progress Bars\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n\nYou can customize the label and the bar that indicates the task progress by setting custom styling or custom classes to the inner elements that are responsible for their rendering. To define the custom layout, use the <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#progressstyle\">progressStyle</a> and <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#progressclassname\">progressClassName</a> options for the completed part and <a\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Tooltip": "## API Reference Item\n- Name: Tooltip\n- Type: Class\n- Summary: Represents the [KendoReact Tooltip component]({% slug overview_tooltip %}).\r\n\r\nAccepts properties of type [TooltipProps]({% slug api_tooltip_tooltipprops %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react'\nimport { Tooltip } from '@progress/kendo-react-tooltip'\n\nfunction App() {\n    return (\n        <Tooltip>\n            <button>Hover me</button>\n        </Tooltip>\n    )\n}\n\n\n```\n\n\n## Additional Context\n### Tooltip.calloutClassName (children)\nname: calloutClassName\nfullName: Tooltip.calloutClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.compareTargets (children)\nname: compareTargets\nfullName: Tooltip.compareTargets\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.getCurrentZIndex (children)\nname: getCurrentZIndex\nfullName: Tooltip.getCurrentZIndex\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.getTitle (children)\nname: getTitle\nfullName: Tooltip.getTitle\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleBodyMousemove (children)\nname: handleBodyMousemove\nfullName: Tooltip.handleBodyMousemove\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleEscape (children)\nname: handleEscape\nfullName: Tooltip.handleEscape\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleKeyDown (children)\nname: handleKeyDown\nfullName: Tooltip.handleKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleMouseOut (children)\nname: handleMouseOut\nfullName: Tooltip.handleMouseOut\nsummary: The method is used on the MouseOut event to hide the Tooltip.\nsyntax:\n  return:\n    type: '(event: any) => void'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleMouseOver (children)\nname: handleMouseOver\nfullName: Tooltip.handleMouseOver\nsummary: |-\n  Used on the \n  `MouseOver`\n   event to show the Tooltip.\nsyntax:\n  return:\n    type: '(event: any) => void'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.isVisible (children)\nname: isVisible\nfullName: Tooltip.isVisible\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.left (children)\nname: left\nfullName: Tooltip.left\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.onClose (children)\nname: onClose\nfullName: Tooltip.onClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.onIntervalUpdate (children)\nname: onIntervalUpdate\nfullName: Tooltip.onIntervalUpdate\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.openTimeoutId (children)\nname: openTimeoutId\nfullName: Tooltip.openTimeoutId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.position (children)\nname: position\nfullName: Tooltip.position\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.setUpdateInterval (children)\nname: setUpdateInterval\nfullName: Tooltip.setUpdateInterval\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.showToolTip (children)\nname: showToolTip\nfullName: Tooltip.showToolTip\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.top (children)\nname: top\nfullName: Tooltip.top\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.updateIntervalId (children)\nname: updateIntervalId\nfullName: Tooltip.updateIntervalId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.willOpen (children)\nname: willOpen\nfullName: Tooltip.willOpen\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.defaultProps (children)\nname: defaultProps\nfullName: Tooltip.defaultProps\nsummary: The default properties of the Tooltip component.\nsyntax:\n  return:\n    type: >-\n      { anchorElement: string, openDelay: number, parentTitle: boolean,\n      position: string, showCallout: boolean }\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps (children)\nname: TooltipProps\nfullName: TooltipProps\nsummary: >-\n  Represents the props of the [KendoReact Tooltip component]({% slug\n  overview_tooltip %}).\nsyntax: {}\npackageName: '@progress/kendo-react-tooltip'\nmembers:\n  - anchorElement\n  - appendTo\n  - children\n  - className\n  - content\n  - filter\n  - id\n  - onClose\n  - onOpen\n  - onPosition\n  - open\n  - openDelay\n  - parentTitle\n  - position\n  - setCalloutOnPositionAuto\n  - showCallout\n  - showOption\n  - style\n  - targetElement\n  - tooltipClassName\n  - tooltipStyle\n  - updateInterval\n\n\nTemplates\n\nYou can provide a custom rendering for the content of the Tooltip.\nBy default, the Tooltip shows the title attribute value of the anchor element. To customize the default content, set the <a href=\"/kendo-react-ui-develop/components/tooltip/api/tooltipprops#content\">content</a> property of the Tooltip. content can accept a JSX element or another component and the title property of the anchor element will be received as props.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n<a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/controlled-mode\">Controlled mode</a> - The KendoReact Tooltip provides options for you to show it programmatically not only on hover.\n<a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/anchor-elements\">Specifying anchor elements</a> - You can target specific anchor elements which will render a tooltip. <a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/multiple-tooltips\">Rendering multiple Tooltips</a> - You can display multiple Tooltips on the same page.\n<a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/tooltip-customization\">Customizing the Tooltip</a> - You can place the Tooltip in a specific location and attach its handlers there.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "DateRangePicker": "## API Reference Item\n- Name: DateRangePickerProps.onChange\n- Type: Property\n- Summary: Fires when the user changes part of the range ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { DateRangePicker, DateRangePickerChangeEvent, SelectionRange } from '@progress/kendo-react-dateinputs';\n\nconst App = () => {\n    const [value, setValue] = React.useState<SelectionRange>({\n        start: new Date(2018, 8, 5),\n        end: new Date(2018, 8, 12)\n    });\n\n    const handleChange = (event: DateRangePickerChangeEvent) => {\n        setValue(event.value);\n    };\n\n    return <DateRangePicker value={value} onChange={handleChange} />;\n};\nexport default App;\n\n```\n\n\n## Additional Context\n### DateRangePickerChangeEvent (generic)\nname: DateRangePickerChangeEvent\nfullName: DateRangePickerChangeEvent\nsummary: |-\n  The arguments for the \n  `onChange`\n   event of the DateRangePicker.\nsyntax: {}\npackageName: '@progress/kendo-react-dateinputs'\nmembers:\n  - nativeEvent\n  - show\n  - syntheticEvent\n  - target\n  - value\n\n\n## API Reference Item\n- Name: DateRangePickerProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact DateRangePicker component]({% slug overview_daterangepicker %}).\n- Syntax: \n\n## Additional Context\n### DateRangePickerProps.adaptive (children)\nname: adaptive\nfullName: DateRangePickerProps.adaptive\nsummary: \"/**\\r\\n* Enable adaptive popup rendering based on viewport width.\\r\\n*\\r\\n*\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: DateRangePickerProps.adaptiveSubtitle\nsummary: \"/**\\r\\n* Set the subtitle text in the adaptive popup (action sheet).\\r\\n* Use only when \\n`adaptive`\\n is \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: DateRangePickerProps.adaptiveTitle\nsummary: \"/**\\r\\n* Set the title text in the adaptive popup (action sheet).\\r\\n* Use only when \\n`adaptive`\\n is \\n`true`\\n.\\r\\n* If not set, it matches the \\n`label`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.allowReverse (children)\nname: allowReverse\nfullName: DateRangePickerProps.allowReverse\nsummary: \"If \\n`allowReverse`\\n is set to \\n`true`\\n, the component skips the validation of whether the \\n`from`\\n value is after the \\n`to`\\n value ([see example]({% slug reverse_daterangepicker %})).\\r\\n\\r\\n> If the [\\n`calendarSettings`\\n](#toc-calendarsettings) property is set, its \\n`allowReverse`\\n will take precedence.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: DateRangePickerProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: DateRangePickerProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.autoFocus (children)\nname: autoFocus\nfullName: DateRangePickerProps.autoFocus\nsummary: \"/**\\r\\n* Apply the \\n`autoFocus`\\n attribute to the first input.\\r\\n*\\r\\n*\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.calendar (children)\nname: calendar\nfullName: DateRangePickerProps.calendar\nsummary: >-\n  Enables the customization or the override of the default Calendar which is\n  rendered by the DateRangePicker.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.calendarSettings (children)\nname: calendarSettings\nfullName: DateRangePickerProps.calendarSettings\nsummary: >-\n  Represents the additional props that can be passed to the\n  [MultiViewCalendar]({% slug overview_multiviewcalendar %}) inside the\n  DateRangePicker ([see example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-the-multiviewcalendar)).\nsyntax:\n  return:\n    type: DateRangePickerCalendarSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.className (children)\nname: className\nfullName: DateRangePickerProps.className\nsummary: |-\n  Sets the \n  `className`\n   of the DateRangePicker.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.clearButton (children)\nname: clearButton\nfullName: DateRangePickerProps.clearButton\nsummary: \"/**\\r\\n* Show a clear button for start and end inputs. Clicking resets the range and fires \\n`onChange`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.defaultShow (children)\nname: defaultShow\nfullName: DateRangePickerProps.defaultShow\nsummary: >-\n  Sets the default state of the DateRangePicker upon render ([see example]({%\n  slug default_value_daterangepicker %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.defaultValue (children)\nname: defaultValue\nfullName: DateRangePickerProps.defaultValue\nsummary: |-\n  Set the initial \n  `value`\n   when uncontrolled ([see example]({% slug default_value_daterangepicker %})).\nsyntax:\n  return:\n    type: SelectionRange\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.disabled (children)\nname: disabled\nfullName: DateRangePickerProps.disabled\nsummary: >-\n  Determines whether the DateRangePicker is disabled ([see example]({% slug\n  disabled_daterangepicker %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.endDateInput (children)\nname: endDateInput\nfullName: DateRangePickerProps.endDateInput\nsummary: \"Enables the customization or the override of the default end DateInput which is rendered by the DateRangePicker\\r\\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-calendar)).\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.endDateInputSettings (children)\nname: endDateInputSettings\nfullName: DateRangePickerProps.endDateInputSettings\nsummary: >-\n  Represents the additional props that can be passed to the end-date\n  [DateInput]({% slug overview_dateinput %}) inside the DateRangePicker ([see\n  example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-dateinputs)).\nsyntax:\n  return:\n    type: DateRangePickerDateInputSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.focusedDate (children)\nname: focusedDate\nfullName: DateRangePickerProps.focusedDate\nsummary: >-\n  Specifies the focused date of the DateRangePicker ([see example]({% slug\n  focused_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.format (children)\nname: format\nfullName: DateRangePickerProps.format\nsummary: \"Specifies the \\n`date`\\n format which is used for formatting the value of the DateInput ([see example]({% slug formats_dateinput %})).\\r\\n\\r\\n> If [\\n`startDateInputSettings`\\n](#toc-startdateinputsettings) or [\\n`endDateInputSettings`\\n](#toc-enddateinputsettings) are set, their \\n`format`\\n will take precedence.\"\nsyntax:\n  return:\n    type: string | DateFormatOptions\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.id (children)\nname: id\nfullName: DateRangePickerProps.id\nsummary: |-\n  Specifies the \n  `id`\n   of the DateRangePicker.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.inputAttributes (children)\nname: inputAttributes\nfullName: DateRangePickerProps.inputAttributes\nsummary: \"Pass HTML attributes to the internal focusable input elements.\\r\\nAttributes required for core logic are ignored.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.max (children)\nname: max\nfullName: DateRangePickerProps.max\nsummary: >-\n  Specifies the greatest valid date ([see example]({% slug\n  dateranges_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.min (children)\nname: min\nfullName: DateRangePickerProps.min\nsummary: >-\n  Specifies the smallest valid date ([see example]({% slug\n  dateranges_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onBlur (children)\nname: onBlur\nfullName: DateRangePickerProps.onBlur\nsummary: Fires each time any of the DateRangePicker elements gets blurred.\nsyntax:\n  return:\n    type: '(event: FocusEvent<any, Element>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onCancel (children)\nname: onCancel\nfullName: DateRangePickerProps.onCancel\nsummary: >-\n  Fires when the popup is about to cancel in ([adaptive mode]({% slug\n  adaptive_rendering_daterangepicker %})).\nsyntax:\n  return:\n    type: '(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onClose (children)\nname: onClose\nfullName: DateRangePickerProps.onClose\nsummary: Fires when the popup closes.\nsyntax:\n  return:\n    type: '(event: DateRangePickerCloseEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onFocus (children)\nname: onFocus\nfullName: DateRangePickerProps.onFocus\nsummary: Fires each time the user focuses any of the DateRangePicker elements.\nsyntax:\n  return:\n    type: '(event: FocusEvent<any, Element>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onOpen (children)\nname: onOpen\nfullName: DateRangePickerProps.onOpen\nsummary: Fires when the popup opens.\nsyntax:\n  return:\n    type: '(event: DateRangePickerOpenEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.popup (children)\nname: popup\nfullName: DateRangePickerProps.popup\nsummary: \"Enables the customization or the override of the default Popup which is rendered by the DateRangePicker\\r\\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-popup)).\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.popupSettings (children)\nname: popupSettings\nfullName: DateRangePickerProps.popupSettings\nsummary: >-\n  Represents the additional props that will be passed to the [Popup]({% slug\n  overview_popup %}) inside the DateRangePicker ([see example]({% slug\n  child_settings_daterangepicker %}#toc-configuring-the-popup)).\nsyntax:\n  return:\n    type: DateRangePickerPopupSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.show (children)\nname: show\nfullName: DateRangePickerProps.show\nsummary: >-\n  Specifies if the calendar will be displayed ([see example]({% slug\n  controlled_daterangepicker %}#toc-controlling-the-popup-state)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.startDateInput (children)\nname: startDateInput\nfullName: DateRangePickerProps.startDateInput\nsummary: \"Enables the customization or the override of the default start DateInput which is rendered by the DateRangePicker\\r\\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-dateinputs)).\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.startDateInputSettings (children)\nname: startDateInputSettings\nfullName: DateRangePickerProps.startDateInputSettings\nsummary: >-\n  Represents the additional props that will be passed to the start-date\n  [DateInput]({% slug overview_dateinput %}) inside the DateRangePicker ([see\n  example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-dateinputs)).\nsyntax:\n  return:\n    type: DateRangePickerDateInputSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.style (children)\nname: style\nfullName: DateRangePickerProps.style\nsummary: >-\n  Specifies the additional styles that will be applied to the wrapping\n  DateRangePicker element.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.swapButton (children)\nname: swapButton\nfullName: DateRangePickerProps.swapButton\nsummary: \"Determines whether the DateRangePicker will display a **Swap Value** button ([see example]({% slug reverse_daterangepicker %}#toc-swapping-start-and-end-dates-in-ranges)).\\r\\n\\r\\n> The DateRangePicker will display the swap button only if the [\\n`allowReverse`\\n](#toc-allowreverse) property is also set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.tabIndex (children)\nname: tabIndex\nfullName: DateRangePickerProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   property of the DatePicker.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.valid (children)\nname: valid\nfullName: DateRangePickerProps.valid\nsummary: \"Override the validity state.\\r\\nIf \\n`valid`\\n is set, ignore \\n`required`\\n.\\r\\nPart of [FormComponentProps]({% slug api_common_formcomponentprops %}).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.value (children)\nname: value\nfullName: DateRangePickerProps.value\nsummary: \"Set the selected range ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).\\r\\nProvide \\n`start`\\n and \\n`end`\\n valid \\n`Date`\\n values or \\n`null`\\n.\"\nsyntax:\n  return:\n    type: SelectionRange\npackageName: '@progress/kendo-react-dateinputs'\n\n\nThe  DateRangePicker   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\" The DateRangePicker is part of the <a href=\"/kendo-react-ui-develop/components/dateinputs\">KendoReact Date Inputs</a> component library. The procedures for installing, importing, and using the Date Inputs are identical for all components in the package. To learn how to use the DateRangePicker and the rest of the Date Inputs, see the <a href=\"/kendo-react-ui-develop/components/dateinputs/get-started\">Getting Started with the KendoReact Date Inputs</a> guide.\n\nKey Features\n\nConfiguring Child ComponentsPremium\n\nBy default, the DateRangePicker sets only the <a href=\"/kendo-react-ui-develop/components/dateinputs/api/daterangepicker#value\">value</a> and <a href=\"/kendo-react-ui-develop/components/dateinputs/api/daterangepicker#show\">show</a> properties for its child components.\nTo implement additional settings, use the options which the DateRangePicker provides for the following child components:\n\nDate Inputs\nPopups\nMultiViewCalendars\n\nConfiguring DateInputs\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Sparkline": "## API Reference Item\n- Name: SparklineProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Sparkline component.\n- Syntax: \n\n## Additional Context\n### SparklineProps.axisDefaults (children)\nname: axisDefaults\nfullName: SparklineProps.axisDefaults\nsummary: This option allows to override the default axis options.\nsyntax:\n  return:\n    type: AxisDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.className (children)\nname: className\nfullName: SparklineProps.className\nsummary: Sets additional CSS classes to the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.data (children)\nname: data\nfullName: SparklineProps.data\nsummary: The data for the default Sparkline series. Discarded if series are supplied.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.dir (children)\nname: dir\nfullName: SparklineProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onAxisLabelClick (children)\nname: onAxisLabelClick\nfullName: SparklineProps.onAxisLabelClick\nsummary: Fires when the user clicks an axis label.\nsyntax:\n  return:\n    type: '(event: AxisLabelClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDrag (children)\nname: onDrag\nfullName: SparklineProps.onDrag\nsummary: >-\n  Fires as long as the user is dragging the Chart with the mouse or through\n  swipe gestures.\nsyntax:\n  return:\n    type: '(event: DragEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDragEnd (children)\nname: onDragEnd\nfullName: SparklineProps.onDragEnd\nsummary: Fires when the user stops dragging the Chart.\nsyntax:\n  return:\n    type: '(event: DragEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDragStart (children)\nname: onDragStart\nfullName: SparklineProps.onDragStart\nsummary: Fires when the user starts dragging the Chart.\nsyntax:\n  return:\n    type: '(event: DragStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onPlotAreaClick (children)\nname: onPlotAreaClick\nfullName: SparklineProps.onPlotAreaClick\nsummary: |-\n  Fires when the user clicks the plot area. The \n  `click`\n   event is triggered by the \n  `tap`\n   and \n  `contextmenu`\n   events. To distinguish between the original events, inspect the \n  `e.originalEvent.type`\n   field.\nsyntax:\n  return:\n    type: '(event: PlotAreaClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onPlotAreaHover (children)\nname: onPlotAreaHover\nfullName: SparklineProps.onPlotAreaHover\nsummary: >-\n  Fires when the user hovers the plot area ([see example]({% slug\n  crosshairs_chart_charts %}#toc-current-cursor-values)).\nsyntax:\n  return:\n    type: '(event: PlotAreaHoverEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onRefresh (children)\nname: onRefresh\nfullName: SparklineProps.onRefresh\nsummary: >-\n  Fires when the Chart is about to refresh. The event can be used to prevent the\n  refresh of the Chart in specific cases ([see example]({% slug refresh_chart\n  %}).\nsyntax:\n  return:\n    type: '(chartOptions: any, themeOptions: any, chartInstance: any) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onRender (children)\nname: onRender\nfullName: SparklineProps.onRender\nsummary: >-\n  Fires when the Chart is ready to render on screen ([see example]({% slug\n  plotbands_chart_charts %}#toc-custom-plot-bands)). For example, you can use it\n  to remove loading indicators. Any changes made to the options are ignored.\nsyntax:\n  return:\n    type: '(event: RenderEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelect (children)\nname: onSelect\nfullName: SparklineProps.onSelect\nsummary: \"Fires when the user modifies the selection.\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelectEnd (children)\nname: onSelectEnd\nfullName: SparklineProps.onSelectEnd\nsummary: \"Fires when the user completes the modification of the selection ([see example]({% slug selection_chart_charts %}#toc-using-selection-as-navigator)).\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelectStart (children)\nname: onSelectStart\nfullName: SparklineProps.onSelectStart\nsummary: \"Fires when the user starts modifying the axis selection.\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSeriesClick (children)\nname: onSeriesClick\nfullName: SparklineProps.onSeriesClick\nsummary: \"Fires when the user clicks the Chart series.\\r\\n\\r\\nThe \\n`click`\\n event will be triggered by the \\n`tap`\\n and \\n`contextmenu`\\n events. To distinguish between the original events, inspect the \\n`e.originalEvent.type`\\n field.\"\nsyntax:\n  return:\n    type: '(event: SeriesClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSeriesHover (children)\nname: onSeriesHover\nfullName: SparklineProps.onSeriesHover\nsummary: Fires when the user hovers over the Chart series.\nsyntax:\n  return:\n    type: '(event: SeriesHoverEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoom (children)\nname: onZoom\nfullName: SparklineProps.onZoom\nsummary: >-\n  Fires as long as the user is zooming the Chart by using the mousewheel\n  operation.\nsyntax:\n  return:\n    type: '(event: ChartZoomEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoomEnd (children)\nname: onZoomEnd\nfullName: SparklineProps.onZoomEnd\nsummary: Fires when the user stops zooming the Chart.\nsyntax:\n  return:\n    type: '(event: ChartZoomEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoomStart (children)\nname: onZoomStart\nfullName: SparklineProps.onZoomStart\nsummary: Fires when the user uses the mousewheel to zoom the Chart.\nsyntax:\n  return:\n    type: '(event: ChartZoomStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.paneDefaults (children)\nname: paneDefaults\nfullName: SparklineProps.paneDefaults\nsummary: This option allows to override the default pane options.\nsyntax:\n  return:\n    type: PaneDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.panes (children)\nname: panes\nfullName: SparklineProps.panes\nsummary: The chart panes configuration.\nsyntax:\n  return:\n    type: Array<Pane>\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.pannable (children)\nname: pannable\nfullName: SparklineProps.pannable\nsummary: >-\n  Specifies if the Chart can be panned ([see example]({% slug\n  panzoom_chart_charts %})).\nsyntax:\n  return:\n    type: boolean | DragAction\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.renderAs (children)\nname: renderAs\nfullName: SparklineProps.renderAs\nsummary: \"Sets the preferred rendering engine ([see example]({% slug rendering_chart_charts %})). If not supported by the browser, the Chart switches to the first available mode.\\r\\n\\r\\nThe supported values are:\\r\\n- \\n`\\\"svg\\\"`\\n&mdash;If available, renders the component as an inline \\n`.svg`\\n file.\\r\\n- \\n`\\\"canvas\\\"`\\n&mdash;If available, renders the component as a \\n`canvas`\\n element.\"\nsyntax:\n  return:\n    type: '\"svg\" | \"canvas\"'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.seriesColors (children)\nname: seriesColors\nfullName: SparklineProps.seriesColors\nsummary: >-\n  The default colors for the Chart series. When all colors are used, new colors\n  are pulled from the start again.\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.seriesDefaults (children)\nname: seriesDefaults\nfullName: SparklineProps.seriesDefaults\nsummary: This option allows to override the default series options.\nsyntax:\n  return:\n    type: SeriesDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.style (children)\nname: style\nfullName: SparklineProps.style\nsummary: The styles that are applied to the component.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.transitions (children)\nname: transitions\nfullName: SparklineProps.transitions\nsummary: >-\n  If set to \n\n  `true`\n\n  , the Chart plays animations when it displays the series. By default,\n  animations are enabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.type (children)\nname: type\nfullName: SparklineProps.type\nsummary: The data for the default Sparkline series. Discarded if series are supplied.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.zoomable (children)\nname: zoomable\nfullName: SparklineProps.zoomable\nsummary: >-\n  Specifies if the Chart can be zoomed ([see example]({% slug\n  panzoom_chart_charts %})). Currently is only applicable to linear types, where\n  the range on the X axis can be changed based on the zoom level.\nsyntax:\n  return:\n    type: boolean | Zoomable\npackageName: '@progress/kendo-react-charts'\n\n\n## API Reference Item\n- Name: ChartValueAxisCrosshairTooltip\n- Type: Function\n- Summary: Represents the KendoReact ChartValueAxisCrosshairTooltip component.\n- Syntax: \n\n## Examples\n\n\n## Additional Context\n### ChartValueAxisCrosshairTooltip.ChartValueAxisCrosshairTooltip.props (children)\nname: props\nfullName: ChartValueAxisCrosshairTooltip.ChartValueAxisCrosshairTooltip.props\nsyntax:\n  return:\n    type: ChartValueAxisCrosshairTooltipProps\n\n\nThe  Sparkline Chart   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\"\n\nFull control over the <a href=\"/kendo-react-ui/components/tooltip/tooltip/positioning\">Positioning</a>\nCustomizable content rendering via <a href=\"/kendo-react-ui/components/tooltip/tooltip/templates\">Templates</a>\nOut-of-the-box accessibility and keyboard navigation\n\nHow Do the KendoReact Tooltips Work?\n\n\nThe KendoReact Tooltips provide free React tooltips that don't require a commercial license key or an active trial license key to install or use. For any questions about the use of the KendoReact Tooltips, or any other <a href=\"https://www.telerik.com/kendo-react-ui/components/\" rel=\"noopener\" target=\"_blank\">KendoReact components</a>, there are <a href=\"https://www.telerik.com/kendo-react-ui/support\" rel=\"noopener\" target=\"_blank\">several support options available</a>:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Form": "## API Reference Item\n- Name: FormClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Form component]({% slug overview_form %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FieldRenderProps,\n    FormRenderProps,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### FormClassComponent._fields (children)\nname: _fields\nfullName: FormClassComponent._fields\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._key (children)\nname: _key\nfullName: FormClassComponent._key\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._modified (children)\nname: _modified\nfullName: FormClassComponent._modified\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._submitted (children)\nname: _submitted\nfullName: FormClassComponent._submitted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._touched (children)\nname: _touched\nfullName: FormClassComponent._touched\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._unmounted (children)\nname: _unmounted\nfullName: FormClassComponent._unmounted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._validatorsByField (children)\nname: _validatorsByField\nfullName: FormClassComponent._validatorsByField\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._values (children)\nname: _values\nfullName: FormClassComponent._values\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._visited (children)\nname: _visited\nfullName: FormClassComponent._visited\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.licenseMessage (children)\nname: licenseMessage\nfullName: FormClassComponent.licenseMessage\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onChange (children)\nname: onChange\nfullName: FormClassComponent.onChange\nsummary: \"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"\nsyntax:\n  return:\n    type: '(name: string, options: Object) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onReset (children)\nname: onReset\nfullName: FormClassComponent.onReset\nsummary: \"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.showLicenseWatermark (children)\nname: showLicenseWatermark\nfullName: FormClassComponent.showLicenseWatermark\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps (children)\nname: FormProps\nfullName: FormProps\nsummary: Contains the props for the KendoReact Form component.\nsyntax: {}\npackageName: '@progress/kendo-react-form'\nmembers:\n  - ignoreModified\n  - initialValues\n  - onSubmit\n  - onSubmitClick\n  - render\n  - validator\n\n\n## API Reference Item\n- Name: FormElementProps.cols\n- Type: Property\n- Summary: Defines the number of columns in the form. Can be a number or an array of responsive breakpoints.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Form, Field, FormElement, FormRenderProps } from '@progress/kendo-react-form';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement cols={2}>\n                    <Field name=\"firstName\" component={Input} labelClassName=\"k-form-label\" label=\"First name\" />\n                    <Field name=\"lastName\" component={Input} labelClassName=\"k-form-label\" label=\"Last name\" />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: FormProps.onSubmit\n- Type: Property\n- Summary: Handles form submission when validation passes and fields are modified.\r\n\r\nFires when at least one field is modified, the user clicks Submit, and validation passes.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Form, Field, FormElement, FormRenderProps } from '@progress/kendo-react-form';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <Field name={'firstName'} component={Input} labelClassName={'k-form-label'} label={'First name'} />\n                    <Field name={'lastName'} component={Input} labelClassName={'k-form-label'} label={'Last name'} />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\n\nexport default App;\n\n```\n\n\nKendoReact Form Responsive DesignPremium\n\nThe Form component and its internal elements support responsive web design by adapting its layout based on the set width or the available screen size.\nTo create a responsive layout, you can specify arrays of values for certain props, which are applied at different breakpoints. This is achieved using the <a href=\"/kendo-react-ui-develop/components/form/api/responsiveformbreakpoint\">ResponsiveFormBreakPoint</a> array, which enables you to define how the layout should behave on various screen sizes.\n\nForm Components\n\nForms consist of form components (such as inputs, buttons, checkboxes, dropdowns, color pickers), their labels, hints and error messages. KendoReact provides comprehensive support for building forms with the <a href=\"/kendo-react-ui-develop/components/form\">Form</a>, and <a href=\"/kendo-react-ui-develop/components/labels\">Labels</a> packages. In this article we share valuable best practices.\nHere’s an example of the Form and Labels packages in action, so you can get an idea of how they work.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... We use form validation to make sure that users provide correct information in terms of format, content length, etc. For example, is the phone number an actual number, did the user put info in all of the required fields, and so on.\n\nHow it Works?\n\nKendoReact supports handling user input in the UI, and displays useful validation messages using the Form, Field, and Error components. Refer to the <a href=\"/kendo-react-ui-develop/components/form/validation\">article on form validation</a> for further details and runnable demos.\n\nField-level Form Validation\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Grid": "## API Reference Item\n- Name: StatusBarProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Grid's StatusBar component.\n- Syntax: \n\n## Additional Context\n### StatusBarProps.data (children)\nname: data\nfullName: StatusBarProps.data\nsummary: The collection of status items to display in the status bar.\nsyntax:\n  return:\n    type: Array<StatusItem>\npackageName: '@progress/kendo-react-grid'\n\n\n## API Reference Item\n- Name: GridProps.cells\n- Type: Property\n- Summary: Defines a set of custom cell components that the Grid will render instead of the default cells.\n- Syntax: \n\n- Return Type: name: GridCellsSettings\nfullName: GridCellsSettings\nsummary: The settings of the cells prop options.\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - data\n  - edit\n  - filterCell\n  - footerCell\n  - group\n  - groupFooter\n  - groupHeader\n  - headerCell\n  - hierarchy\n  - select\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridCustomCellProps } from '@progress/kendo-react-grid';\n\nconst CustomCell = (props: GridCustomCellProps) => {\n    return (\n        <td\n            {...props.tdProps}\n            colSpan={1}\n            style={{\n                color: props.children === 'a1' ? 'green' : 'crimson'\n            }}\n        >\n            {props.children}\n        </td>\n    );\n};\n\nexport default function App() {\n    return (\n        <Grid\n            data={[\n                { id: 'a1', name: 'cell 1' },\n                { id: 'a2', name: 'cell2' }\n            ]}\n            cells={{ data: CustomCell }}\n        >\n            <GridColumn field=\"id\" title=\"ID\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridColumnProps.format\n- Type: Property\n- Summary: Applies a format to the value before display.\r\nTakes the \n`{0:format}`\n form where \n`format`\n is a standard number format, a custom number format,\r\na standard date format, or a custom date format. For more information on supported formats see the\r\n[kendo-intl](https://github.com/telerik/kendo-intl/blob/develop/docs/index.md) documentation.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nexport default function App() {\n    return (\n        <Grid data={[]}>\n            <GridColumn field=\"price\" title=\"Price\" format=\"{0:c}\" />\n            <GridColumn field=\"quantity\" title=\"Quantity\" format=\"{0:n0}\" />\n            <GridColumn field=\"date\" title=\"Date\" format=\"{0:MM/dd/yyyy}\" />\n        </Grid>\n    );\n}\n\n```\n\n\nAdd a Loader to indicate that data is being fetched for a <a href=\"/kendo-react-ui/components/grid\">Grid</a>.\nShow unread notifications with a Badge on an <a href=\"/kendo-react-ui/components/layout/appbar\">AppBar</a> or <a href=\"/kendo-react-ui/components/buttons/button\">Button</a>.\nImprove UX with Skeleton placeholders for a <a href=\"/kendo-react-ui/components/layout/card\">Card</a> with profile details while data loads.\n\nStyling the KendoReact Data Grid Columns\n\nTo style the columns of the Grid, either:\n\n<a href=\"/kendo-react-ui-develop/components/grid/cells\">Add custom cells for columns</a>, or\nAdd class names for td elements.\n\nSetting Class Names\n\nThe <a href=\"/kendo-react-ui-develop/components/grid/api/gridcolumnprops#classname\">className</a> property applies additional class to the td element and can be used for styling the background, text color, text alignment, and other styling options of the Grid.\n\nStyling the KendoReact Data Grid Rows\n\nServer Templates\n\nLearn the art of customization by providing unique views to the Grid. Explore the creation of custom cells and rows templates to your application's specific needs.\n<a href=\"/kendo-react-ui-develop/components/grid/rsc-mode/templates\">Read more about React Data Grid RSC Mode templates...</a>\n\nSelection\n\nLearn how to implement row and cell selection in the Grid, allowing users to interact with data efficiently through multiple selection modes.\n<a href=\"/kendo-react-ui-develop/components/grid/rsc-mode/selection\">Read more about React Data Grid RSC Mode selection...</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "AppBar": "## API Reference Item\n- Name: AppBar\n- Type: Function\n- Summary: Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### AppBarProps (children)\nname: AppBarProps\nfullName: AppBarProps\nsummary: \"Represents the props of the [KendoReact AppBar component]({% slug overview_appbar %}).\\r\\nUsed to display information, actions, branding titles and additional navigation on the current screen.\"\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - id\n  - position\n  - positionMode\n  - style\n  - themeColor\n\n---\n### AppBar.AppBar.props (children)\nname: props\nfullName: AppBar.AppBar.props\nsyntax:\n  return:\n    type: AppBarProps | RefAttributes\n\n\n## API Reference Item\n- Name: AppBarProps.themeColor\n- Type: Property\n- Summary: Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\r\n\r\n* The possible values are:\r\n* \n`light`\n (Default)\r\n* 'primary'\r\n* 'secondary'\r\n* 'tertiary'\r\n* 'info'\r\n* 'success'\r\n* 'warning'\r\n* 'error'\r\n* 'dark'\r\n* 'inherit'\r\n* 'inverse'\n- Syntax: \n\n- Return Type: name: AppBarThemeColor\nfullName: AppBarThemeColor\nsummary: \"Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\\r\\n\\r\\n* The possible values are:\\r\\n* \\n`light`\\n (Default)\\r\\n* 'primary'\\r\\n* 'secondary'\\r\\n* 'tertiary'\\r\\n* 'info'\\r\\n* 'success'\\r\\n* 'warning'\\r\\n* 'error'\\r\\n* 'dark'\\r\\n* 'inherit'\\r\\n* 'inverse'\"\nsyntax:\n  return:\n    type: >-\n      \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\" |\n      \"warning\" | \"error\" | \"dark\" | \"light\" | \"inherit\" | \"inverse\"\npackageName: '@progress/kendo-react-layout'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\nResponsive Design\n\nIn general, responsive layouts adjust and adapt to any device screen size, whether it is a desktop, tablet, or a mobile phone.\nThe following example demonstrates how the AppBar adjusts for different screen sizes by using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\" rel=\"noopener\" target=\"_blank\">CSS media queries</a>. Resize the screen to observe the responsive layout.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe AppBar provides information and actions related to the current application screen. It is typically used to show page titles, brand identity and can contain navigation items.\nThis   is   a  Free React  AppBarThe KendoReact  AppBar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the AppBar in action. <a href=\"/kendo-react-ui-develop/components/layout/appbar/appearance\">Appearance</a>—The AppBar comes with predefined option that allow you to set its theme color.\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/responsive-design\">Responsive Design</a>—The responsive layout adapts to any device and screen size.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Menu": "## API Reference Item\n- Name: MenuItemProps\n- Type: Interface\n- Summary: The properties of the KendoReact MenuItem component ([more information and examples]({% slug items_menu %})).\n- Syntax: \n\n## Additional Context\n### MenuItemProps.contentRender (children)\nname: contentRender\nfullName: MenuItemProps.contentRender\nsummary: >-\n  A React functional or class component which is used for rendering content\n  instead of the item children ([see example]({% slug rendering_menu\n  %}#toc-content)).\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.cssClass (children)\nname: cssClass\nfullName: MenuItemProps.cssClass\nsummary: >-\n  The additional CSS classes that will be rendered on the item ([see example]({%\n  slug itemproperties_menu %}#toc-styles-and-classes)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.cssStyle (children)\nname: cssStyle\nfullName: MenuItemProps.cssStyle\nsummary: >-\n  The CSS styles that will be rendered on the item ([see example]({% slug\n  itemproperties_menu %}#toc-styles-and-classes)).\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.data (children)\nname: data\nfullName: MenuItemProps.data\nsummary: Represents any additional data that is associated with the Menu item.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.disabled (children)\nname: disabled\nfullName: MenuItemProps.disabled\nsummary: >-\n  Specifies if the item is disabled ([see example]({% slug itemproperties_menu\n  %}#toc-disabled-items)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.icon (children)\nname: icon\nfullName: MenuItemProps.icon\nsummary: >-\n  Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons)\n  that will be rendered for the item ([see example]({% slug itemproperties_menu\n  %}#toc-icon)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.linkRender (children)\nname: linkRender\nfullName: MenuItemProps.linkRender\nsummary: >-\n  A React functional or class component which is used for rendering the link of\n  the item ([see example]({% slug rendering_menu %}#toc-links)). The item link\n  is a part of the visual representation of the item which, by default, includes\n  an arrow, icon, and text.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.render (children)\nname: render\nfullName: MenuItemProps.render\nsummary: >-\n  A React functional or class component which is used for rendering the\n  innermost part of the Menu item ([see example]({% slug rendering_menu\n  %}#toc-items)). By default, the innermost item part includes only the text for\n  the item.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.separator (children)\nname: separator\nfullName: MenuItemProps.separator\nsummary: |-\n  Specifies if this is a separator item. If set to true only the \n  `cssClass`\n   and \n  `cssStyle`\n   props should be rendered along.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.svgIcon (children)\nname: svgIcon\nfullName: MenuItemProps.svgIcon\nsummary: >-\n  Specifies the SVG icon that will be rendered for the item ([see example]({%\n  slug itemproperties_menu %}#toc-icon)).\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.text (children)\nname: text\nfullName: MenuItemProps.text\nsummary: >-\n  Specifies the item text ([see example]({% slug itemproperties_menu\n  %}#toc-text)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.url (children)\nname: url\nfullName: MenuItemProps.url\nsummary: |-\n  Specifies a URL which is rendered as a \n  `href`\n   attribute on the item link ([see example]({% slug itemproperties_menu %}#toc-url)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { MenuClassComponent, MenuItem } from '@progress/kendo-react-layout';\n\nconst App = () => (\n    <MenuClassComponent>\n        <MenuItem text=\"Item 1\" />\n        <MenuItem text=\"Item 2\" />\n    </MenuClassComponent>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### MenuClassComponent.constructor (children)\nname: constructor\nfullName: MenuClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.checkIsDirectionRightToLeft (children)\nname: checkIsDirectionRightToLeft\nfullName: MenuClassComponent.checkIsDirectionRightToLeft\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable (children)\nname: clearItemHoverAndLeaveRequestsIfApplicable\nfullName: MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.directionHolder (children)\nname: directionHolder\nfullName: MenuClassComponent.directionHolder\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.dispatchSelectEventIfWired (children)\nname: dispatchSelectEventIfWired\nfullName: MenuClassComponent.dispatchSelectEventIfWired\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getInputItem (children)\nname: getInputItem\nfullName: MenuClassComponent.getInputItem\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getMenuClassName (children)\nname: getMenuClassName\nfullName: MenuClassComponent.getMenuClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.inputItems (children)\nname: inputItems\nfullName: MenuClassComponent.inputItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.isItemWithDefaultClose (children)\nname: isItemWithDefaultClose\nfullName: MenuClassComponent.isItemWithDefaultClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemHoverRequest (children)\nname: itemHoverRequest\nfullName: MenuClassComponent.itemHoverRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemLeaveRequest (children)\nname: itemLeaveRequest\nfullName: MenuClassComponent.itemLeaveRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.items (children)\nname: items\nfullName: MenuClassComponent.items\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuWrapperEl (children)\nname: menuWrapperEl\nfullName: MenuClassComponent.menuWrapperEl\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.mouseOverHandler (children)\nname: mouseOverHandler\nfullName: MenuClassComponent.mouseOverHandler\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemBlur (children)\nname: onItemBlur\nfullName: MenuClassComponent.onItemBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemClick (children)\nname: onItemClick\nfullName: MenuClassComponent.onItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemFocus (children)\nname: onItemFocus\nfullName: MenuClassComponent.onItemFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseDown (children)\nname: onItemMouseDown\nfullName: MenuClassComponent.onItemMouseDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseLeave (children)\nname: onItemMouseLeave\nfullName: MenuClassComponent.onItemMouseLeave\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseOver (children)\nname: onItemMouseOver\nfullName: MenuClassComponent.onItemMouseOver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onKeyDown (children)\nname: onKeyDown\nfullName: MenuClassComponent.onKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.prepareItems (children)\nname: prepareItems\nfullName: MenuClassComponent.prepareItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.reset (children)\nname: reset\nfullName: MenuClassComponent.reset\nsummary: Resets the selection and opening of Menu items.\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setFocusedItemId (children)\nname: setFocusedItemId\nfullName: MenuClassComponent.setFocusedItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setHoveredItemId (children)\nname: setHoveredItemId\nfullName: MenuClassComponent.setHoveredItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.animate (children)\nname: animate\nfullName: MenuClassComponent.animate\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.element (children)\nname: element\nfullName: MenuClassComponent.element\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuItemId (children)\nname: menuItemId\nfullName: MenuClassComponent.menuItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Additional Context\n### MenuProps.animate (children)\nname: animate\nfullName: MenuProps.animate\nsummary: Controls the Popup animation.\nsyntax:\n  return:\n    type: boolean | PopupAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.children (children)\nname: children\nfullName: MenuProps.children\nsummary: Sets the Menu items declaratively.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.className (children)\nname: className\nfullName: MenuProps.className\nsummary: Adds a custom className to the Menu top element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.customCloseItemIds (children)\nname: customCloseItemIds\nfullName: MenuProps.customCloseItemIds\nsummary: \"Sets the ids of the Menu items that will not be closed on mouse-leave. The ids are hierarchical and zero-based.\\r\\nThe first root item has a \\n`0`\\n id. If the first root item has children,\\r\\nthe first child item acquires a \\n`0_0`\\n id and the second acquires a \\n`0_1`\\n id.\"\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.dir (children)\nname: dir\nfullName: MenuProps.dir\nsummary: Sets the direction of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverCloseDelay (children)\nname: hoverCloseDelay\nfullName: MenuProps.hoverCloseDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on item mouse-leave\\r\\n([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverOpenDelay (children)\nname: hoverOpenDelay\nfullName: MenuProps.hoverOpenDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on\\r\\nitem mouse-leave ([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\\r\\nUsed to avoid accidental closure on leaving.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.id (children)\nname: id\nfullName: MenuProps.id\nsummary: Sets the ID of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.itemRender (children)\nname: itemRender\nfullName: MenuProps.itemRender\nsummary: \"A React functional or class component which is used for rendering the innermost part of\\r\\nthe Menu item ([see example]({% slug rendering_menu %}#toc-items)).\\r\\nBy default, the innermost item part includes only the text for the item.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.linkRender (children)\nname: linkRender\nfullName: MenuProps.linkRender\nsummary: \"A React functional or class component which is used for rendering the link of the item\\r\\n([see example]({% slug rendering_menu %}#toc-links)).\\r\\nThe item link is a part of the visual representation of the item which, by default, includes an arrow, icon, and text.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.onSelect (children)\nname: onSelect\nfullName: MenuProps.onSelect\nsummary: Fires when a Menu item is selected.\nsyntax:\n  return:\n    type: '(event: MenuSelectEvent) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.openOnClick (children)\nname: openOnClick\nfullName: MenuProps.openOnClick\nsummary: |-\n  If \n  `openOnClick`\n   is set to \n  `true`\n  , the items are opened on mouse hover only after an initial click.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.vertical (children)\nname: vertical\nfullName: MenuProps.vertical\nsummary: \"Specifies whether the Menu will be vertical\\r\\n([see example]({% slug vertical_menu %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuProps.items\n- Type: Property\n- Summary: Sets the Menu items.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Menu } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    const menuItems = [\n        { text: 'Home' },\n        { text: 'About' },\n        { text: 'Contact' }\n    ];\n\n    return (\n        <Menu items={menuItems} />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: MenuProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Menu.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Menu } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Menu items={[{ text: 'Home' }, { text: 'About' }]} style={{ backgroundColor: 'lightblue' }} />;\n}\n\n```\n\n\nEvents\n\nThe KendoReact Menu generates a variety of events that you can handle. This allows you to tailor the behavior of the Menu to your specific requirements.\nThe following example demonstrates the <a href=\"/kendo-react-ui-develop/components/layout/api/menuselectevent\">select</a> event of the Menu.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThis   is   a  Free React  MenuThe KendoReact  Menu   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Menu in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... KendoReact Menu Overview\n\nThe KendoReact Menu is a multi-level component for displaying hierarchical data.\nYou can describe the Menu items either by:\n\nUsing nested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSetting the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> property.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Breadcrumb": "## API Reference Item\n- Name: Breadcrumb\n- Type: Function\n- Summary: Represents the Breadcrumb component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Breadcrumb } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    const data = [\n        { id: '1', text: 'Home' },\n        { id: '2', text: 'Products' },\n        { id: '3', text: 'Electronics' }\n    ];\n    return <Breadcrumb data={data} />;\n}\n\n```\n\n\n## Additional Context\n### BreadcrumbProps (children)\nname: BreadcrumbProps\nfullName: BreadcrumbProps\nsummary: >-\n  Represents the props of [Breadcrumb]({% slug api_layout_breadcrumb %})\n  component.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - ariaLabel\n  - breadcrumbDelimiter\n  - breadcrumbLink\n  - breadcrumbListItem\n  - breadcrumbOrderedList\n  - className\n  - data\n  - dir\n  - disabled\n  - iconClassField\n  - iconField\n  - id\n  - onItemSelect\n  - onKeyDown\n  - size\n  - style\n  - tabIndex\n  - textField\n  - valueField\n\n---\n### Breadcrumb.Breadcrumb.props (children)\nname: props\nfullName: Breadcrumb.Breadcrumb.props\nsyntax:\n  return:\n    type: BreadcrumbProps | RefAttributes\n\n\nOut of the box, the Kendo React Breadcrumb provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\nDelimiter\n\nYou can change the visual separator between the Breadcrumb items.\nThe Breadcrumb allows changing its default delimiter by using the <a href=\"/kendo-react-ui-develop/components/layout/api/breadcrumbdelimiter\">breadcrumbDelimiter</a> property.\nThe following example demonstrates how to change the default separator:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Breadcrumb is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Breadcrumb and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Button": "FloatingActionButton\nA component for specifying the primary action in an application.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/toolbar\">\n\ntoolbar\n\n\nToolbar\nA React toolbar component for holding Button and ButtonGroup elements.\n</a>\n\n\n\nPremium React Buttons\n\nThe following components require a commercial license.\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/dropdownbutton\">\n\ndropdownbutton dropdownbutton\n\n\nDropDownButton\nA component for executing additional action items.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/splitbutton\">\n\nsplitbutton\n\n\nSplitButton\nA component for executing default or predefined actions.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/speechtotextbutton\">\n\n\n\nSpeechToTextButton\nA component for converting spoken input into text using speech recognition.\n</a>\n\nKey Features\n\n<a href=\"https://www.figma.com/community/file/1174728993763737426\" rel=\"noopener\" target=\"_blank\">Telerik &amp; Kendo UI Kit for MS Fluent</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Switch": "## API Reference Item\n- Name: SwitchProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Switch component]({% slug overview_switch %}).\n- Syntax: \n\n## Additional Context\n### SwitchProps.accessKey (children)\nname: accessKey\nfullName: SwitchProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: SwitchProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component.\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.ariaLabel (children)\nname: ariaLabel\nfullName: SwitchProps.ariaLabel\nsummary: Specifies the accessible label of the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: SwitchProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.checked (children)\nname: checked\nfullName: SwitchProps.checked\nsummary: >-\n  Sets the current value of the Switch ([see example]({% slug controlled_switch\n  %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.className (children)\nname: className\nfullName: SwitchProps.className\nsummary: Adds custom CSS classes to the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.defaultChecked (children)\nname: defaultChecked\nfullName: SwitchProps.defaultChecked\nsummary: >-\n  Sets the value of the Switch when it is initially displayed ([see example]({%\n  slug default_state %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.defaultValue (children)\nname: defaultValue\nfullName: SwitchProps.defaultValue\nsummary: Specifies the default value of the Switch.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.dir (children)\nname: dir\nfullName: SwitchProps.dir\nsummary: |-\n  Specifies the \n  `dir`\n   property of the wrapping element of the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.disabled (children)\nname: disabled\nfullName: SwitchProps.disabled\nsummary: |-\n  Disables the Switch when set to \n  `true`\n   ([see example]({% slug disabled_switch %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.id (children)\nname: id\nfullName: SwitchProps.id\nsummary: |-\n  Specifies the \n  `id`\n   of the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.name (children)\nname: name\nfullName: SwitchProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.offLabel (children)\nname: offLabel\nfullName: SwitchProps.offLabel\nsummary: Sets a custom label for the **Off** state.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onBlur (children)\nname: onBlur\nfullName: SwitchProps.onBlur\nsummary: Fires when the Switch is blurred.\nsyntax:\n  return:\n    type: '(event: FocusEvent<HTMLSpanElement, Element>) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onChange (children)\nname: onChange\nfullName: SwitchProps.onChange\nsummary: Fires when the value of the Switch changes.\nsyntax:\n  return:\n    type: '(event: SwitchChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onFocus (children)\nname: onFocus\nfullName: SwitchProps.onFocus\nsummary: Fires when the Switch is focused.\nsyntax:\n  return:\n    type: '(event: FocusEvent<HTMLSpanElement, Element>) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onLabel (children)\nname: onLabel\nfullName: SwitchProps.onLabel\nsummary: Sets a custom label for the **On** state.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.required (children)\nname: required\nfullName: SwitchProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.size (children)\nname: size\nfullName: SwitchProps.size\nsummary: \"Configures the \\n`size`\\n of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.tabIndex (children)\nname: tabIndex\nfullName: SwitchProps.tabIndex\nsummary: >-\n  Specifies the [\n\n  `tabIndex`\n\n  ](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)\n  of the component.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.thumbRounded (children)\nname: thumbRounded\nfullName: SwitchProps.thumbRounded\nsummary: \"Configures the \\n`thumbRounded`\\n property of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a thumbRounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.trackRounded (children)\nname: trackRounded\nfullName: SwitchProps.trackRounded\nsummary: \"Configures the \\n`trackRounded`\\n of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a trackRounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.valid (children)\nname: valid\nfullName: SwitchProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.validationMessage (children)\nname: validationMessage\nfullName: SwitchProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.validityStyles (children)\nname: validityStyles\nfullName: SwitchProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.value (children)\nname: value\nfullName: SwitchProps.value\nsummary: Specifies the value of the Switch.\nsyntax:\n  return:\n    type: null | string | number | boolean | Array<string>\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: Switch\n- Type: Function\n- Summary: Represents the [KendoReact Switch component]({% slug overview_switch %}).\r\n\r\nAccepts properties of type [SwitchProps]({% slug api_inputs_switchprops %}).\r\nObtaining the \n`ref`\n returns an object of type [SwitchHandle]({% slug api_inputs_switchhandle %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Switch } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <div className=\"k-d-flex k-align-items-center\">\n            <span>Switch</span>\n            <Switch />\n        </div>\n    );\n}\n\n```\n\n\n## Additional Context\n### Switch.Switch.props (children)\nname: props\nfullName: Switch.Switch.props\nsyntax:\n  return:\n    type: SwitchProps | RefAttributes\n\n\nControlled Mode\n\nBy default, the Switch is in an uncontrolled state.\nTo manage the state of the Switch, use its <a href=\"/kendo-react-ui-develop/components/inputs/api/switchprops#checked\">checked</a> property, handle the <a href=\"/kendo-react-ui-develop/components/inputs/api/switchprops#onchange\">onChange</a> event, and pass the new value through the props.\n\nManual Switch Toggle\n\nThe following example demonstrates how to manually toggle the Switch.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nRead-Only Switch\n\nToggle between <a href=\"/kendo-react-ui/components/charts\">Chart</a> types in complex reporting apps.\n\nOut of the box, the Kendo React Switch provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "ListView": "## API Reference Item\n- Name: ListViewProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact ListView component]({% slug overview_listview %}).\n- Syntax: \n\n## Additional Context\n### ListViewProps.className (children)\nname: className\nfullName: ListViewProps.className\nsummary: Sets a class of the ListView DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.data (children)\nname: data\nfullName: ListViewProps.data\nsummary: Sets the data of the ListView.\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.footer (children)\nname: footer\nfullName: ListViewProps.footer\nsummary: Defines the component that renders for the ListView footer.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.header (children)\nname: header\nfullName: ListViewProps.header\nsummary: Defines the component that renders for the ListView header.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.item (children)\nname: item\nfullName: ListViewProps.item\nsummary: Defines the component that renders for each item of the data collection.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.navigatable (children)\nname: navigatable\nfullName: ListViewProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the ListView.\\r\\nBy default, navigation is disabled.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.onScroll (children)\nname: onScroll\nfullName: ListViewProps.onScroll\nsummary: Fires when the ListView has been scrolled.\nsyntax:\n  return:\n    type: '(event: ListViewEvent) => void'\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.style (children)\nname: style\nfullName: ListViewProps.style\nsummary: Sets styles to the ListView container.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-listview'\n\n\nThe KendoReact ListView enables you to display a custom layout of data items.\nThe ListView is ideally suited for displaying a list of items in a consistent manner. You can see commonplace examples of its use in the design structures of the Internet, search engine results, tweets from Twitter, Facebook updates, inbox items in Gmail, card lists in Instagram, and so on. Paging\n\nThe ListView enables you to split its content into pages by adding a pager and by using its extensive set of configuration options, such as implementing a responsive behavior, customizing its appearance, and more. <a href=\"/kendo-react-ui-develop/components/listview/paging\">Read more about the pager options of the ListView...</a>\n\nEditing\n\nDepending on your user requirements, you can edit, add, or delete the ListView items using templates. <a href=\"/kendo-react-ui-develop/components/listview/editing\">Read more about the editing feature of the ListView...</a> Filtering\n\nThe KendoReact ListView data can be filtered with components like the <a href=\"/kendo-react-ui-develop/components/datatools/filter\">KendoReact Filter</a>. <a href=\"/kendo-react-ui-develop/components/listview/filtering\">Read more about the filtering of the ListView...</a>\n\nSupport Options\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Skeleton": "## API Reference Item\n- Name: SkeletonProps.animation\n- Type: Property\n- Summary: Specifies the animation settings of the Skeleton.\r\n\r\nThe possible keys are:\r\n* \n`type`\n&mdash;Defines the type of the Skeleton animation.\r\n  * \n`wave`\n&mdash;Shows wave animation effect.\r\n  * \n`pulse`\n(Default)&mdash;Shows pulse animation effect.\r\n\r\nTo disable the animation, set the property to \n`false`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Skeleton } from '@progress/kendo-react-indicators';\nimport { Card, CardHeader, CardFooter } from '@progress/kendo-react-layout';\n\nconst App = () => {\n    return (\n        <Card style={{ minWidth: 350, width: 350, height: 'auto' }}>\n            <CardHeader className=\"k-hbox\">\n                <Skeleton\n                    animation={{ type: 'wave' }}\n                    shape={'circle'}\n                    style={{ width: 45, height: 45, marginRight: 16 }}\n                />\n                <div style={{ flex: '1 1 50%' }}>\n                    <Skeleton shape={'text'} style={{ width: '100%' }} />\n                    <Skeleton shape={'text'} style={{ width: '40%' }} />\n                </div>\n            </CardHeader>\n            <Skeleton shape={'rectangle'} style={{ width: '100%', height: 230 }} />\n            <CardFooter>\n                <Skeleton shape={'text'} style={{ width: '100%' }} />\n            </CardFooter>\n        </Card>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: SkeletonProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Skeleton component]({% slug overview_skeleton %}).\n- Syntax: \n\n## Additional Context\n### SkeletonProps.className (children)\nname: className\nfullName: SkeletonProps.className\nsummary: Specifies a list of CSS classes that will be added to the Skeleton.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-indicators'\n\n---\n### SkeletonProps.shape (children)\nname: shape\nfullName: SkeletonProps.shape\nsummary: \"Specifies the shape of the Skeleton.\\r\\n\\r\\nThe possible values are:\\r\\n* \\n`circle`\\n&mdash;Renders a circular Skeleton.\\r\\n* \\n`text`\\n(Default)&mdash;Renders a line Skeleton.\\r\\n* \\n`rectangle`\\n&mdash;Renders a rectangular Skeleton.\"\nsyntax:\n  return:\n    type: SkeletonShape\npackageName: '@progress/kendo-react-indicators'\n\n---\n### SkeletonProps.style (children)\nname: style\nfullName: SkeletonProps.style\nsummary: Sets additional CSS styles to the Skeleton.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-indicators'\n\n\n## API Reference Item\n- Name: Skeleton\n- Type: Function\n- Summary: Represents the [KendoReact Skeleton component]({% slug overview_skeleton %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Skeleton } from '@progress/kendo-react-indicators';\nimport { Card, CardHeader, CardFooter } from '@progress/kendo-react-layout';\n\nconst App = () => {\n    return (\n        <Card style={{ minWidth: 350, width: 350, height: 'auto' }}>\n            <CardHeader className=\"k-hbox\">\n                <Skeleton shape={'circle'} style={{ width: 45, height: 45, marginRight: 16 }} />\n                <div style={{ flex: '1 1 50%' }}>\n                    <Skeleton shape={'text'} style={{ width: '100%' }} />\n                    <Skeleton shape={'text'} style={{ width: '40%' }} />\n                </div>\n            </CardHeader>\n            <Skeleton shape={'rectangle'} style={{ width: '100%', height: 230 }} />\n            <CardFooter>\n                <Skeleton shape={'text'} style={{ width: '100%' }} />\n            </CardFooter>\n        </Card>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Skeleton.Skeleton.props (children)\nname: props\nfullName: Skeleton.Skeleton.props\nsyntax:\n  return:\n    type: SkeletonProps | RefAttributes\n\n\nAdd a Loader to indicate that data is being fetched for a <a href=\"/kendo-react-ui/components/grid\">Grid</a>.\nShow unread notifications with a Badge on an <a href=\"/kendo-react-ui/components/layout/appbar\">AppBar</a> or <a href=\"/kendo-react-ui/components/buttons/button\">Button</a>.\nImprove UX with Skeleton placeholders for a <a href=\"/kendo-react-ui/components/layout/card\">Card</a> with profile details while data loads. <a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/indicators/skeleton\">\n\n\n\nSkeleton\nA component that represents a placeholder that is rendered initially on a page before the actual content loads.\n</a>\n\nKey Features\n\nThe KendoReact Indicators provide the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance\n\nThis   is   a  Free React  SkeletonThe KendoReact  Skeleton   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following demo shows a social media card with skeleton placeholders next to a fully loaded card. It helps you see how skeletons can improve the loading experience.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "DropDownButton": "## API Reference Item\n- Name: DropDownButtonClassComponent\n- Type: Function\n- Summary: Represents the [KendoReact DropDownButton component]({% slug overview_dropdownbutton %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { DropDownButton } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return <DropDownButton text=\"Options\" items={[{ text: 'Item 1' }, { text: 'Item 2' }]} />;\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DropDownButtonProps (children)\nname: DropDownButtonProps\nfullName: DropDownButtonProps\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - accessKey\n  - ariaLabel\n  - buttonClass\n  - children\n  - className\n  - dir\n  - disabled\n  - endIcon\n  - fillMode\n  - icon\n  - iconClass\n  - id\n  - imageUrl\n  - item\n  - itemRender\n  - items\n  - onBlur\n  - onClose\n  - onFocus\n  - onItemClick\n  - onOpen\n  - opened\n  - popupSettings\n  - rounded\n  - size\n  - startIcon\n  - style\n  - svgIcon\n  - tabIndex\n  - text\n  - textField\n  - themeColor\n  - title\n\n---\n### DropDownButtonClassComponent.DropDownButtonClassComponent.props (children)\nname: props\nfullName: DropDownButtonClassComponent.DropDownButtonClassComponent.props\nsyntax:\n  return:\n    type: DropDownButtonProps | RefAttributes\n\n\n## API Reference Item\n- Name: DropDownButtonProps.disabled\n- Type: Property\n- Summary: Determines whether the component is disabled ([see example]({% slug disabled_dropdownbutton %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DropDownButton } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return <DropDownButton text=\"Options\" disabled={true} items={[{ text: 'Profile' }, { text: 'Settings' }]} />;\n}\n\n```\n\n\nDisabled DropDownButtonPremium\n\nBy default, the DropDownButton is enabled.\nTo disable it, set the <a href=\"/kendo-react-ui-develop/components/buttons/api/dropdownbuttonprops#disabled\">disabled</a> property to true.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n<a href=\"/kendo-react-ui-develop/components/buttons/dropdownbutton/disabled\">Disabled DropDownButton</a>—You can easily render a disabled DropDownButton and prevent end-users from interacting with it.\n<a href=\"/kendo-react-ui-develop/components/buttons/dropdownbutton/icons\">Icon DropDownButton</a>—The DropDownButton allows you to display images, predefined or custom icons.\n\nExport Options\n\nThe Barcodes provide built-in support to save your the output as an image (PNG), PDF, SVG, and the Kendo UI Drawing format (useful for further processing). <a href=\"/kendo-react-ui/components/barcodes/export-options\">Read more about the export options of the Barcodes...</a>\n\nSupport Options\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
    "Chart": "## API Reference Item\n- Name: ChartArea\n- Type: Function\n- Summary: Represents the KendoReact ChartArea component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nconst App = () => {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"area\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ChartArea.ChartArea.props (children)\nname: props\nfullName: ChartArea.ChartArea.props\nsyntax:\n  return:\n    type: ChartAreaProps\n\n\n## API Reference Item\n- Name: ChartTooltipProps.shared\n- Type: Property\n- Summary: If set to \n`true`\n, the Chart displays a single tooltip for every category ([see example]({% slug tooltips_chart_charts %}#toc-shared-tooltip)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Chart, ChartSeries, ChartSeriesItem, ChartTooltip } from '@progress/kendo-react-charts';\n\nconst series = [2, 4, 6, 2];\n\nconst App = () => (\n    <Chart>\n        <ChartTooltip shared={true} />\n        <ChartSeries>\n            <ChartSeriesItem type=\"bar\" data={series} />\n            <ChartSeriesItem type=\"bar\" data={series} />\n        </ChartSeries>\n    </Chart>\n);\n\nexport default App;\n\n```\n\n\nShared Tooltip\n\nDefault Content\n\nThe shared tooltip is displayed when the user hovers over a category and is used for Categorical charts. The shared tooltip shows a summary of all points in the hovered category. To enable the shared tooltip, use the shared option of the <a href=\"/kendo-react-ui-develop/components/charts/api/charttooltipprops#shared\">ChartTooltip</a> component.\nThe following example demonstrates how to enable the shared tooltip.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustomizing Content <a href=\"/kendo-react-ui-develop/components/charts/chart/elements/tooltips#series-tooltip\">Series tooltip</a>—A tooltip displayed for the hovered chart point.\n<a href=\"/kendo-react-ui-develop/components/charts/chart/elements/tooltips#tooltip\">Shared tooltip</a>—A tooltip displayed for the hovered chart category.\n<a href=\"/kendo-react-ui-develop/components/charts/chart/elements/tooltips#crosshair-tooltip\">Crosshair tooltip</a>—A tooltip displayed for the axes crosshairs. By default, the shared tooltip displays the category as a title and an item for each point in that category. To customize the content that is displayed for the points of a specific series, use the <a href=\"/kendo-react-ui-develop/components/charts/api/charttooltipprops#format\">format</a> option, or the template for the series. To customize the entire content, add a render prop to the <a href=\"/kendo-react-ui-develop/components/charts/api/charttooltip\">ChartTooltip</a> component.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n"
  }
}