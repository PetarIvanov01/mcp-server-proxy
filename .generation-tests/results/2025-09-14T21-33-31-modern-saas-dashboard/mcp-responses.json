{
  "NumericTextBox": "## API Reference Item\n- Name: NumericTextBoxProps.min\n- Type: Property\n- Summary: Specifies the smallest value that can be entered.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return <NumericTextBox label=\"Values greater than 10\" min={10} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: NumericTextBoxProps.format\n- Type: Property\n- Summary: Specifies the number format which is used for formatting the value ([see example]({% slug formats_numerictextbox %})). If set to \n`an empty string`\n or \n`undefined`\n, the default format will be used. Format cannot contain decimal separators or numbers. Power signs are supported.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return <NumericTextBox defaultValue={10} label=\"Price\" format=\"c2\" />;\n}\n\n```\n\n\n## API Reference Item\n- Name: NumericTextBoxProps.max\n- Type: Property\n- Summary: Specifies the greatest value that can be entered.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return <NumericTextBox label=\"Enter a value up to 100\" max={100} />;\n}\n\n```\n\n\nThe NumericTextBox supports props for setting basic validation requirements—for example, the minimum and maximum value. The <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextboxprops#min\">min</a>, <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextboxprops#max\">max</a>, and <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextboxprops#required\">required</a> properties enable the user to pre-define minimum requirements which define the validity state of the component and allow a successful form\n\nFormats\n\nYou can control the format of the NumericTextBox by using the <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextbox#format\">format</a> property.\nIt accepts string or [NumberFormatOptions] parameters. When format is set and the input element is not focused, the value is formatted accordingly. By default, the format is set to 'n2'.\n\nFormat cannot contain decimal separators or numbers. Power signs are supported.\n\n<a href=\"/kendo-react-ui-develop/components/inputs/numerictextbox/formats\">Formats</a>—You can control the format of the NumericTextBox input.\n<a href=\"/kendo-react-ui-develop/components/inputs/floating-labels\">Floating labels</a>—The floating labels functionality is integrated into the KendoReact NumericTextBox and can be easily configured through the label property.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Sparkline": "## API Reference Item\n- Name: SparklineProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Sparkline component.\n- Syntax: \n\n## Additional Context\n### SparklineProps.axisDefaults (children)\nname: axisDefaults\nfullName: SparklineProps.axisDefaults\nsummary: This option allows to override the default axis options.\nsyntax:\n  return:\n    type: AxisDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.className (children)\nname: className\nfullName: SparklineProps.className\nsummary: Sets additional CSS classes to the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.data (children)\nname: data\nfullName: SparklineProps.data\nsummary: The data for the default Sparkline series. Discarded if series are supplied.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.dir (children)\nname: dir\nfullName: SparklineProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onAxisLabelClick (children)\nname: onAxisLabelClick\nfullName: SparklineProps.onAxisLabelClick\nsummary: Fires when the user clicks an axis label.\nsyntax:\n  return:\n    type: '(event: AxisLabelClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDrag (children)\nname: onDrag\nfullName: SparklineProps.onDrag\nsummary: >-\n  Fires as long as the user is dragging the Chart with the mouse or through\n  swipe gestures.\nsyntax:\n  return:\n    type: '(event: DragEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDragEnd (children)\nname: onDragEnd\nfullName: SparklineProps.onDragEnd\nsummary: Fires when the user stops dragging the Chart.\nsyntax:\n  return:\n    type: '(event: DragEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onDragStart (children)\nname: onDragStart\nfullName: SparklineProps.onDragStart\nsummary: Fires when the user starts dragging the Chart.\nsyntax:\n  return:\n    type: '(event: DragStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onPlotAreaClick (children)\nname: onPlotAreaClick\nfullName: SparklineProps.onPlotAreaClick\nsummary: |-\n  Fires when the user clicks the plot area. The \n  `click`\n   event is triggered by the \n  `tap`\n   and \n  `contextmenu`\n   events. To distinguish between the original events, inspect the \n  `e.originalEvent.type`\n   field.\nsyntax:\n  return:\n    type: '(event: PlotAreaClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onPlotAreaHover (children)\nname: onPlotAreaHover\nfullName: SparklineProps.onPlotAreaHover\nsummary: >-\n  Fires when the user hovers the plot area ([see example]({% slug\n  crosshairs_chart_charts %}#toc-current-cursor-values)).\nsyntax:\n  return:\n    type: '(event: PlotAreaHoverEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onRefresh (children)\nname: onRefresh\nfullName: SparklineProps.onRefresh\nsummary: >-\n  Fires when the Chart is about to refresh. The event can be used to prevent the\n  refresh of the Chart in specific cases ([see example]({% slug refresh_chart\n  %}).\nsyntax:\n  return:\n    type: '(chartOptions: any, themeOptions: any, chartInstance: any) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onRender (children)\nname: onRender\nfullName: SparklineProps.onRender\nsummary: >-\n  Fires when the Chart is ready to render on screen ([see example]({% slug\n  plotbands_chart_charts %}#toc-custom-plot-bands)). For example, you can use it\n  to remove loading indicators. Any changes made to the options are ignored.\nsyntax:\n  return:\n    type: '(event: RenderEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelect (children)\nname: onSelect\nfullName: SparklineProps.onSelect\nsummary: \"Fires when the user modifies the selection.\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelectEnd (children)\nname: onSelectEnd\nfullName: SparklineProps.onSelectEnd\nsummary: \"Fires when the user completes the modification of the selection ([see example]({% slug selection_chart_charts %}#toc-using-selection-as-navigator)).\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSelectStart (children)\nname: onSelectStart\nfullName: SparklineProps.onSelectStart\nsummary: \"Fires when the user starts modifying the axis selection.\\r\\n\\r\\nThe range units are:\\r\\n- Generic axis&mdash;Category index (0-based).\\r\\n- Date axis&mdash;Date instance.\"\nsyntax:\n  return:\n    type: '(event: SelectStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSeriesClick (children)\nname: onSeriesClick\nfullName: SparklineProps.onSeriesClick\nsummary: \"Fires when the user clicks the Chart series.\\r\\n\\r\\nThe \\n`click`\\n event will be triggered by the \\n`tap`\\n and \\n`contextmenu`\\n events. To distinguish between the original events, inspect the \\n`e.originalEvent.type`\\n field.\"\nsyntax:\n  return:\n    type: '(event: SeriesClickEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onSeriesHover (children)\nname: onSeriesHover\nfullName: SparklineProps.onSeriesHover\nsummary: Fires when the user hovers over the Chart series.\nsyntax:\n  return:\n    type: '(event: SeriesHoverEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoom (children)\nname: onZoom\nfullName: SparklineProps.onZoom\nsummary: >-\n  Fires as long as the user is zooming the Chart by using the mousewheel\n  operation.\nsyntax:\n  return:\n    type: '(event: ChartZoomEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoomEnd (children)\nname: onZoomEnd\nfullName: SparklineProps.onZoomEnd\nsummary: Fires when the user stops zooming the Chart.\nsyntax:\n  return:\n    type: '(event: ChartZoomEndEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.onZoomStart (children)\nname: onZoomStart\nfullName: SparklineProps.onZoomStart\nsummary: Fires when the user uses the mousewheel to zoom the Chart.\nsyntax:\n  return:\n    type: '(event: ChartZoomStartEvent) => void'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.paneDefaults (children)\nname: paneDefaults\nfullName: SparklineProps.paneDefaults\nsummary: This option allows to override the default pane options.\nsyntax:\n  return:\n    type: PaneDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.panes (children)\nname: panes\nfullName: SparklineProps.panes\nsummary: The chart panes configuration.\nsyntax:\n  return:\n    type: Array<Pane>\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.pannable (children)\nname: pannable\nfullName: SparklineProps.pannable\nsummary: >-\n  Specifies if the Chart can be panned ([see example]({% slug\n  panzoom_chart_charts %})).\nsyntax:\n  return:\n    type: boolean | DragAction\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.renderAs (children)\nname: renderAs\nfullName: SparklineProps.renderAs\nsummary: \"Sets the preferred rendering engine ([see example]({% slug rendering_chart_charts %})). If not supported by the browser, the Chart switches to the first available mode.\\r\\n\\r\\nThe supported values are:\\r\\n- \\n`\\\"svg\\\"`\\n&mdash;If available, renders the component as an inline \\n`.svg`\\n file.\\r\\n- \\n`\\\"canvas\\\"`\\n&mdash;If available, renders the component as a \\n`canvas`\\n element.\"\nsyntax:\n  return:\n    type: '\"svg\" | \"canvas\"'\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.seriesColors (children)\nname: seriesColors\nfullName: SparklineProps.seriesColors\nsummary: >-\n  The default colors for the Chart series. When all colors are used, new colors\n  are pulled from the start again.\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.seriesDefaults (children)\nname: seriesDefaults\nfullName: SparklineProps.seriesDefaults\nsummary: This option allows to override the default series options.\nsyntax:\n  return:\n    type: SeriesDefaults\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.style (children)\nname: style\nfullName: SparklineProps.style\nsummary: The styles that are applied to the component.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.transitions (children)\nname: transitions\nfullName: SparklineProps.transitions\nsummary: >-\n  If set to \n\n  `true`\n\n  , the Chart plays animations when it displays the series. By default,\n  animations are enabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.type (children)\nname: type\nfullName: SparklineProps.type\nsummary: The data for the default Sparkline series. Discarded if series are supplied.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps.zoomable (children)\nname: zoomable\nfullName: SparklineProps.zoomable\nsummary: >-\n  Specifies if the Chart can be zoomed ([see example]({% slug\n  panzoom_chart_charts %})). Currently is only applicable to linear types, where\n  the range on the X axis can be changed based on the zoom level.\nsyntax:\n  return:\n    type: boolean | Zoomable\npackageName: '@progress/kendo-react-charts'\n\n\nThe KendoReact Sparkline component is part of the KendoReact library of React UI components. It is distributed through NPM under the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-charts\" rel=\"noopener\" target=\"_blank\">kendo-react-charts package</a>.\nThe following example demonstrates the Sparkline in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... The  Sparkline Chart   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\" Key Features\n\n\nSparklines include shortcuts for setting the <a href=\"/kendo-react-ui-develop/components/charts/api/sparklineprops#data\">data</a> and <a href=\"/kendo-react-ui-develop/components/charts/api/sparklineprops#type\">type</a> series options.\nThe Sparkline also supports all configuration options that are applicable for the Categorical series type of the <a href=\"/kendo-react-ui-develop/components/charts/series-types\">Chart</a>.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "AutoComplete": "## API Reference Item\n- Name: AutoCompleteProps.clearButton\n- Type: Property\n- Summary: By default, the AutoComplete renders a button on hovering over the component, which resets the value.\r\nIf \n`clearButton`\n is set to \n`false`\n, the button will not be rendered.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AutoComplete } from '@progress/kendo-react-dropdowns';\n\nconst browsers = ['Chrome', 'Firefox'];\n\nexport default function App() {\n    return <AutoComplete data={browsers} clearButton={false} />;\n}\n\n```\n\n\n<a href=\"/kendo-react-ui/components/form\">Form</a>\n<a href=\"/kendo-react-ui/components/inputs\">Inputs</a>—Input, TextBox, MaskedTextBox, RadioButton, RadioGroup\n<a href=\"/kendo-react-ui/components/labels\">Labels</a>—Label, Floating Label, Hint, Error\n<a href=\"/kendo-react-ui/components/popup\">Popup</a>\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/inputs/numerictextbox\">\n\n\n\nNumericTextBox\nA component for editing and submitting specific numeric values.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/inputs/radiobutton\">\n\n\n\nRadioButton\nA component for selecting an option.\n</a>\n\nThe KendoReact Buttons is a collection of customizable, responsive, and interactive UI components that you can use to trigger actions or display content in your React apps.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "DateRangePicker": "## API Reference Item\n- Name: DateRangePicker\n- Type: Function\n- Summary: Represents the KendoReact DateRangePicker Component.\r\n\r\nAccepts properties of type [DateRangePickerProps]({% slug api_dateinputs_daterangepickerprops %}).\r\nObtaining the \n`ref`\n returns an object of type [DateRangePickerHandle]({% slug api_dateinputs_daterangepickerhandle %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DateRangePicker } from '@progress/kendo-react-dateinputs';\n\nexport default function App() {\n    return (\n        <DateRangePicker />\n    );\n}\n\n```\n\n\n## Additional Context\n### DateRangePicker.DateRangePicker.props (children)\nname: props\nfullName: DateRangePicker.DateRangePicker.props\nsyntax:\n  return:\n    type: DateRangePickerProps | RefAttributes\n\n\n## API Reference Item\n- Name: DateRangePickerProps.popup\n- Type: Property\n- Summary: Enables the customization or the override of the default Popup which is rendered by the DateRangePicker\r\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-popup)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DateRangePicker } from '@progress/kendo-react-dateinputs';\nimport { Popup } from '@progress/kendo-react-popup';\n\nexport default function App() {\n    return (\n        <DateRangePicker\n            popup={(props) => (\n                <Popup {...props}>\n                    <div>Custom Popup Content</div>\n                </Popup>\n            )}\n        />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: DateRangePickerProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact DateRangePicker component]({% slug overview_daterangepicker %}).\n- Syntax: \n\n## Additional Context\n### DateRangePickerProps.adaptive (children)\nname: adaptive\nfullName: DateRangePickerProps.adaptive\nsummary: \"/**\\r\\n* Enable adaptive popup rendering based on viewport width.\\r\\n*\\r\\n*\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: DateRangePickerProps.adaptiveSubtitle\nsummary: \"/**\\r\\n* Set the subtitle text in the adaptive popup (action sheet).\\r\\n* Use only when \\n`adaptive`\\n is \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: DateRangePickerProps.adaptiveTitle\nsummary: \"/**\\r\\n* Set the title text in the adaptive popup (action sheet).\\r\\n* Use only when \\n`adaptive`\\n is \\n`true`\\n.\\r\\n* If not set, it matches the \\n`label`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.allowReverse (children)\nname: allowReverse\nfullName: DateRangePickerProps.allowReverse\nsummary: \"If \\n`allowReverse`\\n is set to \\n`true`\\n, the component skips the validation of whether the \\n`from`\\n value is after the \\n`to`\\n value ([see example]({% slug reverse_daterangepicker %})).\\r\\n\\r\\n> If the [\\n`calendarSettings`\\n](#toc-calendarsettings) property is set, its \\n`allowReverse`\\n will take precedence.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: DateRangePickerProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: DateRangePickerProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.autoFocus (children)\nname: autoFocus\nfullName: DateRangePickerProps.autoFocus\nsummary: \"/**\\r\\n* Apply the \\n`autoFocus`\\n attribute to the first input.\\r\\n*\\r\\n*\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.calendar (children)\nname: calendar\nfullName: DateRangePickerProps.calendar\nsummary: >-\n  Enables the customization or the override of the default Calendar which is\n  rendered by the DateRangePicker.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.calendarSettings (children)\nname: calendarSettings\nfullName: DateRangePickerProps.calendarSettings\nsummary: >-\n  Represents the additional props that can be passed to the\n  [MultiViewCalendar]({% slug overview_multiviewcalendar %}) inside the\n  DateRangePicker ([see example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-the-multiviewcalendar)).\nsyntax:\n  return:\n    type: DateRangePickerCalendarSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.className (children)\nname: className\nfullName: DateRangePickerProps.className\nsummary: |-\n  Sets the \n  `className`\n   of the DateRangePicker.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.clearButton (children)\nname: clearButton\nfullName: DateRangePickerProps.clearButton\nsummary: \"/**\\r\\n* Show a clear button for start and end inputs. Clicking resets the range and fires \\n`onChange`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.defaultShow (children)\nname: defaultShow\nfullName: DateRangePickerProps.defaultShow\nsummary: >-\n  Sets the default state of the DateRangePicker upon render ([see example]({%\n  slug default_value_daterangepicker %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.defaultValue (children)\nname: defaultValue\nfullName: DateRangePickerProps.defaultValue\nsummary: |-\n  Set the initial \n  `value`\n   when uncontrolled ([see example]({% slug default_value_daterangepicker %})).\nsyntax:\n  return:\n    type: SelectionRange\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.disabled (children)\nname: disabled\nfullName: DateRangePickerProps.disabled\nsummary: >-\n  Determines whether the DateRangePicker is disabled ([see example]({% slug\n  disabled_daterangepicker %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.endDateInput (children)\nname: endDateInput\nfullName: DateRangePickerProps.endDateInput\nsummary: \"Enables the customization or the override of the default end DateInput which is rendered by the DateRangePicker\\r\\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-calendar)).\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.endDateInputSettings (children)\nname: endDateInputSettings\nfullName: DateRangePickerProps.endDateInputSettings\nsummary: >-\n  Represents the additional props that can be passed to the end-date\n  [DateInput]({% slug overview_dateinput %}) inside the DateRangePicker ([see\n  example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-dateinputs)).\nsyntax:\n  return:\n    type: DateRangePickerDateInputSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.focusedDate (children)\nname: focusedDate\nfullName: DateRangePickerProps.focusedDate\nsummary: >-\n  Specifies the focused date of the DateRangePicker ([see example]({% slug\n  focused_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.format (children)\nname: format\nfullName: DateRangePickerProps.format\nsummary: \"Specifies the \\n`date`\\n format which is used for formatting the value of the DateInput ([see example]({% slug formats_dateinput %})).\\r\\n\\r\\n> If [\\n`startDateInputSettings`\\n](#toc-startdateinputsettings) or [\\n`endDateInputSettings`\\n](#toc-enddateinputsettings) are set, their \\n`format`\\n will take precedence.\"\nsyntax:\n  return:\n    type: string | DateFormatOptions\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.id (children)\nname: id\nfullName: DateRangePickerProps.id\nsummary: |-\n  Specifies the \n  `id`\n   of the DateRangePicker.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.inputAttributes (children)\nname: inputAttributes\nfullName: DateRangePickerProps.inputAttributes\nsummary: \"Pass HTML attributes to the internal focusable input elements.\\r\\nAttributes required for core logic are ignored.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.max (children)\nname: max\nfullName: DateRangePickerProps.max\nsummary: >-\n  Specifies the greatest valid date ([see example]({% slug\n  dateranges_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.min (children)\nname: min\nfullName: DateRangePickerProps.min\nsummary: >-\n  Specifies the smallest valid date ([see example]({% slug\n  dateranges_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onBlur (children)\nname: onBlur\nfullName: DateRangePickerProps.onBlur\nsummary: Fires each time any of the DateRangePicker elements gets blurred.\nsyntax:\n  return:\n    type: '(event: FocusEvent<any, Element>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onCancel (children)\nname: onCancel\nfullName: DateRangePickerProps.onCancel\nsummary: >-\n  Fires when the popup is about to cancel in ([adaptive mode]({% slug\n  adaptive_rendering_daterangepicker %})).\nsyntax:\n  return:\n    type: '(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onChange (children)\nname: onChange\nfullName: DateRangePickerProps.onChange\nsummary: >-\n  Fires when the user changes part of the range ([see example]({% slug\n  controlled_daterangepicker %}#toc-controlling-the-value)).\nsyntax:\n  return:\n    type: '(event: DateRangePickerChangeEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onClose (children)\nname: onClose\nfullName: DateRangePickerProps.onClose\nsummary: Fires when the popup closes.\nsyntax:\n  return:\n    type: '(event: DateRangePickerCloseEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onFocus (children)\nname: onFocus\nfullName: DateRangePickerProps.onFocus\nsummary: Fires each time the user focuses any of the DateRangePicker elements.\nsyntax:\n  return:\n    type: '(event: FocusEvent<any, Element>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onOpen (children)\nname: onOpen\nfullName: DateRangePickerProps.onOpen\nsummary: Fires when the popup opens.\nsyntax:\n  return:\n    type: '(event: DateRangePickerOpenEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.popupSettings (children)\nname: popupSettings\nfullName: DateRangePickerProps.popupSettings\nsummary: >-\n  Represents the additional props that will be passed to the [Popup]({% slug\n  overview_popup %}) inside the DateRangePicker ([see example]({% slug\n  child_settings_daterangepicker %}#toc-configuring-the-popup)).\nsyntax:\n  return:\n    type: DateRangePickerPopupSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.show (children)\nname: show\nfullName: DateRangePickerProps.show\nsummary: >-\n  Specifies if the calendar will be displayed ([see example]({% slug\n  controlled_daterangepicker %}#toc-controlling-the-popup-state)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.startDateInput (children)\nname: startDateInput\nfullName: DateRangePickerProps.startDateInput\nsummary: \"Enables the customization or the override of the default start DateInput which is rendered by the DateRangePicker\\r\\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-dateinputs)).\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.startDateInputSettings (children)\nname: startDateInputSettings\nfullName: DateRangePickerProps.startDateInputSettings\nsummary: >-\n  Represents the additional props that will be passed to the start-date\n  [DateInput]({% slug overview_dateinput %}) inside the DateRangePicker ([see\n  example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-dateinputs)).\nsyntax:\n  return:\n    type: DateRangePickerDateInputSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.style (children)\nname: style\nfullName: DateRangePickerProps.style\nsummary: >-\n  Specifies the additional styles that will be applied to the wrapping\n  DateRangePicker element.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.swapButton (children)\nname: swapButton\nfullName: DateRangePickerProps.swapButton\nsummary: \"Determines whether the DateRangePicker will display a **Swap Value** button ([see example]({% slug reverse_daterangepicker %}#toc-swapping-start-and-end-dates-in-ranges)).\\r\\n\\r\\n> The DateRangePicker will display the swap button only if the [\\n`allowReverse`\\n](#toc-allowreverse) property is also set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.tabIndex (children)\nname: tabIndex\nfullName: DateRangePickerProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   property of the DatePicker.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.valid (children)\nname: valid\nfullName: DateRangePickerProps.valid\nsummary: \"Override the validity state.\\r\\nIf \\n`valid`\\n is set, ignore \\n`required`\\n.\\r\\nPart of [FormComponentProps]({% slug api_common_formcomponentprops %}).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.value (children)\nname: value\nfullName: DateRangePickerProps.value\nsummary: \"Set the selected range ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).\\r\\nProvide \\n`start`\\n and \\n`end`\\n valid \\n`Date`\\n values or \\n`null`\\n.\"\nsyntax:\n  return:\n    type: SelectionRange\npackageName: '@progress/kendo-react-dateinputs'\n\n\nThe KendoReact DateRangePicker combines the KendoReact DateInput and MultiViewCalendar components and enables the user to enter or pick a date-range value. The DateRangePicker is part of the <a href=\"/kendo-react-ui-develop/components/dateinputs\">KendoReact Date Inputs</a> component library. The procedures for installing, importing, and using the Date Inputs are identical for all components in the package. To learn how to use the DateRangePicker and the rest of the Date Inputs, see the <a href=\"/kendo-react-ui-develop/components/dateinputs/get-started\">Getting Started with the KendoReact Date Inputs</a> guide.\n\nKey Features The  DateRangePicker   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\"\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "DataGrid": "## API Reference Item\n- Name: GridProps.autoProcessData\n- Type: Property\n- Summary: Enables data-processing inside the GridComponent based on its state.\r\nProvides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridCellsSettings.data\n- Type: Property\n- Summary: Custom component for rendering the data cell.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn as Column, GridCellsSettings } from '@progress/kendo-react-grid';\n\nconst products = [\n    {\n        ProductID: 1,\n        ProductName: 'Chai',\n        SupplierID: 1,\n        CategoryID: 1,\n        QuantityPerUnit: '10 boxes x 20 bags',\n        UnitPrice: 18.0,\n        UnitsInStock: 39,\n        UnitsOnOrder: 0,\n        ReorderLevel: 10,\n        Discontinued: false,\n        Category: {\n            CategoryID: 1,\n            CategoryName: 'Beverages',\n            Description: 'Soft drinks, coffees, teas, beers, and ales'\n        }\n    },\n    {\n        ProductID: 2,\n        ProductName: 'Chang',\n        SupplierID: 1,\n        CategoryID: 1,\n        QuantityPerUnit: '24 - 12 oz bottles',\n        UnitPrice: 19.0,\n        UnitsInStock: 17,\n        UnitsOnOrder: 40,\n        ReorderLevel: 25,\n        Discontinued: false,\n        Category: {\n            CategoryID: 1,\n            CategoryName: 'Beverages',\n            Description: 'Soft drinks, coffees, teas, beers, and ales'\n        }\n    },\n    {\n        ProductID: 3,\n        ProductName: 'Aniseed Syrup',\n        SupplierID: 1,\n        CategoryID: 2,\n        QuantityPerUnit: '12 - 550 ml bottles',\n        UnitPrice: 10.0,\n        UnitsInStock: 13,\n        UnitsOnOrder: 70,\n        ReorderLevel: 25,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 4,\n        ProductName: 'Chef Antons Cajun Seasoning',\n        SupplierID: 2,\n        CategoryID: 2,\n        QuantityPerUnit: '48 - 6 oz jars',\n        UnitPrice: 22.0,\n        UnitsInStock: 53,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 5,\n        ProductName: 'Chef Antons Gumbo Mix',\n        SupplierID: 2,\n        CategoryID: 2,\n        QuantityPerUnit: '36 boxes',\n        UnitPrice: 21.35,\n        UnitsInStock: 0,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: true,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 6,\n        ProductName: 'Grandmas Boysenberry Spread',\n        SupplierID: 3,\n        CategoryID: 2,\n        QuantityPerUnit: '12 - 8 oz jars',\n        UnitPrice: 25.0,\n        UnitsInStock: 120,\n        UnitsOnOrder: 0,\n        ReorderLevel: 25,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 7,\n        ProductName: 'Uncle Bobs Organic Dried Pears',\n        SupplierID: 3,\n        CategoryID: 7,\n        QuantityPerUnit: '12 - 1 lb pkgs.',\n        UnitPrice: 30.0,\n        UnitsInStock: 15,\n        UnitsOnOrder: 0,\n        ReorderLevel: 10,\n        Discontinued: false,\n        Category: {\n            CategoryID: 7,\n            CategoryName: 'Produce',\n            Description: 'Dried fruit and bean curd'\n        }\n    },\n    {\n        ProductID: 8,\n        ProductName: 'Northwoods Cranberry Sauce',\n        SupplierID: 3,\n        CategoryID: 2,\n        QuantityPerUnit: '12 - 12 oz jars',\n        UnitPrice: 40.0,\n        UnitsInStock: 6,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: false,\n        Category: {\n            CategoryID: 2,\n            CategoryName: 'Condiments',\n            Description: 'Sweet and savory sauces, relishes, spreads, and seasonings'\n        }\n    },\n    {\n        ProductID: 9,\n        ProductName: 'Mishi Kobe Niku',\n        SupplierID: 4,\n        CategoryID: 6,\n        QuantityPerUnit: '18 - 500 g pkgs.',\n        UnitPrice: 97.0,\n        UnitsInStock: 29,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: true,\n        Category: {\n            CategoryID: 6,\n            CategoryName: 'Meat/Poultry',\n            Description: 'Prepared meats'\n        }\n    },\n    {\n        ProductID: 10,\n        ProductName: 'Ikura',\n        SupplierID: 4,\n        CategoryID: 8,\n        QuantityPerUnit: '12 - 200 ml jars',\n        UnitPrice: 31.0,\n        UnitsInStock: 31,\n        UnitsOnOrder: 0,\n        ReorderLevel: 0,\n        Discontinued: false,\n        Category: {\n            CategoryID: 8,\n            CategoryName: 'Seafood',\n            Description: 'Seaweed and fish'\n        }\n    }\n];\n\nconst App = () => {\n    const cellsSettings: GridCellsSettings = {\n        data: (tdProps) => {\n            const { ProductName } = tdProps.dataItem;\n            const { style, className, colSpan } = tdProps;\n\n            return (\n                <td style={style} className={className} colSpan={colSpan}>\n                    {ProductName} Custom Cell\n                </td>\n            );\n        }\n    };\n\n    return (\n        <Grid data={products} cells={cellsSettings}>\n            <Column field=\"ProductID\" title=\"ID\" />\n            <Column field=\"ProductName\" title=\"Product Name\" />\n            <Column field=\"UnitPrice\" title=\"Price\" />\n            <Column field=\"UnitsInStock\" title=\"In stock\" />\n        </Grid>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: GridProps.selectable\n- Type: Property\n- Summary: The Grid selectable settings.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid\n            data={sampleData}\n            autoProcessData={true}\n            dataItemKey=\"id\"\n            selectable={{\n                enabled: true\n            }}\n        >\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.lockGroups\n- Type: Property\n- Summary: Defines if the group descriptor columns are locked (frozen or sticky).\r\nLocked columns are the columns that are visible at all times while the user scrolls the component horizontally.\r\nDefaults to \n`false`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' },\n    { id: 4, name: 'Charlie', description: 'description 4' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\" groupable={true} lockGroups={true}>\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.onHighlightChange\n- Type: Property\n- Summary: Fires when the Grid highlight is modified. You must handle the event and filter the data.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nconst App = () => {\n    return <Grid onHighlightChange={(event) => console.log('Highlight changed:', event.highlight)} />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### GridHighlightChangeEvent (generic)\nname: GridHighlightChangeEvent\nfullName: GridHighlightChangeEvent\nsummary: |-\n  Represents the object of the \n  `onHighlightChange`\n   Grid event.\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - highlight\n\n\n## API Reference Item\n- Name: GridColumnProps.hidden\n- Type: Property\n- Summary: Controls the visibility of the Grid's column.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridColumn field=\"id\" title=\"Id\" hidden={true} />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridToolbar\n- Type: Function\n- Summary: Represents the GridToolbar component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridToolbar } from '@progress/kendo-react-grid';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridToolbar>\n                <Button>My Toolbar Button</Button>\n            </GridToolbar>\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## Additional Context\n### GridToolbar.GridToolbar.props (children)\nname: props\nfullName: GridToolbar.GridToolbar.props\nsyntax:\n  return:\n    type: GridToolbarProps\n\n\nBuilt-in data operations for paging, sorting, filtering, grouping.\nConfiguration button for enabling Grid's feature (paging, sorting, grouping, selection, filtering).\nConfiguration button for show/hide columns.\nGlobal filter in the toolbar\nHighlights for within the cells for the matching filter expression from the toolbar filter.\nBuilt-in option for selection (requires dataItemKey to be set).\nPDFExport\nExcelExport\nButton for expand/collapse all groups\nEvent for getting an array with the selected dataItems\n\nProperties\n\nSetup\n\nPinning rows requires the followings steps:\n\n\nUse the <a href=\"/kendo-react-ui-develop/components/grid/api/gridprops#cells\">cells</a> prop of the Grid to implement a customdata cell and add the k-grid-row-sticky class and the style top to the rows that will be locked.\njsx\n\n\n\n\nSet <a href=\"/kendo-react-ui-develop/components/grid/api/gridprops#rowheight\">rowHeight</a> to the Grid as the locked rows require fixed equal height of all rows in order to correctly calculate their position.\n\nData Operations\n\nDelve into the intricacies of executing basic data operations, including server-side filtering, sorting, paging, etc. Understand how these operations can be performed either on the client or the server.\n<a href=\"/kendo-react-ui/components/grid/rsc-mode/data-operations\">Read more about React Data Grid RSC Mode data operations...</a>\n\nServer Actions\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "AppBar": "## API Reference Item\n- Name: AppBar\n- Type: Function\n- Summary: Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### AppBarProps (children)\nname: AppBarProps\nfullName: AppBarProps\nsummary: \"Represents the props of the [KendoReact AppBar component]({% slug overview_appbar %}).\\r\\nUsed to display information, actions, branding titles and additional navigation on the current screen.\"\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - id\n  - position\n  - positionMode\n  - style\n  - themeColor\n\n---\n### AppBar.AppBar.props (children)\nname: props\nfullName: AppBar.AppBar.props\nsyntax:\n  return:\n    type: AppBarProps | RefAttributes\n\n\n## API Reference Item\n- Name: AppBarProps.themeColor\n- Type: Property\n- Summary: Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\r\n\r\n* The possible values are:\r\n* \n`light`\n (Default)\r\n* 'primary'\r\n* 'secondary'\r\n* 'tertiary'\r\n* 'info'\r\n* 'success'\r\n* 'warning'\r\n* 'error'\r\n* 'dark'\r\n* 'inherit'\r\n* 'inverse'\n- Syntax: \n\n- Return Type: name: AppBarThemeColor\nfullName: AppBarThemeColor\nsummary: \"Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\\r\\n\\r\\n* The possible values are:\\r\\n* \\n`light`\\n (Default)\\r\\n* 'primary'\\r\\n* 'secondary'\\r\\n* 'tertiary'\\r\\n* 'info'\\r\\n* 'success'\\r\\n* 'warning'\\r\\n* 'error'\\r\\n* 'dark'\\r\\n* 'inherit'\\r\\n* 'inverse'\"\nsyntax:\n  return:\n    type: >-\n      \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\" |\n      \"warning\" | \"error\" | \"dark\" | \"light\" | \"inherit\" | \"inverse\"\npackageName: '@progress/kendo-react-layout'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\nThe AppBar provides information and actions related to the current application screen. It is typically used to show page titles, brand identity and can contain navigation items.\nThis   is   a  Free React  AppBarThe KendoReact  AppBar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the AppBar in action. <a href=\"/kendo-react-ui-develop/components/layout/appbar/appearance\">Appearance</a>—The AppBar comes with predefined option that allow you to set its theme color.\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/responsive-design\">Responsive Design</a>—The responsive layout adapts to any device and screen size.\n\nKeyboard Navigation\n\nFor more details about the Appbar component's keyboard navigation, refer to the article on <a href=\"/kendo-react-ui-develop/components/layout/appbar/keyboard-navigation\">keyboard navigation in the Appbar component</a>.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Grid": "## API Reference Item\n- Name: GridProps.data\n- Type: Property\n- Summary: Sets the data of the Grid ([see example]({% slug paging_grid %})). If you use paging, the \n`data`\n option has to contain only the items for the current page. It takes values of type null, any or [DataResult]({% slug api_kendo-data-query_dataresult%})\r\nAccepts values of type \n`null`\n, \n`any[]`\n, or \n`DataResult`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nexport default function App() {\n    return (\n        <Grid\n            data={[\n                { id: 1, name: 'John Doe', age: 30 },\n                { id: 2, name: 'Jane Smith', age: 25 },\n                { id: 3, name: 'Sam Johnson', age: 40 }\n            ]}\n        >\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"age\" title=\"Age\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Grid\n- Type: Function\n- Summary: Represents the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nconst App = () => {\n    return <Grid />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Grid.Grid.props (children)\nname: props\nfullName: Grid.Grid.props\nsyntax:\n  return:\n    type: GridProps | RefAttributes\n\n\n## API Reference Item\n- Name: GridColumnProps.cells\n- Type: Property\n- Summary: Specifies a set of cell components that the Grid will render instead of the built-in cell.\n- Syntax: \n\n- Return Type: name: GridCellsSettings\nfullName: GridCellsSettings\nsummary: The settings of the cells prop options.\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - data\n  - edit\n  - filterCell\n  - footerCell\n  - group\n  - groupFooter\n  - groupHeader\n  - headerCell\n  - hierarchy\n  - select\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridCustomCellProps } from '@progress/kendo-react-grid';\n\nconst CustomCell = (props: GridCustomCellProps) => {\n    return (\n        <td\n            {...props.tdProps}\n            colSpan={1}\n            style={{\n                color: props.children === 'a1' ? 'green' : 'crimson'\n            }}\n        >\n            {props.children}\n        </td>\n    );\n};\n\nexport default function App() {\n    return (\n        <Grid\n            data={[\n                { id: 'a1', name: 'cell 1' },\n                { id: 'a2', name: 'cell2' }\n            ]}\n        >\n            <GridColumn field=\"id\" cells={{ data: CustomCell }} />\n            <GridColumn field=\"name\" cells={{ data: CustomCell }} />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.pageable\n- Type: Property\n- Summary: Configures the pager of the Grid. Accepts \n`GridPagerSettings`\n or a boolean value.([see example]({% slug paging_grid %}))\r\n\r\nThe available options are:\r\n- \n`buttonCount: Number`\n&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.\r\n- \n`info: Boolean`\n&mdash;Toggles the information about the current page and the total number of records.\r\n- \n`type: PagerType`\n&mdash;Accepts the \n`numeric`\n (buttons with numbers) and \n`input`\n (input for typing the page number) values.\r\n- \n`pageSizes: Boolean`\n or \n`Array<number>`\n&mdash;Shows a menu for selecting the page size.\r\n- \n`pageSizeValue: String or Number`\n&mdash;Sets the selected value of the page size Dropdownlist. It is useful when the selected value could also be a string not only a number.\r\n- \n`previousNext: Boolean`\n&mdash;Toggles the **Previous** and **Next** buttons.\r\n- \n`navigatable: Boolean`\n&mdash;Defines if the pager will be navigatable.\r\n- \n`responsive: Boolean`\n&mdash;Defines if the pager will be responsive. If true, hides the tools that do not fit to the available space.\r\n- \n`adaptive: Boolean`\n&mdash;Providing different rendering of the page sizes select element based on the screen dimensions.\r\n- \n`adaptiveTitle: String`\n&mdash;Specifies the text that is rendered as title in the adaptive page sizes select element.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nconst generateData = (count: number) => {\n    return Array.from({ length: count }, (_, idx) => ({\n        id: idx + 1,\n        name: `Name ${idx + 1}`\n    }));\n};\n\nexport default function App() {\n    const data = React.useMemo(() => generateData(100), []);\n\n    return (\n        <Grid data={data} style={{ height: '400px' }} autoProcessData={true} pageable={true}>\n            <GridColumn field=\"id\" title=\"ID\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Additional Context\n### GridProps.adaptive (children)\nname: adaptive\nfullName: GridProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: GridProps.adaptiveTitle\nsummary: Specifies the text that is rendered as title in the adaptive popup.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.autoProcessData (children)\nname: autoProcessData\nfullName: GridProps.autoProcessData\nsummary: \"Enables data-processing inside the GridComponent based on its state.\\r\\nProvides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.\"\nsyntax:\n  return:\n    type: >-\n      boolean | { filter?: boolean, group?: boolean, page?: boolean, search?:\n      boolean, sort?: boolean }\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.cells (children)\nname: cells\nfullName: GridProps.cells\nsummary: >-\n  Defines a set of custom cell components that the Grid will render instead of\n  the default cells.\nsyntax:\n  return:\n    type: GridCellsSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.children (children)\nname: children\nfullName: GridProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### GridProps.className (children)\nname: className\nfullName: GridProps.className\nsummary: Sets a class for the Grid DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.clipboard (children)\nname: clipboard\nfullName: GridProps.clipboard\nsummary: |-\n  Enables clipboard copy, cut, and paste manipulations. Accepts \n  `ClipboardSettings`\n   or a boolean value.\nsyntax:\n  return:\n    type: boolean | ClipboardSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenu (children)\nname: columnMenu\nfullName: GridProps.columnMenu\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the column\n  menu of the Grid.\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenuIcon (children)\nname: columnMenuIcon\nfullName: GridProps.columnMenuIcon\nsummary: \"Globally overrides the default (three vertical dots) column menu icon for the whole Grid. If set, the prop can be overridden on column level\\r\\n using the ([menuIcon]({% slug api_grid_gridcolumnprops %}#toc-menuicon)) property.\"\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnVirtualization (children)\nname: columnVirtualization\nfullName: GridProps.columnVirtualization\nsummary: >-\n  Enables virtualization of the columns. If virtualization is enabled, the\n  columns outside the view are not rendered.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnsState (children)\nname: columnsState\nfullName: GridProps.columnsState\nsummary: The collection of column states of the grid.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.contextMenu (children)\nname: contextMenu\nfullName: GridProps.contextMenu\nsummary: Specifies the context menu settings applied to the Grid.\nsyntax:\n  return:\n    type: >-\n      boolean | GridContextMenuOptions | (options: GridCellBaseOptions) =>\n      boolean | GridContextMenuOptions\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.dataItemKey (children)\nname: dataItemKey\nfullName: GridProps.dataItemKey\nsummary: \"Sets the Grid row key prop to the value of this field in the dataItem.\\r\\nIf not set, the dataItem index will be used for the row key, which might lead to rows not updating during paging or scrolling.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultColumnsState (children)\nname: defaultColumnsState\nfullName: GridProps.defaultColumnsState\nsummary: The default columns state, used only for the initial load.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultDetailExpand (children)\nname: defaultDetailExpand\nfullName: GridProps.defaultDetailExpand\nsummary: |-\n  The default \n  `detailExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultEdit (children)\nname: defaultEdit\nfullName: GridProps.defaultEdit\nsummary: |-\n  The default \n  `edit`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultFilter (children)\nname: defaultFilter\nfullName: GridProps.defaultFilter\nsummary: |-\n  The default \n  `filter`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroup (children)\nname: defaultGroup\nfullName: GridProps.defaultGroup\nsummary: |-\n  The default \n  `group`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroupExpand (children)\nname: defaultGroupExpand\nfullName: GridProps.defaultGroupExpand\nsummary: |-\n  The default \n  `groupExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSearch (children)\nname: defaultSearch\nfullName: GridProps.defaultSearch\nsummary: >-\n  The descriptor by which the data is searched by default. Its first\n  FilterDescriptor populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSelect (children)\nname: defaultSelect\nfullName: GridProps.defaultSelect\nsummary: |-\n  The default \n  `select`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSkip (children)\nname: defaultSkip\nfullName: GridProps.defaultSkip\nsummary: |-\n  The default \n  `skip`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSort (children)\nname: defaultSort\nfullName: GridProps.defaultSort\nsummary: \"The default \\n`sort`\\n state applied to the Grid when using uncontrolled mode.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultTake (children)\nname: defaultTake\nfullName: GridProps.defaultTake\nsummary: |-\n  The default \n  `take`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detail (children)\nname: detail\nfullName: GridProps.detail\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the detail\n  rows of the currently expanded items ([see example]({% slug hierarchy_grid\n  %})).\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailExpand (children)\nname: detailExpand\nfullName: GridProps.detailExpand\nsummary: The descriptor by which the detail row is expanded.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailRowHeight (children)\nname: detailRowHeight\nfullName: GridProps.detailRowHeight\nsummary: Defines the detail row height and forces an equal height to all detail rows.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.edit (children)\nname: edit\nfullName: GridProps.edit\nsummary: The descriptor by which the in-edit mode of an item is defined.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editDialog (children)\nname: editDialog\nfullName: GridProps.editDialog\nsummary: >-\n  Sets a custom edit dialog component that the Grid will render instead of the\n  built-in edit dialog.\nsyntax:\n  return:\n    type: '(props: GridEditDialogProps) => ReactNode'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editable (children)\nname: editable\nfullName: GridProps.editable\nsummary: The Grid editable settings.\nsyntax:\n  return:\n    type: boolean | GridEditableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterOperators (children)\nname: filterOperators\nfullName: GridProps.filterOperators\nsummary: The filter operators for the Grid filters.\nsyntax:\n  return:\n    type: GridFilterOperators\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterable (children)\nname: filterable\nfullName: GridProps.filterable\nsummary: |-\n  Enables filtering for the columns with their \n  `field`\n   option set.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.fixedScroll (children)\nname: fixedScroll\nfullName: GridProps.fixedScroll\nsummary: \"Determines if the scroll position will be updated after a data change.\\r\\nIf set to \\n`true`\\n, the scroll will remain in the same position.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.group (children)\nname: group\nfullName: GridProps.group\nsummary: \"The [descriptors]({% slug api_kendo-data-query_groupdescriptor %})[] by which the data will be grouped\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupExpand (children)\nname: groupExpand\nfullName: GridProps.groupExpand\nsummary: The descriptor by which the group is expanded.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupable (children)\nname: groupable\nfullName: GridProps.groupable\nsummary: >-\n  Determines if grouping by dragging and dropping the column headers is allowed\n  ([more information and examples]({% slug groupingbasics_grid %})).\nsyntax:\n  return:\n    type: boolean | GridGroupableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.highlight (children)\nname: highlight\nfullName: GridProps.highlight\nsummary: \"The descriptor by which the highlight state of an item is defined.\\r\\nPassing a boolean value will highlight the whole row, while passing an object will highlight individual cells by their field.\"\nsyntax:\n  return:\n    type: GridHighlightDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.id (children)\nname: id\nfullName: GridProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.language (children)\nname: language\nfullName: GridProps.language\nsummary: \"Sets the language of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.loader (children)\nname: loader\nfullName: GridProps.loader\nsummary: A custom component that the Grid will render instead of the built-in loader.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.locale (children)\nname: locale\nfullName: GridProps.locale\nsummary: \"Sets the locale of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.lockGroups (children)\nname: lockGroups\nfullName: GridProps.lockGroups\nsummary: \"Defines if the group descriptor columns are locked (frozen or sticky).\\r\\nLocked columns are the columns that are visible at all times while the user scrolls the component horizontally.\\r\\nDefaults to \\n`false`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.navigatable (children)\nname: navigatable\nfullName: GridProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the Grid.\\r\\nBy default, navigation is disabled and the Grid content is accessible in the normal tab sequence.\"\nsyntax:\n  return:\n    type: boolean | NavigatableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onClipboard (children)\nname: onClipboard\nfullName: GridProps.onClipboard\nsummary: \"Fires when clipboard support is enabled, and one of the actions (e.g., copy) is triggered.\\r\\nAccepts a \\n`GridClipboardEvent`\\n object.\"\nsyntax:\n  return:\n    type: '(event: GridClipboardEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnReorder (children)\nname: onColumnReorder\nfullName: GridProps.onColumnReorder\nsummary: Fires when the columns are reordered.\nsyntax:\n  return:\n    type: '(event: GridColumnReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnResize (children)\nname: onColumnResize\nfullName: GridProps.onColumnResize\nsummary: >-\n  Fires when a column is resized. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridColumnResizeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnsStateChange (children)\nname: onColumnsStateChange\nfullName: GridProps.onColumnsStateChange\nsummary: Fires when the columns state of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridColumnsStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenu (children)\nname: onContextMenu\nfullName: GridProps.onContextMenu\nsummary: >-\n  The event that is fired when the ContextMenu is activated. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenuItemClick (children)\nname: onContextMenuItemClick\nfullName: GridProps.onContextMenuItemClick\nsummary: >-\n  The event that is fired when the ContextMenu item is clicked. Only fired when\n  the Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuItemClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDataStateChange (children)\nname: onDataStateChange\nfullName: GridProps.onDataStateChange\nsummary: >-\n  Fires when the data state of the Grid is changed ([more information]({% slug\n  localoperations_grid %}) and [example]({% slug odataserveroperations_grid\n  %})).\nsyntax:\n  return:\n    type: '(event: GridDataStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDetailExpandChange (children)\nname: onDetailExpandChange\nfullName: GridProps.onDetailExpandChange\nsummary: Fires when the user expands or collapses a detail row.\nsyntax:\n  return:\n    type: '(event: GridDetailExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onEditChange (children)\nname: onEditChange\nfullName: GridProps.onEditChange\nsummary: Fires when the user enters or exits an in-edit mode of a row or cell.\nsyntax:\n  return:\n    type: '(event: GridEditChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onFilterChange (children)\nname: onFilterChange\nfullName: GridProps.onFilterChange\nsummary: >-\n  Fires when the Grid filter is modified through the UI. You must handle the\n  event and filter the data.\nsyntax:\n  return:\n    type: '(event: GridFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupChange (children)\nname: onGroupChange\nfullName: GridProps.onGroupChange\nsummary: \"Fires when the grouping of the Grid is changed. You have to handle the event yourself and group the data\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: '(event: GridGroupChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupExpandChange (children)\nname: onGroupExpandChange\nfullName: GridProps.onGroupExpandChange\nsummary: Fires when the user expands or collapses a group.\nsyntax:\n  return:\n    type: '(event: GridGroupExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHeaderSelectionChange (children)\nname: onHeaderSelectionChange\nfullName: GridProps.onHeaderSelectionChange\nsummary: >-\n  Fires when the user clicks the checkbox of a column header whose type is set\n  to \n\n  `checkbox`\n\n  .\nsyntax:\n  return:\n    type: '(event: GridHeaderSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHighlightChange (children)\nname: onHighlightChange\nfullName: GridProps.onHighlightChange\nsummary: >-\n  Fires when the Grid highlight is modified. You must handle the event and\n  filter the data.\nsyntax:\n  return:\n    type: '(event: GridHighlightChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onItemChange (children)\nname: onItemChange\nfullName: GridProps.onItemChange\nsummary: Fires when the user changes the values of the item.\nsyntax:\n  return:\n    type: '(event: GridItemChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onKeyDown (children)\nname: onKeyDown\nfullName: GridProps.onKeyDown\nsummary: >-\n  Fires when the user press keyboard key. Only fired when the Grid is run as a\n  client component.\nsyntax:\n  return:\n    type: '(event: GridKeyDownEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onNavigationAction (children)\nname: onNavigationAction\nfullName: GridProps.onNavigationAction\nsummary: >-\n  Fires when Grid keyboard navigation position is changed. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridNavigationActionEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPageChange (children)\nname: onPageChange\nfullName: GridProps.onPageChange\nsummary: Fires when the page of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridPageChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPdfExport (children)\nname: onPdfExport\nfullName: GridProps.onPdfExport\nsummary: Fires when the user clicks the PDF export button.\nsyntax:\n  return:\n    type: '(event: Object) => Promise'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowClick (children)\nname: onRowClick\nfullName: GridProps.onRowClick\nsummary: Fires when the user clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowDoubleClick (children)\nname: onRowDoubleClick\nfullName: GridProps.onRowDoubleClick\nsummary: Fires when the user double clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowDoubleClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowReorder (children)\nname: onRowReorder\nfullName: GridProps.onRowReorder\nsummary: Fires when the user reorders a row.\nsyntax:\n  return:\n    type: '(event: GridRowReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onScroll (children)\nname: onScroll\nfullName: GridProps.onScroll\nsummary: >-\n  Fires when Grid is scrolled. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSearchChange (children)\nname: onSearchChange\nfullName: GridProps.onSearchChange\nsummary: Fires when the search value of the GridSearchBox is changed.\nsyntax:\n  return:\n    type: '(event: GridSearchChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSelectionChange (children)\nname: onSelectionChange\nfullName: GridProps.onSelectionChange\nsummary: Fires when the user tries to select or deselect a row or cell.\nsyntax:\n  return:\n    type: '(event: GridSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSortChange (children)\nname: onSortChange\nfullName: GridProps.onSortChange\nsummary: \"Fires when the sorting of the Grid is changed. You must handle the event and sort the data.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: '(event: GridSortChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pageSize (children)\nname: pageSize\nfullName: GridProps.pageSize\nsummary: >-\n  Defines the page size used by the Grid pager. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pager (children)\nname: pager\nfullName: GridProps.pager\nsummary: \"The pager component that the Grid will render instead of the built-in pager.\\r\\n It takes values of type null and ComponentType&lt;[PagerProps]({% slug api_data-tools_pagerprops %})&gt\"\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pdf (children)\nname: pdf\nfullName: GridProps.pdf\nsummary: \"When set to true the Grid pdf export will be enabled.\\r\\nIf set to an object, the Grid will use the provided settings to export the PDF.\"\nsyntax:\n  return:\n    type: boolean | GridProps\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.reorderable (children)\nname: reorderable\nfullName: GridProps.reorderable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can reorder columns by dragging their header cells ([see\n  example]({% slug reordering_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.resizable (children)\nname: resizable\nfullName: GridProps.resizable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can resize columns by dragging the edges (resize handles) of their\n  header cells ([see example]({% slug resizing_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowHeight (children)\nname: rowHeight\nfullName: GridProps.rowHeight\nsummary: >-\n  Defines the row height and forces an equal height to all rows ([see\n  example]({% slug scrollmodes_grid %})).\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowReorderable (children)\nname: rowReorderable\nfullName: GridProps.rowReorderable\nsummary: Defines the row reorder settings.\nsyntax:\n  return:\n    type: boolean | GridRowReorderSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowSpannable (children)\nname: rowSpannable\nfullName: GridProps.rowSpannable\nsummary: Enables the built-in row span feature of the Grid.\nsyntax:\n  return:\n    type: boolean | GridRowSpannableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rows (children)\nname: rows\nfullName: GridProps.rows\nsyntax:\n  return:\n    type: GridRowsSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.scrollable (children)\nname: scrollable\nfullName: GridProps.scrollable\nsummary: \"Defines the scroll mode that is used by the Grid ([see example]({% slug scrollmodes_grid %})).\\r\\n\\r\\n The available options are:\\r\\n - \\n`none`\\n&mdash;Renders no scrollbar.\\r\\n - \\n`scrollable`\\n&mdash;This is the default scroll mode. It requires the setting of the \\n`height`\\n option.\\r\\n - \\n`virtual`\\n&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.\"\nsyntax:\n  return:\n    type: ScrollMode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.search (children)\nname: search\nfullName: GridProps.search\nsummary: >-\n  The descriptor by which the data is searched. Its first FilterDescriptor\n  populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.searchFields (children)\nname: searchFields\nfullName: GridProps.searchFields\nsummary: Defines the fields of the data that are filtered by the GridSearchBox.\nsyntax:\n  return:\n    type: Array<string | SearchField>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.select (children)\nname: select\nfullName: GridProps.select\nsummary: \"The [descriptor]({% slug api_data-tools_selectdescriptor %}) by which the selected state of an item is defined.\\r\\nPassing a boolean value will select the whole row, while passing an array of strings will select individual.\"\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.selectable (children)\nname: selectable\nfullName: GridProps.selectable\nsummary: The Grid selectable settings.\nsyntax:\n  return:\n    type: boolean | GridSelectableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.showLoader (children)\nname: showLoader\nfullName: GridProps.showLoader\nsummary: Specifies whether the loader of the Grid will be displayed.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.size (children)\nname: size\nfullName: GridProps.size\nsummary: \"Configures the \\n`size`\\n of the Grid.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\"\nsyntax:\n  return:\n    type: '\"small\" | \"medium\"'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.skip (children)\nname: skip\nfullName: GridProps.skip\nsummary: >-\n  Defines the number of records that will be skipped by the pager ([see\n  example]({% slug paging_grid %})). Required by the paging functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.sort (children)\nname: sort\nfullName: GridProps.sort\nsummary: >-\n  The ([descriptors]({% slug api_kendo-data-query_sortdescriptor %})) by which\n  the data is sorted. Applies the sorting styles and buttons to the affected\n  columns.\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.style (children)\nname: style\nfullName: GridProps.style\nsummary: |-\n  Represents the \n  `style`\n   HTML attribute.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.take (children)\nname: take\nfullName: GridProps.take\nsummary: |-\n  Alias for the \n  `pageSize`\n   property. If \n  `take`\n   is set, \n  `pageSize`\n   will be ignored.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.total (children)\nname: total\nfullName: GridProps.total\nsummary: >-\n  Defines the total number of data items in all pages. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n\n## API Reference Item\n- Name: GridProps.filter\n- Type: Property\n- Summary: The [descriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}) by which\r\nthe data is filtered ([more information and examples]({% slug filtering_grid %})). This affects\r\nthe values and buttons in the \n`FilterRow`\n of the Grid.\n- Syntax: \n\n- Return Type: name: CompositeFilterDescriptor\nfullName: CompositeFilterDescriptor\nsummary: >-\n  A complex filter expression. For more information, refer to the [filterBy]({%\n  slug api_kendo-data-query_filterby %}) method.\nsyntax: {}\npackageName: '@progress/kendo-data-query'\nmembers:\n  - filters\n  - logic\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridFilterChangeEvent } from '@progress/kendo-react-grid';\nimport { CompositeFilterDescriptor } from '@progress/kendo-data-query';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    const [filter, setFilter] = React.useState<CompositeFilterDescriptor>({\n        logic: 'and',\n        filters: []\n    });\n\n    const filterChange = (event: GridFilterChangeEvent) => {\n        setFilter(event.filter);\n    };\n\n    return (\n        <Grid\n            data={sampleData}\n            autoProcessData={true}\n            dataItemKey=\"id\"\n            filterable={true}\n            filter={filter}\n            onFilterChange={filterChange}\n        >\n            <GridColumn field=\"id\" title=\"Id\" filter=\"numeric\" />\n            <GridColumn field=\"name\" title=\"Name\" filter=\"text\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.sortable\n- Type: Property\n- Summary: Enables sorting for the columns with their \n`field`\n option set.\r\n([see example]({% slug sorting_grid %}))\n- Syntax: \n\n- Return Type: name: SortSettings\nfullName: SortSettings\nsummary: The settings for sorting the component data.\nsyntax:\n  return:\n    type: 'boolean | ColumnSortSettings | { mode?: \"single\" | \"multiple\" }'\npackageName: '@progress/kendo-react-data-tools'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\" sortable={true}>\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\nThe KendoReact Data Grid provides toolbar tools to enhance user interactions and streamline workflows. These tools allow you to perform actions like sorting, filtering, and managing columns directly from the toolbar.\n\nServer Templates\n\nLearn the art of customization by providing unique views to the Grid. Explore the creation of custom cells and rows templates to your application's specific needs.\n<a href=\"/kendo-react-ui-develop/components/grid/rsc-mode/templates\">Read more about React Data Grid RSC Mode templates...</a>\n\nSelection\n\nLearn how to implement row and cell selection in the Grid, allowing users to interact with data efficiently through multiple selection modes.\n<a href=\"/kendo-react-ui-develop/components/grid/rsc-mode/selection\">Read more about React Data Grid RSC Mode selection...</a>\n\nThe KendoReact Data Grid lets you build business applications that manage and display large sets of data efficiently. With it, you can structure and present your data in rows and columns, paired with a user-friendly interface for editing and analysis.\nThe built-in paging, sorting, and filtering enable you to meet your business requirements for data navigation and analysis. For more advanced data analysis, the React Grid component offers grouping and aggregation to categorize and summarize data.\nThe grid’s editing capabilities support in-cell and inline editing, allowing your end users to modify data directly within the data table. The options to export to PDF or Excel help with reporting and data sharing.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Drawer": "## API Reference Item\n- Name: DrawerProps.position\n- Type: Property\n- Summary: Specifies the position of the Drawer\r\n([see example]({% slug positioning_drawer %})).\r\n\r\nExample:\r\n\n```jsx\r\n<Drawer position=\"end\" />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { inboxIcon, calendarIcon, bellIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Inbox', svgIcon: inboxIcon, selected: true },\n    { separator: true },\n    { text: 'Notifications', svgIcon: bellIcon },\n    { text: 'Calendar', svgIcon: calendarIcon },\n    { separator: true }\n];\n\nconst App = () => {\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selectedId, setSelectedId] = React.useState<number>(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded((prevState) => !prevState);\n    };\n\n    const handleSelect = (ev: DrawerSelectEvent) => {\n        setSelectedId(ev.itemIndex);\n        setExpanded(false);\n    };\n\n    return (\n        <div>\n            <Drawer\n                expanded={expanded}\n                position={'end'}\n                mode={'push'}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selectedId\n                }))}\n                onSelect={handleSelect}\n            >\n                <DrawerContent>\n                    <div className=\"k-form\">\n                        <div className=\"k-form-field\">\n                            <Button onClick={handleClick}>Toggle the Drawer state</Button>\n                        </div>\n                    </div>\n                </DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Drawer\n- Type: Function\n- Summary: Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DrawerProps (children)\nname: DrawerProps\nfullName: DrawerProps\nsummary: >-\n  The properties of the [KendoReact Drawer component]({% slug overview_drawer\n  %}).\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - animation\n  - children\n  - className\n  - dir\n  - drawerClassName\n  - expanded\n  - item\n  - items\n  - mini\n  - miniWidth\n  - mode\n  - onOverlayClick\n  - onSelect\n  - position\n  - style\n  - tabIndex\n  - width\n\n---\n### Drawer.Drawer.props (children)\nname: props\nfullName: Drawer.Drawer.props\nsyntax:\n  return:\n    type: DrawerProps | RefAttributes\n\n\nPositioning\n\nThe Drawer enables you to specify its position in relation to the page content.\nTo specify the side of the content to which the Drawer will be displayed, use the <a href=\"/kendo-react-ui/components/layout/api/drawerprops#position\">position</a> property.\nThe Drawer provides the following options for positioning:\n\nstart—Positions the Drawer to the left of the content.\nend—Positions the Drawer to the right of the content.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n<a href=\"/kendo-react-ui-develop/components/layout/drawer/positioning\">Positioning</a>—Drawer enables you to specify its position relative to the page content.\n<a href=\"/kendo-react-ui-develop/components/layout/drawer/routing\">Routing</a>—You can use the Drawer as a container for navigational components with any router library.\n\nBuilt-in disabled mode and read-only mode via the disabled and readOnly properties\nNative implementation for form validation\nPredefined and custom date and time formats\nCustomization options for the inputs and popups of all Date Inputs components\n<a href=\"/kendo-react-ui/components/dateinputs/globalization\">Globalization</a>\nOut-of-the-box accessibility and keyboard navigation\n\nHow Do the KendoReact Date Inputs Work?\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Button": "## API Reference Item\n- Name: ButtonProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Button component]({% slug overview_button %}).\r\nExtends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).\n- Syntax: \n\n## Additional Context\n### ButtonProps.endIcon (children)\nname: endIcon\nfullName: ButtonProps.endIcon\nsummary: \"Sets an SVG icon or custom element after the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.fillMode (children)\nname: fillMode\nfullName: ButtonProps.fillMode\nsummary: |-\n  Configures the \n  `fillMode`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\" | \"link\" | \"clear\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.icon (children)\nname: icon\nfullName: ButtonProps.icon\nsummary: >-\n  Defines the name for an existing icon in a KendoReact theme ([see example]({%\n  slug icons_button %})). The icon renders inside the Button by a \n\n  `span.k-icon`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconClass (children)\nname: iconClass\nfullName: ButtonProps.iconClass\nsummary: >-\n  Defines a CSS class — or multiple classes separated by spaces — which apply to\n  a \n\n  `span`\n   element inside the Button ([see example]({% slug icons_button %})). Allows you to use custom icons.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconSize (children)\nname: iconSize\nfullName: ButtonProps.iconSize\nsummary: |-\n  Configures the \n  `size`\n   of the SVG icon that displays inside the Button.\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageAlt (children)\nname: imageAlt\nfullName: ButtonProps.imageAlt\nsummary: >-\n  Defines the alternative text of the image that renders inside the Button\n  component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageUrl (children)\nname: imageUrl\nfullName: ButtonProps.imageUrl\nsummary: |-\n  Defines a URL which is used as an \n  `img`\n   element inside the Button ([see example]({% slug icons_button %})). The URL can be relative or absolute. If relative, it evaluates in relation to the URL of the web page.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.rounded (children)\nname: rounded\nfullName: ButtonProps.rounded\nsummary: |-\n  Configures the \n  `roundness`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.selected (children)\nname: selected\nfullName: ButtonProps.selected\nsummary: Sets the selected state of the Button. You can use this for controlled mode.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.size (children)\nname: size\nfullName: ButtonProps.size\nsummary: |-\n  Configures the \n  `size`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.startIcon (children)\nname: startIcon\nfullName: ButtonProps.startIcon\nsummary: \"Sets an SVG icon or custom element before the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.svgIcon (children)\nname: svgIcon\nfullName: ButtonProps.svgIcon\nsummary: Defines the SVG icon that renders inside the Button component.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.themeColor (children)\nname: themeColor\nfullName: ButtonProps.themeColor\nsummary: |-\n  Configures the \n  `themeColor`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.title (children)\nname: title\nfullName: ButtonProps.title\nsummary: |-\n  Sets the \n  `title`\n   HTML attribute of the Button.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.unstyled (children)\nname: unstyled\nfullName: ButtonProps.unstyled\nsummary: The unstyled option classes.\nsyntax:\n  return:\n    type: ButtonsClassStructure\npackageName: '@progress/kendo-react-buttons'\n\n\n## API Reference Item\n- Name: ButtonProps.disabled\n- Type: Property\n- Summary: Specifies if the Button is disabled ([see example]({% slug disabled_button %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return (\n        <Button disabled={true}>\n            Disabled Button\n        </Button>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: ButtonProps.togglable\n- Type: Property\n- Summary: Provides visual styling that shows if the Button is selected ([see example]({% slug toggleable_button %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return (\n        <Button togglable={true}>\n            Toggle\n        </Button>\n    );\n}\n\nexport default App;\n\n```\n\n\nButton Events\n\nThe KendoReact Button generates a variety of events that you can handle. This allows you to tailor the Button's behavior to your specific requirements.\nThe following example demonstrates basic Button events.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nBuilt-in appearance options to adjust the form and dimensions of your buttons\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled mode</a>\n\nOut of the box, the Kendo React Button provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "RangeSlider": "## API Reference Item\n- Name: RangeSliderProps\n- Type: Interface\n- Summary: Represents the properties of [RangeSlider]({% slug api_inputs_rangeslider %}) component.\n- Syntax: \n\n## Additional Context\n### RangeSliderProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: RangeSliderProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: RangeSliderProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.children (children)\nname: children\nfullName: RangeSliderProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.className (children)\nname: className\nfullName: RangeSliderProps.className\nsummary: Sets additional classes to the RangeSlider.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.defaultValue (children)\nname: defaultValue\nfullName: RangeSliderProps.defaultValue\nsummary: |-\n  The default set values of type Range - \n  `start`\n   and \n  `end`\n  .\nsyntax:\n  return:\n    type: Range_2\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.dir (children)\nname: dir\nfullName: RangeSliderProps.dir\nsummary: |-\n  The RangeSlider direction \n  `ltr`\n   or \n  `rtl`\n  .\nsyntax:\n  return:\n    type: Direction\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.disabled (children)\nname: disabled\nfullName: RangeSliderProps.disabled\nsummary: Determines the disabled mode of the RangeSlider, if true - disabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.endTabIndex (children)\nname: endTabIndex\nfullName: RangeSliderProps.endTabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   attribute to the \n  `end`\n   drag handle.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.id (children)\nname: id\nfullName: RangeSliderProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the RangeSlider.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.largeStep (children)\nname: largeStep\nfullName: RangeSliderProps.largeStep\nsummary: >-\n  Specifies the step by which the RangeSlider's value will be increased or\n  decreased using \n\n  `pageUp`\n   or \n  `pageDown`\n   keyboard buttons. Defaults to \n  `10`\n\n  .\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.max (children)\nname: max\nfullName: RangeSliderProps.max\nsummary: The maximum possible value of the RangeSlider.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.min (children)\nname: min\nfullName: RangeSliderProps.min\nsummary: The minimum possible value of the RangeSlider.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.name (children)\nname: name\nfullName: RangeSliderProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### RangeSliderProps.onChange (children)\nname: onChange\nfullName: RangeSliderProps.onChange\nsummary: >-\n  Triggered after value change - gets outside access to the element, new values\n  and the event type.\nsyntax:\n  return:\n    type: '(event: RangeSliderChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.required (children)\nname: required\nfullName: RangeSliderProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RangeSliderProps.startTabIndex (children)\nname: startTabIndex\nfullName: RangeSliderProps.startTabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   attribute to the \n  `start`\n   drag handle.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.step (children)\nname: step\nfullName: RangeSliderProps.step\nsummary: >-\n  Specifies the step by which the RangeSlider's value will be increased or\n  decreased using the keyboard arrows. Defaults to \n\n  `1`\n\n  .\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.style (children)\nname: style\nfullName: RangeSliderProps.style\nsummary: Sets additional CSS styles to the RangeSlider.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.valid (children)\nname: valid\nfullName: RangeSliderProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RangeSliderProps.validationMessage (children)\nname: validationMessage\nfullName: RangeSliderProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### RangeSliderProps.validityStyles (children)\nname: validityStyles\nfullName: RangeSliderProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RangeSliderProps.value (children)\nname: value\nfullName: RangeSliderProps.value\nsummary: |-\n  The flexible values of type Range - \n  `start and `\n  end`.\nsyntax:\n  return:\n    type: Range_2\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RangeSliderProps.vertical (children)\nname: vertical\nfullName: RangeSliderProps.vertical\nsummary: The RangeSlider orientation if true - vertical, else - horizontal.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n\nControlled ModePremium\n\nBy default, the RangeSlider is in an uncontrolled state.\nTo manage the state of the RangeSlider:\n\nUse its <a href=\"/kendo-react-ui-develop/components/inputs/api/rangesliderprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/rangesliderprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nTicks\n\nThe RangeSlider component provides the option to display ticks that doesn't have labels. To achieve this scenario you need to use the <a href=\"/kendo-react-ui-develop/components/inputs/api/sliderlabel\">SliderLabel Component</a> component without defining content for it.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe KendoReact RangeSlider enables the user to increase, decrease, and select predefined values by dragging its handle along the track or by clicking the value on the scale or using the arrow keys.\nThe KendoReact RangeSlider component is part of the KendoReact library of React UI components. It is distributed through NPM under the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-inputs\" rel=\"noopener\" target=\"_blank\">kendo-react-inputs NPM package</a>.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Label": "## API Reference Item\n- Name: Label.Label(props:LabelProps)\n- Type: CallSignature\n- Summary: Represents the KendoReact Label component.\n- Syntax: \n\n- Return Type: name: Element\nfullName: Element\nsyntax: {}\npackageName: '@progress/kendo-drawing'\n\n\n## API Reference Item\n- Name: Label\n- Type: Function\n- Summary: Represents the KendoReact Label component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Label } from '@progress/kendo-react-labels';\n\nexport default function App() {\n    return (\n        <Label>Label</Label>\n    );\n}\n\n```\n\n\n## Additional Context\n### Label.Label.props (children)\nname: props\nfullName: Label.Label.props\nsyntax:\n  return:\n    type: LabelProps\n\n\n## API Reference Item\n- Name: LabelProps.style\n- Type: Property\n- Summary: The styles that are applied to the Label.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Label } from '@progress/kendo-react-labels';\nimport { Input, InputChangeEvent } from '@progress/kendo-react-inputs';\n\nconst App = () => {\n    const [value, setValue] = React.useState<string | undefined>(undefined);\n\n    const labelId = 'firstname-label';\n    const editorId = 'firstname-editor';\n\n    return (\n        <div>\n            <Label style={{ color: 'blue', fontWeight: 'bold' }} id={labelId} editorId={editorId}>\n                First Name:&nbsp;\n            </Label>\n            <Input\n                ariaLabelledBy={labelId}\n                value={value}\n                onChange={(e: InputChangeEvent) => setValue(e.value)}\n                id={editorId}\n            />\n        </div>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: LabelProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Label component.\n- Syntax: \n\n## Additional Context\n### LabelProps.children (children)\nname: children\nfullName: LabelProps.children\nsummary: \"The text that will be rendered inside the label element.\\r\\nCan be omitted for editors without label to keep form layout.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.className (children)\nname: className\nfullName: LabelProps.className\nsummary: Sets a class of the Label DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorDisabled (children)\nname: editorDisabled\nfullName: LabelProps.editorDisabled\nsummary: Specifies if the editor is disabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorId (children)\nname: editorId\nfullName: LabelProps.editorId\nsummary: \"The id of the editor.\\r\\nRepresent the [\\n`htmlFor`\\n](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) property, which will be set to the \\n`label`\\n element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorRef (children)\nname: editorRef\nfullName: LabelProps.editorRef\nsummary: \"An optional React ref to the editor.\\r\\nUsed to redirect the click event to the editor when it does not contain native form element.\\r\\nTo be able to work, the editor should have \\n`focus`\\n method or \\n`actionElement`\\n prop on it's ref.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorValid (children)\nname: editorValid\nfullName: LabelProps.editorValid\nsummary: Specifies the validity of the editor. Used to define the editor is invalid.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.optional (children)\nname: optional\nfullName: LabelProps.optional\nsummary: If enabled marks the label as optional.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n\n## API Reference Item\n- Name: LabelProps.id\n- Type: Property\n- Summary: Represents the id of the label element.\r\nThe value should be set to the editor \n`ariaLabelledBy`\n property.\r\nCan be used when the editor is not containing native form element.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Label } from '@progress/kendo-react-labels';\nimport { Input, InputChangeEvent } from '@progress/kendo-react-inputs';\n\nconst App = () => {\n    const [value, setValue] = React.useState<string | undefined>(undefined);\n\n    const labelId = 'firstname-label';\n    const editorId = 'firstname-editor';\n\n    return (\n        <div>\n            <Label id={labelId} editorId={editorId}>\n                First Name:&nbsp;\n            </Label>\n            <Input\n                ariaLabelledBy={labelId}\n                value={value}\n                onChange={(e: InputChangeEvent) => setValue(e.value)}\n                id={editorId}\n            />\n        </div>\n    );\n};\n\nexport default App;\n\n```\n\n\nThe following demo shows the components included in the KendoReact Labels package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... <a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled mode</a>\n\n\n<a href=\"/kendo-react-ui/components/labels/globalization\">Globalization</a>\n\nHow Do the KendoReact Labels Work?\n\nBuilt-in appearance options to adjust the color, form and dimensions of your indicators\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled mode</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Menu": "## API Reference Item\n- Name: MenuItemProps.svgIcon\n- Type: Property\n- Summary: Specifies the SVG icon that will be rendered for the item ([see example]({% slug itemproperties_menu %}#toc-icon)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Menu } from '@progress/kendo-react-layout';\nimport { heartIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    const items = [\n        {\n            text: 'Home',\n            svgIcon: heartIcon\n        }\n    ];\n    return <Menu items={items} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: MenuClassComponent.setFocusedItemId\n- Type: Property\n- Summary: \n- Syntax: \n\n## API Reference Item\n- Name: MenuClassComponent.onKeyDown\n- Type: Property\n- Summary: \n- Syntax: \n\n## API Reference Item\n- Name: MenuProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Additional Context\n### MenuProps.animate (children)\nname: animate\nfullName: MenuProps.animate\nsummary: Controls the Popup animation.\nsyntax:\n  return:\n    type: boolean | PopupAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.children (children)\nname: children\nfullName: MenuProps.children\nsummary: Sets the Menu items declaratively.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.className (children)\nname: className\nfullName: MenuProps.className\nsummary: Adds a custom className to the Menu top element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.customCloseItemIds (children)\nname: customCloseItemIds\nfullName: MenuProps.customCloseItemIds\nsummary: \"Sets the ids of the Menu items that will not be closed on mouse-leave. The ids are hierarchical and zero-based.\\r\\nThe first root item has a \\n`0`\\n id. If the first root item has children,\\r\\nthe first child item acquires a \\n`0_0`\\n id and the second acquires a \\n`0_1`\\n id.\"\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.dir (children)\nname: dir\nfullName: MenuProps.dir\nsummary: Sets the direction of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverCloseDelay (children)\nname: hoverCloseDelay\nfullName: MenuProps.hoverCloseDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on item mouse-leave\\r\\n([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverOpenDelay (children)\nname: hoverOpenDelay\nfullName: MenuProps.hoverOpenDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on\\r\\nitem mouse-leave ([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\\r\\nUsed to avoid accidental closure on leaving.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.id (children)\nname: id\nfullName: MenuProps.id\nsummary: Sets the ID of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.itemRender (children)\nname: itemRender\nfullName: MenuProps.itemRender\nsummary: \"A React functional or class component which is used for rendering the innermost part of\\r\\nthe Menu item ([see example]({% slug rendering_menu %}#toc-items)).\\r\\nBy default, the innermost item part includes only the text for the item.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.items (children)\nname: items\nfullName: MenuProps.items\nsummary: Sets the Menu items.\nsyntax:\n  return:\n    type: Array<MenuItemModel>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.linkRender (children)\nname: linkRender\nfullName: MenuProps.linkRender\nsummary: \"A React functional or class component which is used for rendering the link of the item\\r\\n([see example]({% slug rendering_menu %}#toc-links)).\\r\\nThe item link is a part of the visual representation of the item which, by default, includes an arrow, icon, and text.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.onSelect (children)\nname: onSelect\nfullName: MenuProps.onSelect\nsummary: Fires when a Menu item is selected.\nsyntax:\n  return:\n    type: '(event: MenuSelectEvent) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.openOnClick (children)\nname: openOnClick\nfullName: MenuProps.openOnClick\nsummary: |-\n  If \n  `openOnClick`\n   is set to \n  `true`\n  , the items are opened on mouse hover only after an initial click.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.style (children)\nname: style\nfullName: MenuProps.style\nsummary: Sets additional CSS styles to the Menu.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.vertical (children)\nname: vertical\nfullName: MenuProps.vertical\nsummary: \"Specifies whether the Menu will be vertical\\r\\n([see example]({% slug vertical_menu %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { MenuClassComponent, MenuItem } from '@progress/kendo-react-layout';\n\nconst App = () => (\n    <MenuClassComponent>\n        <MenuItem text=\"Item 1\" />\n        <MenuItem text=\"Item 2\" />\n    </MenuClassComponent>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### MenuClassComponent.constructor (children)\nname: constructor\nfullName: MenuClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.checkIsDirectionRightToLeft (children)\nname: checkIsDirectionRightToLeft\nfullName: MenuClassComponent.checkIsDirectionRightToLeft\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable (children)\nname: clearItemHoverAndLeaveRequestsIfApplicable\nfullName: MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.directionHolder (children)\nname: directionHolder\nfullName: MenuClassComponent.directionHolder\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.dispatchSelectEventIfWired (children)\nname: dispatchSelectEventIfWired\nfullName: MenuClassComponent.dispatchSelectEventIfWired\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getInputItem (children)\nname: getInputItem\nfullName: MenuClassComponent.getInputItem\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getMenuClassName (children)\nname: getMenuClassName\nfullName: MenuClassComponent.getMenuClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.inputItems (children)\nname: inputItems\nfullName: MenuClassComponent.inputItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.isItemWithDefaultClose (children)\nname: isItemWithDefaultClose\nfullName: MenuClassComponent.isItemWithDefaultClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemHoverRequest (children)\nname: itemHoverRequest\nfullName: MenuClassComponent.itemHoverRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemLeaveRequest (children)\nname: itemLeaveRequest\nfullName: MenuClassComponent.itemLeaveRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.items (children)\nname: items\nfullName: MenuClassComponent.items\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuWrapperEl (children)\nname: menuWrapperEl\nfullName: MenuClassComponent.menuWrapperEl\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.mouseOverHandler (children)\nname: mouseOverHandler\nfullName: MenuClassComponent.mouseOverHandler\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemBlur (children)\nname: onItemBlur\nfullName: MenuClassComponent.onItemBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemClick (children)\nname: onItemClick\nfullName: MenuClassComponent.onItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemFocus (children)\nname: onItemFocus\nfullName: MenuClassComponent.onItemFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseDown (children)\nname: onItemMouseDown\nfullName: MenuClassComponent.onItemMouseDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseLeave (children)\nname: onItemMouseLeave\nfullName: MenuClassComponent.onItemMouseLeave\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseOver (children)\nname: onItemMouseOver\nfullName: MenuClassComponent.onItemMouseOver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.prepareItems (children)\nname: prepareItems\nfullName: MenuClassComponent.prepareItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.reset (children)\nname: reset\nfullName: MenuClassComponent.reset\nsummary: Resets the selection and opening of Menu items.\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setHoveredItemId (children)\nname: setHoveredItemId\nfullName: MenuClassComponent.setHoveredItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.animate (children)\nname: animate\nfullName: MenuClassComponent.animate\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.element (children)\nname: element\nfullName: MenuClassComponent.element\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuItemId (children)\nname: menuItemId\nfullName: MenuClassComponent.menuItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\nKeyboard Navigation\n\nFor more details about the Menu component's keyboard navigation, refer to the article on <a href=\"/kendo-react-ui-develop/components/layout/menu/keyboard-navigation\">keyboard navigation in the Menu component</a>.\n\nContext Menu\n\nThe Context Menu is a Menu that is initialized inside a <a href=\"/kendo-react-ui-develop/components/popup\">Popup</a> component and it is opened on the onContextMenu event.\n\nBasic Usage\n\nThe following example demonstrates the Context Menu in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nKendoReact Keyboard Navigation Overview\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Toolbar": "## API Reference Item\n- Name: Toolbar\n- Type: Function\n- Summary: Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Toolbar>\n            <span>Toolbar content</span>\n        </Toolbar>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Toolbar.Toolbar.props (children)\nname: props\nfullName: Toolbar.Toolbar.props\nsyntax:\n  return:\n    type: ToolbarProps | RefAttributes\n\n\n## API Reference Item\n- Name: ToolbarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Additional Context\n### ToolbarProps.ariaLabel (children)\nname: ariaLabel\nfullName: ToolbarProps.ariaLabel\nsummary: |-\n  Represents the \n  `aria-label`\n   HTML attribute of the Toolbar component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.buttonScrollSpeed (children)\nname: buttonScrollSpeed\nfullName: ToolbarProps.buttonScrollSpeed\nsummary: \"Sets the Toolbar scroll speed in pixels when scrolling via clicking the previous or next button.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.children (children)\nname: children\nfullName: ToolbarProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.className (children)\nname: className\nfullName: ToolbarProps.className\nsummary: Sets additional classes to the Toolbar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.dir (children)\nname: dir\nfullName: ToolbarProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.fillMode (children)\nname: fillMode\nfullName: ToolbarProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n— \\n`solid`\\n — Applies a \\n`background`\\n color and \\n`solid borders`\\n.\\r\\n— \\n`flat`\\n — Sets a \\n`transparent background`\\n and \\n`solid bottom border`\\n.\\r\\n— \\n`outline`\\n — Sets a \\n`transparent background`\\n and \\n`solid borders`\\n.\\r\\n— \\n`null`\\n — This option removes the built-in fill mode styles of the Toolbar. Allows for custom \\n`background`\\n and \\n`border`\\n styles.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.id (children)\nname: id\nfullName: ToolbarProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.keyboardNavigation (children)\nname: keyboardNavigation\nfullName: ToolbarProps.keyboardNavigation\nsummary: |-\n  If set to \n  `false`\n  , it will turn off the built-in keyboard navigation.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.nextButton (children)\nname: nextButton\nfullName: ToolbarProps.nextButton\nsummary: \"Defines the custom component that will be rendered as a next button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.onResize (children)\nname: onResize\nfullName: ToolbarProps.onResize\nsummary: |-\n  The \n  `resize`\n   event of the Toolbar.\nsyntax:\n  return:\n    type: '(event: ToolbarResizeEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.overflow (children)\nname: overflow\nfullName: ToolbarProps.overflow\nsummary: \"Represents the possible overflow mode options of the Toolbar.\\r\\nApplicable when there is not enough space to render all tools.\"\nsyntax:\n  return:\n    type: '\"none\" | \"section\" | \"scroll\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.prevButton (children)\nname: prevButton\nfullName: ToolbarProps.prevButton\nsummary: \"Defines the custom component that will be rendered as a previous button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtons (children)\nname: scrollButtons\nfullName: ToolbarProps.scrollButtons\nsummary: \"Determines the Toolbar scroll buttons visibility.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"auto\" | \"hidden\" | \"visible\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtonsPosition (children)\nname: scrollButtonsPosition\nfullName: ToolbarProps.scrollButtonsPosition\nsummary: \"Determines the Toolbar scroll buttons position.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\" | \"split\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.size (children)\nname: size\nfullName: ToolbarProps.size\nsummary: \"Configures the \\n`size`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n— \\n`small`\\n — Sets the padding of the component to 4px 4px.\\r\\n— \\n`medium`\\n — Sets the padding of the component to 8px 8px.\\r\\n— \\n`large`\\n — Sets the padding of the component to 10px 10px.\\r\\n— \\n`null`\\n — This option removes the the built-in size styles of the Toolbar. Allows for custom \\n`padding`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.style (children)\nname: style\nfullName: ToolbarProps.style\nsummary: The styles that are applied to the Toolbar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.tabIndex (children)\nname: tabIndex\nfullName: ToolbarProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the Toolbar.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n\nThe KendoReact Toolbar allows you to render Button, ButtonGroup, DropDownButton, SplitButton and custom button components in it.\n\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/tools\">Tools</a>—You can include various button types in the Toolbar and create a handy selection of tools.\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/adaptive-rendering\">Adaptive Rendering</a>—The ToolBar provides options to hide the tools that do not fit its width in an overflow section or rendering scroll arrows. This   is   a  Free React  ToolbarThe KendoReact  Toolbar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Toolbar in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "StackLayout": "## API Reference Item\n- Name: StackLayoutProps.align\n- Type: Property\n- Summary: Specifies the horizontal and vertical alignment of the inner StackLayout elements.\r\nDemo ([here]({% slug layout_stacklayout %}#toc-horizontal-alignment)) and ([here]({% slug layout_stacklayout %}#toc-vertical-alignment)).\r\n\r\nThe possible keys are:\r\n* \n`horizontal`\n&mdash;Defines the possible horizontal alignment of the inner StackLayout elements.\r\n  * \n`start`\n&mdash;Uses the start point of the container.\r\n  * \n`center`\n&mdash;Uses the central point of the container.\r\n  * \n`end`\n&mdash;Uses the end point of the container.\r\n  * (Default)\n`stretch`\n&mdash;Stretches the items to fill the width of the container.\r\n* \n`vertical`\n&mdash;Defines the possible vertical alignment of the inner StackLayout elements.\r\n  * \n`top`\n&mdash;Uses the top point of the container.\r\n  * \n`middle`\n&mdash;Uses the middle point of the container.\r\n  * \n`bottom`\n&mdash;Uses the bottom point of the container.\r\n  * (Default)\n`stretch`\n&mdash;Stretches the items to fill the height of the container.\n- Syntax: \n\n- Return Type: name: StackLayoutAlign\nfullName: StackLayoutAlign\nsummary: >-\n  Specifies the horizontal and vertical alignment of the inner StackLayout\n  elements.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - horizontal\n  - vertical\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout, StackLayoutAlign } from '@progress/kendo-react-layout';\n\nconst align: StackLayoutAlign = { horizontal: 'center', vertical: 'middle' };\n\nfunction App() {\n    return (\n        <StackLayout style={{ backgroundColor: 'lightgray', height: '500px' }} align={align} gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: StackLayout\n- Type: Function\n- Summary: Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\r\nArranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={100}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StackLayout.StackLayout.props (children)\nname: props\nfullName: StackLayout.StackLayout.props\nsyntax:\n  return:\n    type: StackLayoutProps | RefAttributes\n\n\n## API Reference Item\n- Name: StackLayoutProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\n- Syntax: \n\n## Additional Context\n### StackLayoutProps.children (children)\nname: children\nfullName: StackLayoutProps.children\nsummary: The React elements that will be rendered inside the StackLayout.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.id (children)\nname: id\nfullName: StackLayoutProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root StackLayout element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.orientation (children)\nname: orientation\nfullName: StackLayoutProps.orientation\nsummary: \"Specifies the StackLayout orientation.\\r\\n([see example]({% slug layout_stacklayout %}#toc-orientation)).\\r\\n\\r\\nThe possible values are:\\r\\n* (Default)\\n`horizontal`\\n\\r\\n* \\n`vertical`\"\nsyntax:\n  return:\n    type: StackLayoutOrientation\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.style (children)\nname: style\nfullName: StackLayoutProps.style\nsummary: Sets additional CSS styles to the StackLayout.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: StackLayoutProps.className\n- Type: Property\n- Summary: Sets additional CSS classes to the StackLayout.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout className=\"custom-stacklayout-class\" gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: StackLayoutProps.gap\n- Type: Property\n- Summary: Specifies the gap between the inner elements ([see example]({% slug layout_stacklayout %}#toc-gaps)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\nLayout\n\nThe StackLayout component provides options for controlling its appearance.\nTo customize the layout of the StackLayout, use any of the following configuration options:\n\nOrientation\nGaps\nHorizontal alignment\nVertical alignment\nNested StackLayouts\n\nOrientation\n\nTo set the StackLayout orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#orientation\">orientation</a> property.\nBy default, orientation is set to horizontal.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGaps\n\nThe KendoReact StackLayout component allows you to easily align vertically or horizontally multiple elements in a stack.\nIt delivers different orientations, alignments, spacings and other handy options.\nThis   is   a  Free React  StackLayoutThe KendoReact  StackLayout   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library. <a href=\"/kendo-react-ui-develop/components/layout/stacklayout/layout#orientation\">Orientation</a>—The orientation configuration option allows you to choose between the vertical and horizontal positioning.\n<a href=\"/kendo-react-ui-develop/components/layout/stacklayout/layout#gaps\">Gaps</a>—The Gap property allows you to set gaps between the boxes.\n<a href=\"/kendo-react-ui-develop/components/layout/stacklayout/layout#horizontal-alignment\">Horizontal alignment</a>—You can align the StackLayout horizontally.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "TextArea": "## API Reference Item\n- Name: TextArea\n- Type: Function\n- Summary: Represents the [KendoReact TextArea component]({% slug overview_textarea %}).\r\n\r\n\r\nAccepts properties of type [TextAreaProps]({% slug api_inputs_textareaprops %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextArea } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <TextArea />\n    );\n}\n\n```\n\n\n## Additional Context\n### TextAreaProps (children)\nname: TextAreaProps\nfullName: TextAreaProps\nsummary: >-\n  Represents the props of the [KendoReact TextArea component]({% slug\n  overview_textarea %}).\nsyntax: {}\npackageName: '@progress/kendo-react-inputs'\nmembers:\n  - about\n  - accessKey\n  - aria-activedescendant\n  - aria-atomic\n  - aria-autocomplete\n  - aria-braillelabel\n  - aria-brailleroledescription\n  - aria-busy\n  - aria-checked\n  - aria-colcount\n  - aria-colindex\n  - aria-colindextext\n  - aria-colspan\n  - aria-controls\n  - aria-current\n  - aria-describedby\n  - aria-description\n  - aria-details\n  - aria-disabled\n  - aria-dropeffect\n  - aria-errormessage\n  - aria-expanded\n  - aria-flowto\n  - aria-grabbed\n  - aria-haspopup\n  - aria-hidden\n  - aria-invalid\n  - aria-keyshortcuts\n  - aria-label\n  - aria-labelledby\n  - aria-level\n  - aria-live\n  - aria-modal\n  - aria-multiline\n  - aria-multiselectable\n  - aria-orientation\n  - aria-owns\n  - aria-placeholder\n  - aria-posinset\n  - aria-pressed\n  - aria-readonly\n  - aria-relevant\n  - aria-required\n  - aria-roledescription\n  - aria-rowcount\n  - aria-rowindex\n  - aria-rowindextext\n  - aria-rowspan\n  - aria-selected\n  - aria-setsize\n  - aria-sort\n  - aria-valuemax\n  - aria-valuemin\n  - aria-valuenow\n  - aria-valuetext\n  - ariaDescribedBy\n  - ariaLabelledBy\n  - autoCapitalize\n  - autoComplete\n  - autoCorrect\n  - autoFocus\n  - autoSave\n  - autoSize\n  - children\n  - className\n  - color\n  - cols\n  - content\n  - contentEditable\n  - contextMenu\n  - dangerouslySetInnerHTML\n  - datatype\n  - defaultChecked\n  - defaultValue\n  - dir\n  - dirName\n  - disabled\n  - draggable\n  - enterKeyHint\n  - exportparts\n  - fillMode\n  - form\n  - hidden\n  - id\n  - inert\n  - inlist\n  - inputAttributes\n  - inputMode\n  - is\n  - itemID\n  - itemProp\n  - itemRef\n  - itemScope\n  - itemType\n  - lang\n  - maxLength\n  - minLength\n  - name\n  - nonce\n  - onAbort\n  - onAbortCapture\n  - onAnimationEnd\n  - onAnimationEndCapture\n  - onAnimationIteration\n  - onAnimationIterationCapture\n  - onAnimationStart\n  - onAnimationStartCapture\n  - onAuxClick\n  - onAuxClickCapture\n  - onBeforeInput\n  - onBeforeInputCapture\n  - onBeforeToggle\n  - onBlur\n  - onBlurCapture\n  - onCanPlay\n  - onCanPlayCapture\n  - onCanPlayThrough\n  - onCanPlayThroughCapture\n  - onChange\n  - onChangeCapture\n  - onClick\n  - onClickCapture\n  - onCompositionEnd\n  - onCompositionEndCapture\n  - onCompositionStart\n  - onCompositionStartCapture\n  - onCompositionUpdate\n  - onCompositionUpdateCapture\n  - onContextMenu\n  - onContextMenuCapture\n  - onCopy\n  - onCopyCapture\n  - onCut\n  - onCutCapture\n  - onDoubleClick\n  - onDoubleClickCapture\n  - onDrag\n  - onDragCapture\n  - onDragEnd\n  - onDragEndCapture\n  - onDragEnter\n  - onDragEnterCapture\n  - onDragExit\n  - onDragExitCapture\n  - onDragLeave\n  - onDragLeaveCapture\n  - onDragOver\n  - onDragOverCapture\n  - onDragStart\n  - onDragStartCapture\n  - onDrop\n  - onDropCapture\n  - onDurationChange\n  - onDurationChangeCapture\n  - onEmptied\n  - onEmptiedCapture\n  - onEncrypted\n  - onEncryptedCapture\n  - onEnded\n  - onEndedCapture\n  - onError\n  - onErrorCapture\n  - onFocus\n  - onFocusCapture\n  - onGotPointerCapture\n  - onGotPointerCaptureCapture\n  - onInput\n  - onInputCapture\n  - onInvalid\n  - onInvalidCapture\n  - onKeyDown\n  - onKeyDownCapture\n  - onKeyPress\n  - onKeyPressCapture\n  - onKeyUp\n  - onKeyUpCapture\n  - onLoad\n  - onLoadCapture\n  - onLoadStart\n  - onLoadStartCapture\n  - onLoadedData\n  - onLoadedDataCapture\n  - onLoadedMetadata\n  - onLoadedMetadataCapture\n  - onLostPointerCapture\n  - onLostPointerCaptureCapture\n  - onMouseDown\n  - onMouseDownCapture\n  - onMouseEnter\n  - onMouseLeave\n  - onMouseMove\n  - onMouseMoveCapture\n  - onMouseOut\n  - onMouseOutCapture\n  - onMouseOver\n  - onMouseOverCapture\n  - onMouseUp\n  - onMouseUpCapture\n  - onPaste\n  - onPasteCapture\n  - onPause\n  - onPauseCapture\n  - onPlay\n  - onPlayCapture\n  - onPlaying\n  - onPlayingCapture\n  - onPointerCancel\n  - onPointerCancelCapture\n  - onPointerDown\n  - onPointerDownCapture\n  - onPointerEnter\n  - onPointerLeave\n  - onPointerMove\n  - onPointerMoveCapture\n  - onPointerOut\n  - onPointerOutCapture\n  - onPointerOver\n  - onPointerOverCapture\n  - onPointerUp\n  - onPointerUpCapture\n  - onProgress\n  - onProgressCapture\n  - onRateChange\n  - onRateChangeCapture\n  - onReset\n  - onResetCapture\n  - onScroll\n  - onScrollCapture\n  - onScrollEnd\n  - onScrollEndCapture\n  - onSeeked\n  - onSeekedCapture\n  - onSeeking\n  - onSeekingCapture\n  - onSelect\n  - onSelectCapture\n  - onStalled\n  - onStalledCapture\n  - onSubmit\n  - onSubmitCapture\n  - onSuspend\n  - onSuspendCapture\n  - onTimeUpdate\n  - onTimeUpdateCapture\n  - onToggle\n  - onTouchCancel\n  - onTouchCancelCapture\n  - onTouchEnd\n  - onTouchEndCapture\n  - onTouchMove\n  - onTouchMoveCapture\n  - onTouchStart\n  - onTouchStartCapture\n  - onTransitionCancel\n  - onTransitionCancelCapture\n  - onTransitionEnd\n  - onTransitionEndCapture\n  - onTransitionRun\n  - onTransitionRunCapture\n  - onTransitionStart\n  - onTransitionStartCapture\n  - onVolumeChange\n  - onVolumeChangeCapture\n  - onWaiting\n  - onWaitingCapture\n  - onWheel\n  - onWheelCapture\n  - part\n  - placeholder\n  - popover\n  - popoverTarget\n  - popoverTargetAction\n  - prefix\n  - property\n  - radioGroup\n  - readOnly\n  - rel\n  - required\n  - resizable\n  - resource\n  - results\n  - rev\n  - role\n  - rounded\n  - rows\n  - security\n  - size\n  - slot\n  - spellCheck\n  - style\n  - suffix\n  - suppressContentEditableWarning\n  - suppressHydrationWarning\n  - tabIndex\n  - title\n  - translate\n  - typeof\n  - unselectable\n  - valid\n  - validationMessage\n  - validityStyles\n  - value\n  - vocab\n  - wrap\n\n---\n### TextArea.TextArea.props (children)\nname: props\nfullName: TextArea.TextArea.props\nsyntax:\n  return:\n    type: TextAreaProps | RefAttributes\n\n\nThe KendoReact TextArea component offers a highly customizable interface for the user to submit value on multiple lines.\nIts features cover everything from setting a default value and character counter to form validation.\nThis   is   a  Free React  TextAreaThe KendoReact  TextArea   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library. You can resize the TextArea.\nYou can use the character counter to count and limit the input characters.\nYou can use the TextArea with form validation. <a href=\"/kendo-react-ui-develop/components/inputs/textarea/default_state\">Default state</a>—The TextArea allows you to set its default value.\n<a href=\"/kendo-react-ui-develop/components/inputs/textarea/sizing\">Sizing</a>—You can configure the auto size option and the initial height of the TextArea.\n<a href=\"/kendo-react-ui-develop/components/inputs/textarea/counter\">Characters Counter</a>—The TextArea component is easily customizable and allows you to integrate it with a character counter.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Chart": "## API Reference Item\n- Name: ChartSeriesDefaultsProps.stack\n- Type: Property\n- Summary: A Boolean value which indicates if the series has to be stacked. The stack option is supported when [\n`series.type`\n]({% slug api_charts_chartseriesitemprops %}#toc-type) is set to \n`\"bar\"`\n, \n`\"column\"`\n, \n`\"line\"`\n, \n`\"area\"`\n, \n`\"verticalLine\"`\n, \n`\"verticalArea\"`\n, \n`\"radarLine\"`\n, \n`\"radarArea\"`\n, and \n`\"radarColumn\"`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport {\n    Chart,\n    ChartSeries,\n    ChartSeriesItem,\n    ChartCategoryAxis,\n    ChartCategoryAxisItem,\n    ChartSeriesDefaults\n} from '@progress/kendo-react-charts';\n\nconst series = [2, 4, 6, 2];\nconst series2 = [3, 1, 8, 3];\n\nconst categories = [1, 2, 3, 4];\nconst App = () => (\n    <Chart>\n        <ChartCategoryAxis>\n            <ChartCategoryAxisItem categories={categories} />\n        </ChartCategoryAxis>\n        <ChartSeriesDefaults stack={true} />\n        <ChartSeries>\n            <ChartSeriesItem data={series} name=\"Series 1\" />\n            <ChartSeriesItem data={series2} name=\"Series 2\" />\n        </ChartSeries>\n    </Chart>\n);\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: ChartLegend\n- Type: Function\n- Summary: Represents the KendoReact ChartLegend component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport {\n    Chart,\n    ChartSeries,\n    ChartSeriesItem,\n    ChartCategoryAxis,\n    ChartCategoryAxisItem,\n    ChartLegend\n} from '@progress/kendo-react-charts';\n\nconst series = [2, 4, 6, 2];\nconst categories = ['Q1', 'Q2', 'Q3', 'Q4'];\nconst App = () => (\n    <Chart>\n        <ChartCategoryAxis>\n            <ChartCategoryAxisItem categories={categories} />\n        </ChartCategoryAxis>\n        <ChartSeries>\n            <ChartSeriesItem type=\"line\" data={series} name=\"Series 1\" />\n        </ChartSeries>\n        <ChartLegend />\n    </Chart>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ChartLegend.ChartLegend.props (children)\nname: props\nfullName: ChartLegend.ChartLegend.props\nsyntax:\n  return:\n    type: ChartLegendProps\n\n\n## API Reference Item\n- Name: ChartAreaProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact ChartArea component ([see example]({% slug chartarea_chart_charts %})).\n- Syntax: \n\n## Additional Context\n### ChartAreaProps.background (children)\nname: background\nfullName: ChartAreaProps.background\nsummary: >-\n  The background color of the Chart area. Accepts a valid CSS color string,\n  including hex and rgb.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-charts'\n\n---\n### ChartAreaProps.border (children)\nname: border\nfullName: ChartAreaProps.border\nsummary: The border of the Chart area.\nsyntax:\n  return:\n    type: Border\npackageName: '@progress/kendo-react-charts'\n\n---\n### ChartAreaProps.height (children)\nname: height\nfullName: ChartAreaProps.height\nsummary: The height of the Chart area.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-charts'\n\n---\n### ChartAreaProps.margin (children)\nname: margin\nfullName: ChartAreaProps.margin\nsummary: The margin of the Chart area. A numeric value sets all margins.\nsyntax:\n  return:\n    type: number | Margin\npackageName: '@progress/kendo-react-charts'\n\n---\n### ChartAreaProps.opacity (children)\nname: opacity\nfullName: ChartAreaProps.opacity\nsummary: >-\n  The background opacity of the Chart area. By default, the background is\n  opaque.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-charts'\n\n---\n### ChartAreaProps.width (children)\nname: width\nfullName: ChartAreaProps.width\nsummary: The width of the Chart area.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-charts'\n\n\nStacked Area charts are suitable for indicating the proportion of individual values to the total. To select this series sub-type, set the <a href=\"/kendo-react-ui-develop/components/charts/api/chartseriesitemprops\">stack</a> property of the first series item to true. The setting of the stack property is applied to all series and you do not have to set the rest of the series explicitly.\nThe following example demonstrates how to stack the red and green series on top of each other. The blue series contains positive and zero values as well as a negative one. In all cases, the plotted value is the sum of all values up to the current series. 100% Stacked Area Charts\n\n100% Stacked Area charts are suitable for indicating the proportion of individual values as a percentage of the total. To select this series sub-type, set the <a href=\"/kendo-react-ui-develop/components/charts/api/chartseriesitemprops\">stack</a> property of the first series item to a { type: '100%' } object. The setting of the stack property is applied to all series and you do not have to set the rest of the series explicitly.\n\nWhile it is possible to plot negative values in a 100% stacked chart, the results are hard for the user to interpret.\n\nThe Legend Item types and settings are derived from the series configuration. For additional configuration, use the series <a href=\"/kendo-react-ui-develop/components/charts/api/chartseriesitemprops#legenditem\">legendItem</a>\nproperty.\nThe following example shows the different Legend Item types:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nClicking Legend Items\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ListView": "## API Reference Item\n- Name: ListViewProps.item\n- Type: Property\n- Summary: Defines the component that renders for each item of the data collection.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ListView, ListViewItemProps, ListViewItemWrapper } from '@progress/kendo-react-listview';\n\nconst products = ['Chai', 'Chang', 'Aniseed Syrup'].map((p) => {\n    return {\n        ProductName: p,\n        Discontinued: false\n    };\n});\n\nconst MyItemRender = (props: ListViewItemProps) => {\n    const item = props.dataItem;\n\n    return (\n        <ListViewItemWrapper style={{ padding: 10, borderBottom: '1px solid lightgrey' }}>\n            {item.ProductName}\n        </ListViewItemWrapper>\n    );\n};\n\nconst App = () => {\n    return (\n        <div>\n            <ListView data={products} item={MyItemRender} />\n        </div>\n    );\n};\n\nexport default App;\n\n```\n\n\nThe KendoReact ListView enables you to display a custom layout of data items.\nThe ListView is ideally suited for displaying a list of items in a consistent manner. You can see commonplace examples of its use in the design structures of the Internet, search engine results, tweets from Twitter, Facebook updates, inbox items in Gmail, card lists in Instagram, and so on. Paging\n\nThe ListView enables you to split its content into pages by adding a pager and by using its extensive set of configuration options, such as implementing a responsive behavior, customizing its appearance, and more. <a href=\"/kendo-react-ui-develop/components/listview/paging\">Read more about the pager options of the ListView...</a>\n\nEditing\n\nDepending on your user requirements, you can edit, add, or delete the ListView items using templates. <a href=\"/kendo-react-ui-develop/components/listview/editing\">Read more about the editing feature of the ListView...</a>\n\nThe  ListView   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\"\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Form": "## API Reference Item\n- Name: FormClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Form component]({% slug overview_form %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FieldRenderProps,\n    FormRenderProps,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### FormClassComponent._fields (children)\nname: _fields\nfullName: FormClassComponent._fields\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._key (children)\nname: _key\nfullName: FormClassComponent._key\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._modified (children)\nname: _modified\nfullName: FormClassComponent._modified\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._submitted (children)\nname: _submitted\nfullName: FormClassComponent._submitted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._touched (children)\nname: _touched\nfullName: FormClassComponent._touched\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._unmounted (children)\nname: _unmounted\nfullName: FormClassComponent._unmounted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._validatorsByField (children)\nname: _validatorsByField\nfullName: FormClassComponent._validatorsByField\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._values (children)\nname: _values\nfullName: FormClassComponent._values\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._visited (children)\nname: _visited\nfullName: FormClassComponent._visited\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.licenseMessage (children)\nname: licenseMessage\nfullName: FormClassComponent.licenseMessage\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onChange (children)\nname: onChange\nfullName: FormClassComponent.onChange\nsummary: \"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"\nsyntax:\n  return:\n    type: '(name: string, options: Object) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onReset (children)\nname: onReset\nfullName: FormClassComponent.onReset\nsummary: \"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.showLicenseWatermark (children)\nname: showLicenseWatermark\nfullName: FormClassComponent.showLicenseWatermark\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n\n## API Reference Item\n- Name: FormProps\n- Type: Interface\n- Summary: Contains the props for the KendoReact Form component.\n- Syntax: \n\n## Additional Context\n### FormProps.ignoreModified (children)\nname: ignoreModified\nfullName: FormProps.ignoreModified\nsummary: Allows the form to submit even when no fields have been modified.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.initialValues (children)\nname: initialValues\nfullName: FormProps.initialValues\nsummary: \"Sets the starting values for form fields.\\r\\n\\r\\nSet initial values to prevent errors when switching from uncontrolled to controlled mode.\"\nsyntax:\n  return:\n    type: '{ [key: string]: any }'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.onSubmit (children)\nname: onSubmit\nfullName: FormProps.onSubmit\nsummary: \"Handles form submission when validation passes and fields are modified.\\r\\n\\r\\nFires when at least one field is modified, the user clicks Submit, and validation passes.\"\nsyntax:\n  return:\n    type: '(values: Object, event?: SyntheticEvent<any, Event>) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.onSubmitClick (children)\nname: onSubmitClick\nfullName: FormProps.onSubmitClick\nsummary: \"Handles every submit button click, even when the form is invalid or unchanged.\\r\\n\\r\\nUse this for advanced scenarios where you need to handle all submit events.\"\nsyntax:\n  return:\n    type: '(event: FormSubmitClickEvent) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.render (children)\nname: render\nfullName: FormProps.render\nsummary: Renders the form content using the provided render function.\nsyntax:\n  return:\n    type: '(props: FormRenderProps) => any'\npackageName: '@progress/kendo-react-form'\n\n\n## API Reference Item\n- Name: FormProps.validator\n- Type: Property\n- Summary: Validates the entire form and returns error messages.\r\n\r\nReturn a key-value pair where the key is the field path and the value is the error message.\r\nYou can validate nested fields like 'users[0].name'.\r\nOnly synchronous functions are supported.\n- Syntax: \n\n- Return Type: name: FormValidatorType\nfullName: FormValidatorType\nsummary: \"Validates an entire form and returns error messages.\\r\\n\\r\\n* values - Contains the current values from all form fields\\r\\n* valueGetter - Gets field values using field paths like 'user.name'\\r\\n\\r\\nReturns a key-value pair where the key is the field path and the value is the error message.\"\nsyntax:\n  return:\n    type: '(values: any, valueGetter: Function) => KeyValue | undefined'\npackageName: '@progress/kendo-react-form'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Form, Field, FormElement, FieldRenderProps, FormRenderProps, FormFieldSet } from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { getter } from '@progress/kendo-react-common';\n\nconst firstNameGetter: any = getter('user.firstName');\nconst lastNameGetter: any = getter('user.lastName');\n\nconst firstOrLastNameValidator = (values: any) => {\n    if (firstNameGetter(values) || lastNameGetter(values)) {\n        return;\n    }\n\n    return {\n        VALIDATION_SUMMARY: 'Please fill at least one of the following fields.',\n        'user.firstName': 'Please check the validation summary for more information.',\n        'user.lastName': 'Please check the validation summary for more information.'\n    };\n};\n\nconst ValidatedInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div>\n            <Input {...others} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nconst App = () => {\n    const handleSubmit = (dataItem: any) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validator={firstOrLastNameValidator}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FormFieldSet legend={'Please fill in the following information:'}>\n                        {formRenderProps.visited && formRenderProps.errors?.VALIDATION_SUMMARY && (\n                            <div className={'k-messagebox k-messagebox-error'}>\n                                {formRenderProps.errors.VALIDATION_SUMMARY}\n                            </div>\n                        )}\n                        <div className=\"mb-3\">\n                            <Field name={'user.firstName'} component={ValidatedInput} label={'First name'} />\n                        </div>\n                        <div className=\"mb-3\">\n                            <Field name={'user.lastName'} component={ValidatedInput} label={'Last name'} />\n                        </div>\n                    </FormFieldSet>\n                    <div className=\"k-form-buttons\">\n                        <Button disabled={!formRenderProps.allowSubmit}>Submit</Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n};\nexport default App;\n\n```\n\n\nWe use form validation to make sure that users provide correct information in terms of format, content length, etc. For example, is the phone number an actual number, did the user put info in all of the required fields, and so on.\n\nHow it Works?\n\nKendoReact supports handling user input in the UI, and displays useful validation messages using the Form, Field, and Error components. Refer to the <a href=\"/kendo-react-ui-develop/components/form/validation\">article on form validation</a> for further details and runnable demos.\n\nField-level Form Validation Form Components\n\nForms consist of form components (such as inputs, buttons, checkboxes, dropdowns, color pickers), their labels, hints and error messages. KendoReact provides comprehensive support for building forms with the <a href=\"/kendo-react-ui-develop/components/form\">Form</a>, and <a href=\"/kendo-react-ui-develop/components/labels\">Labels</a> packages. In this article we share valuable best practices.\nHere’s an example of the Form and Labels packages in action, so you can get an idea of how they work.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nValidation\n\nYou can set up the validation on form or field level by using the component's props. <a href=\"/kendo-react-ui-develop/components/form/validation\">Read more Form validation...</a>\n\nForm Wizard\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "TextBox": "## API Reference Item\n- Name: TextBoxProps\n- Type: Interface\n- Summary: Represents the properties of the KendoReact [TextBox]({% slug api_inputs_textbox %}) component\n- Syntax: \n\n## Additional Context\n### TextBoxProps.autoFocus (children)\nname: autoFocus\nfullName: TextBoxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the TextBox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.fillMode (children)\nname: fillMode\nfullName: TextBoxProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.inputAttributes (children)\nname: inputAttributes\nfullName: TextBoxProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.onChange (children)\nname: onChange\nfullName: TextBoxProps.onChange\nsummary: |-\n  The \n  `onChange`\n   callback of the \n  `input`\n   element inside the TextBox.\nsyntax:\n  return:\n    type: '(event: TextBoxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.prefix (children)\nname: prefix\nfullName: TextBoxProps.prefix\nsummary: Sets a custom prefix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.rounded (children)\nname: rounded\nfullName: TextBoxProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.size (children)\nname: size\nfullName: TextBoxProps.size\nsummary: \"Configures the \\n`size`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.suffix (children)\nname: suffix\nfullName: TextBoxProps.suffix\nsummary: Sets a custom suffix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.valid (children)\nname: valid\nfullName: TextBoxProps.valid\nsummary: |-\n  Indicates if the component is in \n  `valid`\n   state\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n\nForms Support\n\nThe KendoReact TextBox component can be easily integrated with our <a href=\"/kendo-react-ui-develop/components/form\">KendoReact Form</a>.\nThe form enables you to validate the TextBox and prevent the submission of the forms which are in an invalid state.\nBy utilizing the KendoReact Form component we can take advantage of the <a href=\"/kendo-react-ui-develop/components/form/validation\">Validation</a> functionality and render additional custom component depending on the form's validity state.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n<a href=\"/kendo-react-ui-develop/components/inputs/textbox/adornments\">Customization</a>—Provide custom components for prefix and suffix of the TextBox to achieve advanced scenarios.\n<a href=\"/kendo-react-ui-develop/components/inputs/textbox/forms-support\">Forms support</a>—You can use the TextBox inside the KendoReact Form component to validate input values, set validation requirements, and prevent the submission of invalid forms. The KendoReact TextBox component provides options for creating composite inputs that you can integrate within forms or use as standalone items.\nThis   is   a  Free React  TextBoxThe KendoReact  TextBox   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the TextBox in action.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Typography": "React Typography Demo Preview\n\nThe following example demonstrates the Typography variants and styles in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Typography is part of the <a href=\"/kendo-react-ui-develop/components/common\">KendoReact Common Utilities</a> component library. The procedures for installing, importing, and using the Common Utilities are identical for all components in the package. To learn how to use the Typography and the rest of the Common Utilities, see the <a href=\"/kendo-react-ui-develop/components/common\">Getting Started with the KendoReact Common Utilities</a> guide.\n\nKey Features Key Features\n\n\n<a href=\"/kendo-react-ui-develop/components/common/typography/appearance\">Appearance</a>—You can quickly add additional style to the Typography by choosing from the predefined styling options. The Typography is a reusable component that helps presenting the content in a React application. It could trim down a lot of time as the application grows.\nThis   is   a  Free React  TypographyThe KendoReact  Typography   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe key benefits of the Typography component are:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "PanelBar": "## API Reference Item\n- Name: PanelBarProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the PanelBar.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <PanelBar style={{ border: '2px solid blue' }}>\n            <PanelBarItem title=\"Projects\">\n                <PanelBarItem title=\"New Business Plan\" />\n                <PanelBarItem title=\"Sales Forecasts\">\n                    <PanelBarItem title=\"Q1 Forecast\" />\n                    <PanelBarItem title=\"Q2 Forecast\" />\n                    <PanelBarItem title=\"Q3 Forecast\" />\n                    <PanelBarItem title=\"Q4 Forecast\" />\n                </PanelBarItem>\n                <PanelBarItem title=\"Sales Reports\" />\n            </PanelBarItem>\n        </PanelBar>\n    );\n}\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: PanelBarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact PanelBar component]({% slug overview_panelbar %}).\n- Syntax: \n\n## Additional Context\n### PanelBarProps.animation (children)\nname: animation\nfullName: PanelBarProps.animation\nsummary: Sets the animation state of the PanelBar.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.children (children)\nname: children\nfullName: PanelBarProps.children\nsummary: The child can be either a single PanelBarItem or a PanelBarItem array.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.className (children)\nname: className\nfullName: PanelBarProps.className\nsummary: The class name that is set to the PanelBar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.dir (children)\nname: dir\nfullName: PanelBarProps.dir\nsummary: Sets the direction of the PanelBar component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.expandMode (children)\nname: expandMode\nfullName: PanelBarProps.expandMode\nsummary: \"Sets the expand mode of the PanelBar ([see example]({% slug expandmodes_panelbar %})).\\r\\n\\r\\nThe available modes are:\\r\\n- \\n`\\\"single\\\"`\\n&mdash;Allows you to expand only one item at a time. The expanding of an item collapses the item that was previously expanded.\\r\\n- \\n`\\\"multiple\\\"`\\n&mdash;Allows you to expand two or more items at a time. Items can also be toggled.\"\nsyntax:\n  return:\n    type: PanelBarExpandMode\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.expanded (children)\nname: expanded\nfullName: PanelBarProps.expanded\nsummary: |-\n  Sets the initial expanded state of the PanelBar. Takes the \n  `id`\n   of the item.\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.focused (children)\nname: focused\nfullName: PanelBarProps.focused\nsummary: |-\n  Sets the initial focused state of the PanelBar. Takes the \n  `id`\n   of the item.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.isControlled (children)\nname: isControlled\nfullName: PanelBarProps.isControlled\nsummary: Determines if the PanelBar is going to be used in controlled state.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.keepItemsMounted (children)\nname: keepItemsMounted\nfullName: PanelBarProps.keepItemsMounted\nsummary: Determines if the PanelBar items will be mounted after expand collapse.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.onSelect (children)\nname: onSelect\nfullName: PanelBarProps.onSelect\nsummary: >-\n  Fires each time the user makes a selection ([see example]({% slug\n  controlling_state_panelbar %})).\nsyntax:\n  return:\n    type: '(event: PanelBarSelectEventArguments) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarProps.selected (children)\nname: selected\nfullName: PanelBarProps.selected\nsummary: >-\n  If set, overrides the currently selected property in the PanelBar state. Takes\n  the \n\n  `id`\n   of the item.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: PanelBar\n- Type: Class\n- Summary: Represents the [KendoReact PanelBar component]({% slug overview_panelbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 2\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 3\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 4\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 5\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 6\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 7\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n### Example 8\n```\nimport * as React from 'react';\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return (\n        <PanelBar>\n            <PanelBarItem title=\"First Item\" />\n            <PanelBarItem title=\"Second Item\" />\n        </PanelBar>\n    );\n}\n\n```\n\n\n## Additional Context\n### PanelBar.constructor (children)\nname: constructor\nfullName: PanelBar.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar._element (children)\nname: _element\nfullName: PanelBar._element\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.activeDescendant (children)\nname: activeDescendant\nfullName: PanelBar.activeDescendant\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleKeyDown (children)\nname: handleKeyDown\nfullName: PanelBar.handleKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleWrapperBlur (children)\nname: handleWrapperBlur\nfullName: PanelBar.handleWrapperBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.handleWrapperFocus (children)\nname: handleWrapperFocus\nfullName: PanelBar.handleWrapperFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.nextTickId (children)\nname: nextTickId\nfullName: PanelBar.nextTickId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.children (children)\nname: children\nfullName: PanelBar.children\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.expandMode (children)\nname: expandMode\nfullName: PanelBar.expandMode\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.expandedItems (children)\nname: expandedItems\nfullName: PanelBar.expandedItems\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.selectedItem (children)\nname: selectedItem\nfullName: PanelBar.selectedItem\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBar.nextTick (children)\nname: nextTick\nfullName: PanelBar.nextTick\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: PanelBarItem\n- Type: Class\n- Summary: Represents the PanelBarItem component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { PanelBar, PanelBarItem } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <PanelBar>\n            <PanelBarItem expanded={true} title=\"Projects\">\n                <PanelBarItem title=\"New Business Plan\" />\n                <PanelBarItem title=\"Sales Forecasts\">\n                    <PanelBarItem title=\"Q1 Forecast\" />\n                    <PanelBarItem title=\"Q2 Forecast\" />\n                    <PanelBarItem title=\"Q3 Forecast\" />\n                    <PanelBarItem title=\"Q4 Forecast\" />\n                </PanelBarItem>\n                <PanelBarItem title=\"Sales Reports\" />\n            </PanelBarItem>\n            <PanelBarItem title=\"Programs\">\n                <PanelBarItem title=\"Monday\" />\n                <PanelBarItem title=\"Tuesday\" />\n                <PanelBarItem title=\"Wednesday\" />\n                <PanelBarItem title=\"Thursday\" />\n                <PanelBarItem title=\"Friday\" />\n            </PanelBarItem>\n        </PanelBar>\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### PanelBarItem.constructor (children)\nname: constructor\nfullName: PanelBarItem.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarItem.childFactory (children)\nname: childFactory\nfullName: PanelBarItem.childFactory\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarItem.handleItemClick (children)\nname: handleItemClick\nfullName: PanelBarItem.handleItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### PanelBarItemProps (children)\nname: PanelBarItemProps\nfullName: PanelBarItemProps\nsummary: Represents the props of the PanelBarItem component.\nsyntax:\n  return:\n    type: any\n  parameters:\n    - id: 27337\n      name: key\n      type: string\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - animation\n  - children\n  - className\n  - disabled\n  - expanded\n  - focused\n  - headerClassName\n  - icon\n  - iconClass\n  - id\n  - imageUrl\n  - selected\n  - svgIcon\n  - title\n  - uniquePrivateKey\n\n\n<a href=\"https://telerik.github.io/kendo-react/kendo-react-tailwind/\" rel=\"noopener\" target=\"_blank\">Open the sample in a new tab</a> to explore its responsive design, built with Tailwind CSS utility classes.\n\nCustomizing Styled KendoReact Components with Tailwind CSS\n\nSince KendoReact components do not natively utilize Tailwind CSS utility classes in their markup, you cannot style them directly using Tailwind CSS class names. Instead, you can customize their visual appearance by overriding the corresponding Kendo UI theme variables with default Tailwind CSS variables or with your own custom variables.\n\nAnimations\n\nYou can enable or disable the show and hide animations of the PanelBar.\nTo control the behavior of the animations:\n\nSpecify the <a href=\"/kendo-react-ui-develop/components/layout/api/panelbarprops#animation\">animation</a> property of the PanelBar.\nSpecify the <a href=\"/kendo-react-ui-develop/components/layout/api/panelbarprops#animation\">animation</a> property to individual children.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nKendoReact PanelBar Overview\n\nThe KendoReact PanelBar displays hierarchical data as a multi-level, expandable component.\nYou can describe the children items by:\n\nUsing nested PanelBarItem components, or\n<a href=\"/kendo-react-ui-develop/components/layout/panelbar/data-binding\">Binding a data collection</a> to the PanelBarItem components.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Card": "## API Reference Item\n- Name: CardProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Card.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px',\n                backgroundColor: 'lightblue',\n                padding: '20px'\n            }}\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: CardProps.className\n- Type: Property\n- Summary: Sets additional classes to the Card.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            className=\"custom-card-class\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Card\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### CardProps (children)\nname: CardProps\nfullName: CardProps\nsyntax:\n  return:\n    type: any\n  parameters:\n    - id: 26200\n      name: key\n      type: string\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - dir\n  - orientation\n  - style\n  - type\n\n---\n### Card.Card.props (children)\nname: props\nfullName: Card.Card.props\nsyntax:\n  return:\n    type: Omit<CardProps, \"ref\"> | RefAttributes\n\n\n## API Reference Item\n- Name: CardProps.orientation\n- Type: Property\n- Summary: Sets the Card orientation.\r\n\r\nThe supported values are:\r\n* \n`horizontal`\n - Default\r\n* \n`vertical`\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Card, CardHeader, CardTitle, CardBody, CardActions, CardSubtitle, Avatar } from '@progress/kendo-react-layout';\nimport { commentIcon, heartIcon } from '@progress/kendo-svg-icons';\nimport { Button } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Card\n            style={{\n                width: 320,\n                boxShadow: '0 0 4px 0 rgba(0, 0, 0, .1)',\n                marginTop: '15px'\n            }}\n            orientation=\"vertical\"\n        >\n            <CardHeader className=\"k-hbox\" style={{ background: 'transparent' }}>\n                <Avatar type=\"image\" size=\"large\" rounded=\"full\" border={true} fillMode=\"outline\">\n                    <img\n                        src=\"https://demos.telerik.com/kendo-react-ui/assets/layout/card/bg_flag.jpg\"\n                        alt=\"KendoReact Avatar Customer\"\n                        style={{ width: 45, height: 45 }}\n                    />\n                </Avatar>\n                <div>\n                    <CardTitle style={{ marginBottom: '4px' }}>Card Title</CardTitle>\n                    <CardSubtitle>Card Subtitle</CardSubtitle>\n                </div>\n            </CardHeader>\n            <CardActions style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={heartIcon} />\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={commentIcon} />\n                </div>\n            </CardActions>\n            <CardBody>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad non soluta quaerat quasi provident dolores\n                dignissimos repudiandae in iste. Voluptate et aliquid nisi quibusdam quae. Eum distinctio rerum\n                laboriosam deleniti? Nobis quidem delectus, hic modi nam nemo harum. Reiciendis dolorem libero nulla\n                earum provident iure cumque in labore temporibus laudantium?\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default App;\n\n```\n\n\nOrientation\n\nThe Card enables you to arrange its content either vertically or horizontally.\nTo set the Card orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/cardprops#orientation\">orientation</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe following example demonstrates the Card in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Card is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Card and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features <a href=\"/kendo-react-ui-develop/components/layout/card/orientation\">Orientation</a>—You can arrange the content of the Card vertically or horizontally.\n<a href=\"/kendo-react-ui-develop/components/layout/card/types\">Types</a>—The predefined types provide a convenient way to change the appearance of the Card.\n<a href=\"/kendo-react-ui-develop/components/layout/card/action_buttons\">Actions</a>—The Card allows you to render custom action buttons and to customize their orientation and layout.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Notification": "## API Reference Item\n- Name: Notification\n- Type: Class\n- Summary: Represents the [KendoReact Notification component]({% slug overview_notification %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Notification } from '@progress/kendo-react-notification';\n\nconst App = () => {\n    return (\n        <Notification>\n            <span>Notification message</span>\n        </Notification>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: NotificationProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Notification component]({% slug overview_notification %}).\n- Syntax: \n\n## Additional Context\n### NotificationProps.className (children)\nname: className\nfullName: NotificationProps.className\nsummary: Sets additional classes to the Notification.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.closable (children)\nname: closable\nfullName: NotificationProps.closable\nsummary: \"Sets if the Notification requires a user action to hide.\\r\\nIf the property is set to \\n`true`\\n, the Notification renders a **Close** button.\\r\\nIf the property is set to an object, the Notification renders a **Close** button\\r\\nby extending the default props with the provided object.\"\nsyntax:\n  return:\n    type: boolean | DetailedHTMLProps\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.dir (children)\nname: dir\nfullName: NotificationProps.dir\nsummary: |-\n  Sets the \n  `dir`\n   HTML attribute, which determines the text direction.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.onClose (children)\nname: onClose\nfullName: NotificationProps.onClose\nsummary: Fires when you click the **Close** button.\nsyntax:\n  return:\n    type: '(event: NotificationEvent) => void'\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.style (children)\nname: style\nfullName: NotificationProps.style\nsummary: The styles that are applied to the Notification.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.type (children)\nname: type\nfullName: NotificationProps.type\nsummary: Sets the Notification type, which determines its style and icon.\nsyntax:\n  return:\n    type: >-\n      { icon?: boolean, style?: \"base\" | \"primary\" | \"secondary\" | \"tertiary\" |\n      \"info\" | \"success\" | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\" |\n      \"none\" }\npackageName: '@progress/kendo-react-notification'\n\n\nThe KendoReact Notification positions a piece of content next to a specific anchor component.\nThis   is   a  Free React  NotificationThe KendoReact  Notification   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following demo shows the Notification component which is included in the KendoReact Notification package: For any questions about the use of the KendoReact Notification, or any other <a href=\"https://www.telerik.com/kendo-react-ui/components/\" rel=\"noopener\" target=\"_blank\">KendoReact components</a>, there are <a href=\"https://www.telerik.com/kendo-react-ui/support\" rel=\"noopener\" target=\"_blank\">several support options available</a>:\n\nPositioning\n\nYou can configure the position of the Notification through the <a href=\"/kendo-react-ui-develop/components/notification/api/notificationgroupprops#style\">style</a> property of the <a href=\"/kendo-react-ui-develop/components/notification/api/notificationgroup\">NotificationGroup</a> component.\nThe following example demonstrates how to align the Notification to the browser viewport.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Pager": "## API Reference Item\n- Name: Pager\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### PagerProps (children)\nname: PagerProps\nfullName: PagerProps\nsyntax: {}\npackageName: '@progress/kendo-react-data-tools'\nmembers:\n  - adaptive\n  - adaptiveTitle\n  - buttonCount\n  - className\n  - dir\n  - disabled\n  - info\n  - messagesMap\n  - navigatable\n  - onPageChange\n  - pageSizeValue\n  - pageSizes\n  - previousNext\n  - responsive\n  - size\n  - skip\n  - style\n  - take\n  - total\n  - type\n\n---\n### Pager.Pager.props (children)\nname: props\nfullName: Pager.Pager.props\nsyntax:\n  return:\n    type: PagerProps | RefAttributes\n\n\n## API Reference Item\n- Name: PagerProps.pageSizes\n- Type: Property\n- Summary: Displays a menu for selecting the page size.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Pager, PageChangeEvent } from '@progress/kendo-react-data-tools';\n\ninterface PageInterface {\n    skip: number;\n    take: number;\n}\n\nconst App = () => {\n    const [page, setPage] = React.useState<PageInterface>({ skip: 0, take: 5 });\n\n    const handlePageChange = (event: PageChangeEvent) => {\n        setPage({ skip: event.skip, take: event.take });\n    };\n\n    return (\n        <Pager\n            skip={page.skip}\n            take={page.take}\n            total={100}\n            onPageChange={handlePageChange}\n            previousNext={true}\n            type=\"numeric\"\n            pageSizes={[5, 10, 15]}\n        />\n    );\n};\n\nexport default App;\n\n```\n\n\nAppearance\n\nThe KendoReact Pager allows selecting a predefined size option that changes its size.\nTo change the default size of the Pager, set its <a href=\"/kendo-react-ui-develop/components/datatools/api/pagerprops#size\">size</a> property which will change the padding of its elements. The available size options are:\n\nsmall - sets the padding of the elements to 2px 8px\nmedium (default) - sets the padding of the elements to 4px 8px\nlarge - sets the padding of the elements to 8px 8px\nnull - removes the styling related to the Pager sizing option\n\nSelectorAttributeUsage.k-pagerrole=applicationIndicates that the pager element has its own keyboard navigation implemented.aria-roledescription=pagerClarifies the role of the Pager.aria-keyshortcuts=Enter ArrowRight ArrowLeftAnnounces the available keyboard shortcuts while the pager element is focused.aria-labelAnnounces the currently selected page and the number of available pages.aria-controlsPoints to the id of the element that is being controlled, for example, a Grid..k-pager-navrole=button or nodeName=buttonSpecifies the role of the element.aria-disabled=trueThe attribute is present when the the Arrow button is disabled, for example, disabled, for example, present on the Previous button when the current page is the first one.titleSpecifies the purpose of each button.aria-label or titleSpecifies the purpose of each link, for example, Page 6.aria-current=pageThe attribute must be present on the currently selected page element..k-pager-sizes>.k-dropdownlistaria-labelThe element requires an aria-label to specify its purpose..k-pager-numbers-wrap>.k-dropdownaria-labelThe element requires an aria-label to specify its purpose..k-pager-input>.k-input>.k-input-inneraria-labelThe element requires an aria-label\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Avatar": "## API Reference Item\n- Name: AvatarProps.size\n- Type: Property\n- Summary: Configures the \n`size`\n of the Avatar.\r\n\r\nThe available options are:\r\n- small\r\n- medium\r\n- large\r\n- null&mdash;Does not set a size \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Avatar } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Avatar size=\"large\">AB</Avatar>;\n}\n\n```\n\n\nThe Avatar component is typically used to display images, icons, or initials representing people or other entities.\nThis   is   a  Free React  AvatarThe KendoReact  Avatar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Avatar in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSize\n\nThe Avatar allows you to set predefined or custom sizes.\nTo specify a predefined size, set the <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#size\">size</a> property.\nThe available <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#size\">size</a> values are:\n\nsmall\nmedium (Default)\nlarge Appearance\n\nThe Avatar allows you to set different styles based on its content.\n\nType\n\nThe available <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#type\">type</a> are:\n\nImage —By passing an img element as child element of the Avatar.\nText avatar—By passing an given string to be rendered as text (initials).\nIcon avatar—By passing icon to the Avatar component.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Tooltip": "## API Reference Item\n- Name: TooltipProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Tooltip component]({% slug overview_tooltip %}).\n- Syntax: \n\n## Additional Context\n### TooltipProps.anchorElement (children)\nname: anchorElement\nfullName: TooltipProps.anchorElement\nsummary: \"Sets the anchor element of the Tooltip.\\r\\n\\r\\nThe available options are:\\r\\n- (Default) \\n`pointer`\\n&mdash;Positions the Tooltip where the cursor is located.\\r\\n- \\n`target`\\n&mdash;Positions the Tooltip relative to the target element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.appendTo (children)\nname: appendTo\nfullName: TooltipProps.appendTo\nsummary: \"Defines the container to which the Tooltip will be appended.\\r\\nDefaults to [\\n`body`\\n](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body).\\r\\nIf set to \\n`null`\\n, the Tooltip will not use React Portal.\"\nsyntax:\n  return:\n    type: null | HTMLElement\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.children (children)\nname: children\nfullName: TooltipProps.children\nsummary: \"Specifies the children elements of the Tooltip.\\r\\nUsed to define the content of the Tooltip.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.className (children)\nname: className\nfullName: TooltipProps.className\nsummary: Specifies additional CSS classes for the Tooltip animation container.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.content (children)\nname: content\nfullName: TooltipProps.content\nsummary: \"Sets the content of the Tooltip ([see example]({% slug templates_tooltip %})).\\r\\nCan be a string, JSX, or a function returning JSX.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.filter (children)\nname: filter\nfullName: TooltipProps.filter\nsummary: >-\n  Callback function to determine if the Tooltip should be displayed for a\n  specific target element ([see example]({% slug filter_elements_tooltip %})).\nsyntax:\n  return:\n    type: '(target: HTMLElement) => void'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.id (children)\nname: id\nfullName: TooltipProps.id\nsummary: \"Specifies the \\n`id`\\n of the wrapping element of the Tooltip component.\\r\\nUsed to uniquely identify the Tooltip element in the DOM.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.onClose (children)\nname: onClose\nfullName: TooltipProps.onClose\nsummary: \"Fires when the Tooltip is hidden.\\r\\nProvides the event details.\"\nsyntax:\n  return:\n    type: '(event: TooltipEvent) => void'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.onOpen (children)\nname: onOpen\nfullName: TooltipProps.onOpen\nsummary: \"Fires when the Tooltip is shown.\\r\\nProvides the event details.\"\nsyntax:\n  return:\n    type: '(event: TooltipEvent) => void'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.onPosition (children)\nname: onPosition\nfullName: TooltipProps.onPosition\nsummary: \"Callback function triggered when the Tooltip calculates its position.\\r\\nAllows customization of the \\n`top`\\n and \\n`left`\\n position values.\"\nsyntax:\n  return:\n    type: '(event: TooltipPositionEvent) => { left: number, top: number }'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.open (children)\nname: open\nfullName: TooltipProps.open\nsummary: \"Controls the visibility of the Tooltip.\\r\\nWhen set, the Tooltip operates in controlled mode ([see example]({% slug controlledmode_tooltip %})).\\r\\nRequires the \\n`targetElement`\\n property to be set.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.openDelay (children)\nname: openDelay\nfullName: TooltipProps.openDelay\nsummary: Specifies a delay in milliseconds before the Tooltip is displayed.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.parentTitle (children)\nname: parentTitle\nfullName: TooltipProps.parentTitle\nsummary: |-\n  Enables the Tooltip to display the title of any parent element with a \n  `title`\n   attribute.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.position (children)\nname: position\nfullName: TooltipProps.position\nsummary: \"Sets the position of the Tooltip ([see example]({% slug positioning_tooltip %})).\\r\\n\\r\\nThe available options are:\\r\\n- (Default) \\n`auto`\\n&mdash;Automatically positions the Tooltip based on available space.\\r\\n- \\n`right`\\n&mdash;Positions the Tooltip to the right of the element.\\r\\n- \\n`left`\\n&mdash;Positions the Tooltip to the left of the element.\\r\\n- \\n`bottom`\\n&mdash;Positions the Tooltip below the element.\\r\\n- \\n`top`\\n&mdash;Positions the Tooltip above the element.\"\nsyntax:\n  return:\n    type: TooltipPosition\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.setCalloutOnPositionAuto (children)\nname: setCalloutOnPositionAuto\nfullName: TooltipProps.setCalloutOnPositionAuto\nsummary: \"Specifies the starting point of the Tooltip callout when the position is set to \\n`auto`\\n.\\r\\nAccepts a pixel value.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.showCallout (children)\nname: showCallout\nfullName: TooltipProps.showCallout\nsummary: Determines whether the Tooltip callout (arrow) is displayed.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.showOption (children)\nname: showOption\nfullName: TooltipProps.showOption\nsummary: \"Configures when the Tooltip will be displayed.\\r\\nThe available options are:\\r\\n- \\n`hover`\\n&mdash;Displays the Tooltip when the mouse hovers over the target element (default).\\r\\n- \\n`click`\\n&mdash;Displays the Tooltip when the target element is clicked.\\r\\n- \\n`focus`\\n&mdash;Displays the Tooltip when the target element is focused.\\r\\n- \\n`keys`\\n&mdash;Displays the Tooltip when a specific key is pressed while the target element is focused.\\r\\n- \\n`none`\\n&mdash;Disables the Tooltip display.\"\nsyntax:\n  return:\n    type: TooltipShowOptions\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.style (children)\nname: style\nfullName: TooltipProps.style\nsummary: Specifies the styles applied to the Tooltip animation container.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.targetElement (children)\nname: targetElement\nfullName: TooltipProps.targetElement\nsummary: \"Specifies the target element for the Tooltip.\\r\\nRequired when the Tooltip is in controlled mode.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.tooltipClassName (children)\nname: tooltipClassName\nfullName: TooltipProps.tooltipClassName\nsummary: Specifies additional CSS classes for the Tooltip DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.tooltipStyle (children)\nname: tooltipStyle\nfullName: TooltipProps.tooltipStyle\nsummary: Specifies the styles applied to the Tooltip DOM element.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps.updateInterval (children)\nname: updateInterval\nfullName: TooltipProps.updateInterval\nsummary: \"Specifies the interval in milliseconds for the Tooltip to check for title changes.\\r\\nBy default, the Tooltip does not track title updates.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-tooltip'\n\n\n<a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/controlled-mode\">Controlled mode</a> - The KendoReact Tooltip provides options for you to show it programmatically not only on hover.\n<a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/anchor-elements\">Specifying anchor elements</a> - You can target specific anchor elements which will render a tooltip.\n\nFor any questions about the use of the KendoReact Tooltips, or any other <a href=\"https://www.telerik.com/kendo-react-ui/components/\" rel=\"noopener\" target=\"_blank\">KendoReact components</a>, there are <a href=\"https://www.telerik.com/kendo-react-ui/support\" rel=\"noopener\" target=\"_blank\">several support options available</a>:\n\nTemplates\n\nYou can provide a custom rendering for the content of the Tooltip.\nBy default, the Tooltip shows the title attribute value of the anchor element. To customize the default content, set the <a href=\"/kendo-react-ui-develop/components/tooltip/api/tooltipprops#content\">content</a> property of the Tooltip. content can accept a JSX element or another component and the title property of the anchor element will be received as props.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ComboBox": "## API Reference Item\n- Name: ComboBoxProps.onOpen\n- Type: Property\n- Summary: Fires each time the popup of the ComboBox is about to open.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ComboBoxCloseEvent, ComboBoxOpenEvent } from '@progress/kendo-react-dropdowns';\nimport { Label } from '@progress/kendo-react-labels';\n\nconst themes = ['Light', 'Dark'];\n\nexport default function App() {\n    const [opened, setOpened] = React.useState(false);\n    const handleOpen = (event: ComboBoxOpenEvent) => {\n        setOpened(true);\n    };\n    const handleClose = (event: ComboBoxCloseEvent) => {\n        setOpened(false);\n    };\n\n    return (\n        <>\n            <Label editorId=\"themes-combobox\">Choose a theme</Label>\n            <ComboBox id=\"themes-combobox\" data={themes} opened={opened} onOpen={handleOpen} onClose={handleClose} />\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### ComboBoxOpenEvent (generic)\nname: ComboBoxOpenEvent\nfullName: ComboBoxOpenEvent\nsummary: |-\n  Represents the object of the \n  `open`\n   ComboBox event.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n## API Reference Item\n- Name: ComboBoxProps.itemRender\n- Type: Property\n- Summary: Fires when a ComboBox list item is about to be rendered ([see example]({% slug customrendering_combobox %}#toc-items)). Used to override the default appearance of the list items.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ListItemProps } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    const data = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry'];\n    const itemRender = (li: React.ReactElement<HTMLLIElement>, itemProps: ListItemProps) => {\n        const itemChildren = <span style={{ color: '#00F' }}>{li.props.children as any}</span>;\n\n        return React.cloneElement(li, li.props, itemChildren);\n    };\n    return <ComboBox data={data} itemRender={itemRender} />;\n}\n\n```\n\n\n## Additional Context\n### ListItemProps (generic)\nname: ListItemProps\nfullName: ListItemProps\nsummary: Represents the props of the ListItem component.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - dataItem\n  - disabled\n  - focused\n  - group\n  - groupMode\n  - id\n  - index\n  - onClick\n  - render\n  - selected\n  - textField\n\n\n## API Reference Item\n- Name: ComboBoxProps.style\n- Type: Property\n- Summary: The styles that are applied to the ComboBox.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox } from '@progress/kendo-react-dropdowns';\n\nconst priorities = ['High', 'Low'];\n\nexport default function App() {\n    return (\n        <ComboBox data={priorities} label=\"Select priority\" style={{ width: 250 }} />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: ComboBoxProps.clearButton\n- Type: Property\n- Summary: If \n`clearButton`\n is set to \n`true`\n, the ComboBox renders a button on hovering over the component. Clicking this button resets the value of the ComboBox to \n`undefined`\n and triggers the \n`change`\n event.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox } from '@progress/kendo-react-dropdowns';\nimport { Label } from '@progress/kendo-react-labels';\n\nconst devices = ['Laptop', 'Tablet'];\n\nexport default function App() {\n    return (\n        <>\n            <Label editorId=\"devices-combobox\">Select a device:</Label>\n            <ComboBox id=\"devices-combobox\" data={devices} clearButton={false} />\n        </>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: ComboBoxProps.onChange\n- Type: Property\n- Summary: Fires each time the value of the ComboBox is about to change ([see examples]({% slug binding_combobox %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ComboBoxChangeEvent } from '@progress/kendo-react-dropdowns';\n\nconst seasons: string[] = ['Spring', 'Summer'];\n\nexport default function App() {\n    const [value, setValue] = React.useState<string | null>(null);\n    const handleChange = (event: ComboBoxChangeEvent) => {\n        setValue(event.value);\n    };\n\n    return <ComboBox data={seasons} onChange={handleChange} value={value} />;\n}\n\n```\n\n\n## Additional Context\n### ComboBoxChangeEvent (generic)\nname: ComboBoxChangeEvent\nfullName: ComboBoxChangeEvent\nsummary: |-\n  Represents the object of the \n  `change`\n   ComboBox event.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - nativeEvent\n  - syntheticEvent\n  - target\n  - value\n\n\n## API Reference Item\n- Name: DropDownsPopupSettings.width\n- Type: Property\n- Summary: Sets the width of the popup container. By default, the width of the host element is used.\n- Syntax: \n\n## Examples\n### Example 4\n```\nimport * as React from 'react';\nimport { ComboBox } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    const sports = ['Basketball', 'Football', 'Tennis'];\n    return <ComboBox data={sports} style={{ width: 200 }} popupSettings={{ width: 200 }} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: ComboBoxProps.onFilterChange\n- Type: Property\n- Summary: Fires each time the user types in the filter input ([see examples]({% slug filtering_combobox %}#toc-basic-configuration)). You can filter the source based on the passed filtration value.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ComboBoxFilterChangeEvent } from '@progress/kendo-react-dropdowns';\n\nimport { filterBy, FilterDescriptor } from '@progress/kendo-data-query';\n\nexport default function App() {\n    const sports = ['Soccer', 'Basketball', 'Tennis', 'Baseball'];\n    const [data, setData] = React.useState(sports.slice());\n\n    const filterData = (filter: FilterDescriptor) => {\n        return filterBy(sports, filter);\n    };\n\n    const handleFilterChange = (event: ComboBoxFilterChangeEvent) => {\n        setData(filterData(event.filter));\n    };\n\n    return <ComboBox data={data} filterable={true} onFilterChange={handleFilterChange} />;\n}\n\n```\n\n\n## Additional Context\n### ComboBoxFilterChangeEvent (generic)\nname: ComboBoxFilterChangeEvent\nfullName: ComboBoxFilterChangeEvent\nsummary: |-\n  Represents the object of the \n  `FilterChange`\n   ComboBox event.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - filter\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n<a href=\"/kendo-react-ui-develop/components/dropdowns/combobox/filtering\">Filtering</a>—You can configure the ComboBox to filter the results locally or on the server.\n<a href=\"/kendo-react-ui-develop/components/dropdowns/combobox/grouping\">Grouping</a>—You can display grouped data with visual labels for each group.\n\nCustom RenderingPremium\n\nThe ComboBox provides options for customizing the way it renders its elements.\nThe ComboBox utilizes custom renderers which enable you to moderate the content of its:\n\nSuggestion list items\nHeader and footer elements\nSuggestion list when no data is available\n\nItems\n\nTo customize the content of each suggestion list item, use the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/comboboxprops#itemrender\">itemRender</a> prop.\nThe following example demonstrates how to set the itemRender prop of the ComboBox and customize the list elements.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nOn every user modification of the input value, the ComboBox triggers an <a href=\"/kendo-react-ui-develop/components/dropdowns/api/comboboxprops#onfilterchange\">onFilterChange</a> event. The event argument contains the typed string value that you can use to filter the source.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\nTo filter the data after a delay, use a similar implementation. You can toggle the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/comboboxprops#loading\">loading</a> property and provide the user with a visual indication of the filtering process.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Dialog": "## API Reference Item\n- Name: Dialog\n- Type: Function\n- Summary: Represents the [KendoReact Dialog component]({% slug overview_dialog %}).\r\n\r\nAccepts properties of type [DialogProps]({% slug api_dialogs_dialogprops %}).\r\nObtaining the \n`ref`\n returns an object of type [DialogHandle]({% slug api_dialogs_dialoghandle %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Dialog } from '@progress/kendo-react-dialogs';\n\nfunction App() {\n    return (\n        <Dialog title=\"Dialog\">\n            <div>Dialog content</div>\n        </Dialog>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Dialog.Dialog.props (children)\nname: props\nfullName: Dialog.Dialog.props\nsyntax:\n  return:\n    type: DialogProps | RefAttributes\n\n\n## API Reference Item\n- Name: DialogProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Dialog component]({% slug overview_dialog %}).\n- Syntax: \n\n## Additional Context\n### DialogProps.appendTo (children)\nname: appendTo\nfullName: DialogProps.appendTo\nsummary: \"Defines the container to which the Dialog will be appended.\\r\\n* If set to \\n`null`\\n the Dialog will be rendered without React Portal.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.autoFocus (children)\nname: autoFocus\nfullName: DialogProps.autoFocus\nsummary: Set the focus the Dialog container automatically when mounted.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.autoFocusedElement (children)\nname: autoFocusedElement\nfullName: DialogProps.autoFocusedElement\nsummary: >-\n  Specifies the query selector used to set the initial focus ([see examples]({%\n  slug initial_focus_dialogs %})).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.className (children)\nname: className\nfullName: DialogProps.className\nsummary: Sets a class of the Dialog DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.closeIcon (children)\nname: closeIcon\nfullName: DialogProps.closeIcon\nsummary: >-\n  Specifies whether a close button should be rendered at the top corner of the\n  dialog.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.contentStyle (children)\nname: contentStyle\nfullName: DialogProps.contentStyle\nsummary: The styles that are applied to the content of the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.dir (children)\nname: dir\nfullName: DialogProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.height (children)\nname: height\nfullName: DialogProps.height\nsummary: >-\n  Specifies the height of the Dialog ([see example]({% slug dimensions_dialog\n  %})).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.id (children)\nname: id\nfullName: DialogProps.id\nsummary: |-\n  Sets the \n  `aria-labelledby`\n   value.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.minWidth (children)\nname: minWidth\nfullName: DialogProps.minWidth\nsummary: Specifies the minimum width of the Dialog.\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.modal (children)\nname: modal\nfullName: DialogProps.modal\nsummary: >-\n  Specifies if the Dialog will be modal by rendering an overlay under the\n  component.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.onClose (children)\nname: onClose\nfullName: DialogProps.onClose\nsummary: |-\n  Fires when the **Close** button in the title is clicked or when the \n  `Esc`\n   button is pressed.\nsyntax:\n  return:\n    type: '(event: DialogCloseEvent) => void'\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.overlayStyle (children)\nname: overlayStyle\nfullName: DialogProps.overlayStyle\nsummary: |-\n  Set styles to the Dialog overlay element rendered when the \n  `modal`\n   prop is enabled.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.style (children)\nname: style\nfullName: DialogProps.style\nsummary: The styles that are applied to the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.themeColor (children)\nname: themeColor\nfullName: DialogProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Dialog.\\r\\n\\r\\nThe available options are:\\r\\n- primary\\r\\n- dark\\r\\n- light\"\nsyntax:\n  return:\n    type: '\"primary\" | \"dark\" | \"light\"'\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.title (children)\nname: title\nfullName: DialogProps.title\nsummary: >-\n  Sets the title of the Dialog ([see example]({% slug title_dialog %})). If you\n  do not specify the \n\n  `title`\n\n  , the Dialog does not render a **Close** button.\nsyntax:\n  return:\n    type: string | ReactElement\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.width (children)\nname: width\nfullName: DialogProps.width\nsummary: >-\n  Specifies the width of the Dialog ([see example]({% slug dimensions_dialog\n  %})).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n\nDisplay confirmation Dialog in a <a href=\"/kendo-react-ui/components/grid\">Grid</a> for row actions\nEmbed <a href=\"/kendo-react-ui/components/form\">Form</a> inside a Window\n\n\nThe Dialogs package is a dependency for multiple other KendoReact components.\n\nReact Dialogs with Other Telerik Components\n\nBased on the frameworks and technologies used in your project, you can combine UI components from different Telerik and Progress suites.\n\nFrequently Asked Questions\n\nAre the KendoReact Dialogs Free to Use? Key Features\n\nThe KendoReact Dialogs provide the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance\n\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n\nAction Buttons\n\nThe Dialog provides options for rendering action buttons and customizing their content.\nTo specify action buttons in the Dialog, use the DialogActionsBar element. You can customize the layout of the buttons by using the <a href=\"/kendo-react-ui-develop/components/dialogs/api/dialogactionsbarprops#layout\">layout</a> property of the DialogActionsBar component.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Badge": "## API Reference Item\n- Name: Badge\n- Type: Function\n- Summary: Represents the [KendoReact Badge component]({% slug overview_badge %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge themeColor=\"info\" />\n        </Button>\n    );\n}\n\n```\n\n\n## Additional Context\n### BadgeProps (children)\nname: BadgeProps\nfullName: BadgeProps\nsummary: >-\n  Represents the props of the [KendoReact Badge component]({% slug\n  overview_badge %}).\nsyntax: {}\npackageName: '@progress/kendo-react-indicators'\nmembers:\n  - align\n  - children\n  - className\n  - cutoutBorder\n  - dir\n  - fillMode\n  - position\n  - rounded\n  - size\n  - style\n  - themeColor\n\n---\n### Badge.Badge.props (children)\nname: props\nfullName: Badge.Badge.props\nsyntax:\n  return:\n    type: BadgeProps | RefAttributes\n\n\n## API Reference Item\n- Name: BadgeProps.style\n- Type: Property\n- Summary: Sets additional CSS styles to the Badge.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge style={{ backgroundColor: 'rebeccapurple', color: 'white' }}>Styled Badge</Badge>\n        </Button>\n    );\n}\n\n```\n\n\nThe Badge component is a visual indicator for UI elements. It enables you to easily show statuses, notifications, and short messages in your app. Badges provide additional contextual information for other elements on the page.\nThe KendoReact Badge is distributed through the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-indicators\" rel=\"noopener\" target=\"_blank\">kendo-react-indicators NPM package</a>. The Badge is part of the <a href=\"/kendo-react-ui-develop/components/indicators\">KendoReact Indicators</a> component library. The procedures for installing, importing, and using the Indicators are identical for all components in the package. To learn how to use the Badge and the rest of the Indicators, see the <a href=\"/kendo-react-ui-develop/components/indicators/get-started\">Getting Started with the KendoReact Indicators</a> guide.\n\nKey Features\n\nAppearance\n\nThe Badge component provides many predefined appearance options such as different shapes, sizes, theme colors and optional cutout borders.\n\nTheme Color\n\nThe Badge allows you to specify predefined theme colors.\nThe available <a href=\"/kendo-react-ui-develop/components/indicators/api/badgeprops#themecolor\">themeColor</a> values are:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "DropDownList": "## API Reference Item\n- Name: DropDownListProps.itemRender\n- Type: Property\n- Summary: Fires when a DropDownList item is about to be rendered ([see example]({% slug customrendering_dropdownlist %}#toc-items)). Used to override the default appearance of the list items.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\n\nconst customItemRender = (li, itemProps) => {\n    return React.cloneElement(li, { style: { color: 'red' } }, itemProps.dataItem);\n};\n\nexport default function App() {\n    const data = ['Item 1', 'Item 2', 'Item 3'];\n    return <DropDownList data={data} itemRender={customItemRender} />;\n}\n\n```\n\n\n## Additional Context\n### ListItemProps (generic)\nname: ListItemProps\nfullName: ListItemProps\nsummary: Represents the props of the ListItem component.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - dataItem\n  - disabled\n  - focused\n  - group\n  - groupMode\n  - id\n  - index\n  - onClick\n  - render\n  - selected\n  - textField\n\n\n## API Reference Item\n- Name: DropDownListProps.defaultValue\n- Type: Property\n- Summary: Sets the default value of the DropDownList ([see example]({% slug defaultitem_dropdownlist %})). Similar to the native \n`select`\n HTML element.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    const data = ['Item 1', 'Item 2', 'Item 3'];\n    return <DropDownList data={data} defaultValue=\"Select...\" />;\n}\n\n```\n\n\nEvents\n\nThe KendoReact DropDownList generates a variety of events that you can handle. This allows you to tailor the behavior of the DropDownList to your specific requirements.\nThe following example demonstrates the DropDownList events and how you can utilize the <a href=\"/kendo-react-ui-develop/components/common/api/useasyncfocusblur\">useAsyncFocusBlur</a> utility to handle the focus and blur events.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nLooping through Items\n\nWhen your browser refreshes, you’ll see your first basic KendoReact Data Grid. Next, you will add the DropDownList component, and then you will use it to enable Grid filtering and several advanced features.\n\n2. Adding the KendoReact DropDownList\n\nAdding the <a href=\"/kendo-react-ui/components/dropdowns/dropdownlist\">KendoReact DropDownList</a> allows you to display all available categories of products. This is a free React DropDownList component, and you need a license to use its premium filtering and virtualization functionality.\nTo use the component, you must import it and bind it to data.\n\nof this  DropDownList  in production—no sign-up or license required. It is part of KendoReact, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components. To test-drive premium functionality such as virtualization, <a href=\"https://www.telerik.com/try/kendo-react-ui\" rel=\"noopener\" target=\"_blank\">start a 30-day trial</a>.\nThe following example demonstrates the DropDownList in action.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "MultiSelect": "## API Reference Item\n- Name: MultiSelectProps.style\n- Type: Property\n- Summary: The styles that are applied to the MultiSelect.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { MultiSelect } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    const data = ['Item 1', 'Item 2', 'Item 3'];\n    return <MultiSelect data={data} style={{ border: '2px solid blue' }} />;\n}\n\n```\n\n\nChip\nA component allowing users to enter information, make selections, filter content, or trigger actions.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/chiplist\">\n\n\n\nChipList\nA component allowing you to maintain a set of selected chips.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/floatingactionbutton\">\n\nfloatingactionbutton\n\nThe  Filtering feature of MultiSelect   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\" To enable the filtering functionality of the MultiSelect, set the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/multiselectprops#filterable\">filterable</a> property to true.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "FloatingActionButton": "## API Reference Item\n- Name: FloatingActionButtonProps.overlayStyle\n- Type: Property\n- Summary: Sets styles for the overlay element when the \n`modal`\n prop is enabled.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { FloatingActionButton } from '@progress/kendo-react-buttons';\nimport { plusIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <FloatingActionButton\n            modal={true}\n            overlayStyle={{ backgroundColor: 'red' }}\n            svgIcon={plusIcon}\n            items={[\n                { text: 'Item 1', svgIcon: plusIcon },\n                { text: 'Item 2', svgIcon: plusIcon },\n                { text: 'Item 3', svgIcon: plusIcon }\n            ]}\n        />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: FloatingActionButtonProps.onKeyDown\n- Type: Property\n- Summary: Fires when a key is pressed while the Floating Action Button is focused.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { FloatingActionButton, FloatingActionButtonEvent } from '@progress/kendo-react-buttons';\nimport { pencilIcon, plusIcon, trashIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    const handleKeyDown = (_event: FloatingActionButtonEvent) => {\n        console.log('Key pressed!');\n    };\n\n    return (\n        <FloatingActionButton\n            items={[\n                { text: 'Edit', svgIcon: pencilIcon },\n                { text: 'Delete', svgIcon: trashIcon }\n            ]}\n            onKeyDown={handleKeyDown}\n            svgIcon={plusIcon}\n        />\n    );\n}\n\n```\n\n\n## Additional Context\n### FloatingActionButtonEvent (generic)\nname: FloatingActionButtonEvent\nfullName: FloatingActionButtonEvent\nsummary: Represents the return type of the FloatingActionButton events.\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - nativeEvent\n  - syntheticEvent\n  - target\n\n\n## API Reference Item\n- Name: FloatingActionButtonProps.alignOffset\n- Type: Property\n- Summary: Specifies the horizontal and vertical offset of the FloatingActionButton.\r\n[see example]({% slug positioning_floatingactionbutton %}).\r\n\r\nNormally, the floating button positions next to the boundaries of its container with a default offset of \n`16px`\n.\r\n\r\nPositive offsets move floating buttons, which are in a corner, further from that corner. Buttons, which are\r\nnot in a corner, can be moved along the container's boundary or towards the center of the container.\r\n\r\nA negative offset can force a button to overflow the boundaries of its container.\r\n\r\nThe possible keys are:\r\n* \n`x`\n — Sets the horizontal offset of the FloatingActionButton.\r\n* \n`y`\n — Sets the vertical offset of the FloatingActionButton.\n- Syntax: \n\n- Return Type: name: FloatingActionButtonAlignOffset\nfullName: FloatingActionButtonAlignOffset\nsummary: \"Specifies the horizontal and vertical offset applied to the Floating Action Button.\\r\\n\\r\\nNormally, the floating button is positioned next to the boundaries of its container with a default offset of \\n`16px`\\n.\\r\\n\\r\\nPositive offsets move floating buttons, which are in a corner, further from that corner. Buttons, which are\\r\\nnot in a corner, can be moved along the container's boundary or towards the center of the container.\\r\\n\\r\\nA negative offset can be used to force a button to overflow the boundaries of its container.\"\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - x\n  - 'y'\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { FloatingActionButton } from '@progress/kendo-react-buttons';\nimport { plusIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return <FloatingActionButton alignOffset={{ x: 40, y: 40 }} svgIcon={plusIcon} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: FloatingActionButtonProps.modal\n- Type: Property\n- Summary: Enables modal behavior by rendering an overlay under the Floating Action Button.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { FloatingActionButton } from '@progress/kendo-react-buttons';\nimport { pencilIcon, plusIcon, trashIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <FloatingActionButton\n            items={[\n                { text: 'Edit', svgIcon: pencilIcon },\n                { text: 'Delete', svgIcon: trashIcon }\n            ]}\n            modal={true}\n            svgIcon={plusIcon}\n        />\n    );\n}\n\n```\n\n\nPositioning\n\nThe FloatingActionButton component provides options for positioning in relation to the page or React Component.\nThe position can be either fixed with regard to the browser viewport, or absolute with regard to a relative container.\n\nAlignment\n\nThe FloatingActionButton allows you to set horizontal and vertical alignment in relation to the container.\nThe available <a href=\"/kendo-react-ui-develop/components/buttons/api/floatingactionbuttonprops#align\">align</a> keys are:\n\nhorizontal— Defines the possible horizontal alignment of the Floating Action Button..\n\nKeyboard Navigation\n\nFor more details about the FloatingActionButton component's keyboard navigation, refer to the article on <a href=\"/kendo-react-ui-develop/components/buttons/floatingactionbutton/keyboard-navigation\">keyboard navigation in the FloatingActionButton component</a>. Out of the box, the Kendo React FloatingActionButton provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "SVGIcon": "The SvgIcon allows you to use predefined theme colors through the themeColor property. Any custom color could by applied via <a href=\"/kendo-react-ui/components/common/api/svgiconprops#style\">style</a> property.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nSize\n\nThe Icon allows you to specify its <a href=\"/kendo-react-ui/components/common/api/iconsize\">size</a>. The available values are:\n\n<a href=\"/kendo-react-ui/components/common/svgicon/appearance\">Appearance</a>—You can quickly style the SvgIcon by choosing from the predefined styling options.\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled Mode</a>—You can remove all default visual effects and style the KendoReact SvgIcon in a way that matches your application design perfectly.\n\n<a href=\"/kendo-react-ui/components/common/svgicon/appearance\">Appearance</a>—You can quickly style the SvgIcon by choosing from the predefined styling options.\n<a href=\"/kendo-react-ui/components/styling/unstyled\">Unstyled Mode</a>—You can remove all default visual effects and style the KendoReact SvgIcon in a way that matches your application design perfectly.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n"
}