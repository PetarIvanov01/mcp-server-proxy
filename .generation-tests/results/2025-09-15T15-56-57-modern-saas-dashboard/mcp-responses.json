{
  "TextArea": "## API Reference Item\n- Name: TextArea\n- Type: Function\n- Summary: Represents the [KendoReact TextArea component]({% slug overview_textarea %}).\r\n\r\n\r\nAccepts properties of type [TextAreaProps]({% slug api_inputs_textareaprops %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextArea } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <TextArea />\n    );\n}\n\n```\n\n\n## Additional Context\n### TextAreaProps (children)\nname: TextAreaProps\nfullName: TextAreaProps\nsummary: >-\n  Represents the props of the [KendoReact TextArea component]({% slug\n  overview_textarea %}).\nsyntax: {}\npackageName: '@progress/kendo-react-inputs'\nmembers:\n  - about\n  - accessKey\n  - aria-activedescendant\n  - aria-atomic\n  - aria-autocomplete\n  - aria-braillelabel\n  - aria-brailleroledescription\n  - aria-busy\n  - aria-checked\n  - aria-colcount\n  - aria-colindex\n  - aria-colindextext\n  - aria-colspan\n  - aria-controls\n  - aria-current\n  - aria-describedby\n  - aria-description\n  - aria-details\n  - aria-disabled\n  - aria-dropeffect\n  - aria-errormessage\n  - aria-expanded\n  - aria-flowto\n  - aria-grabbed\n  - aria-haspopup\n  - aria-hidden\n  - aria-invalid\n  - aria-keyshortcuts\n  - aria-label\n  - aria-labelledby\n  - aria-level\n  - aria-live\n  - aria-modal\n  - aria-multiline\n  - aria-multiselectable\n  - aria-orientation\n  - aria-owns\n  - aria-placeholder\n  - aria-posinset\n  - aria-pressed\n  - aria-readonly\n  - aria-relevant\n  - aria-required\n  - aria-roledescription\n  - aria-rowcount\n  - aria-rowindex\n  - aria-rowindextext\n  - aria-rowspan\n  - aria-selected\n  - aria-setsize\n  - aria-sort\n  - aria-valuemax\n  - aria-valuemin\n  - aria-valuenow\n  - aria-valuetext\n  - ariaDescribedBy\n  - ariaLabelledBy\n  - autoCapitalize\n  - autoComplete\n  - autoCorrect\n  - autoFocus\n  - autoSave\n  - autoSize\n  - children\n  - className\n  - color\n  - cols\n  - content\n  - contentEditable\n  - contextMenu\n  - dangerouslySetInnerHTML\n  - datatype\n  - defaultChecked\n  - defaultValue\n  - dir\n  - dirName\n  - disabled\n  - draggable\n  - enterKeyHint\n  - exportparts\n  - fillMode\n  - form\n  - hidden\n  - id\n  - inert\n  - inlist\n  - inputAttributes\n  - inputMode\n  - is\n  - itemID\n  - itemProp\n  - itemRef\n  - itemScope\n  - itemType\n  - lang\n  - maxLength\n  - minLength\n  - name\n  - nonce\n  - onAbort\n  - onAbortCapture\n  - onAnimationEnd\n  - onAnimationEndCapture\n  - onAnimationIteration\n  - onAnimationIterationCapture\n  - onAnimationStart\n  - onAnimationStartCapture\n  - onAuxClick\n  - onAuxClickCapture\n  - onBeforeInput\n  - onBeforeInputCapture\n  - onBeforeToggle\n  - onBlur\n  - onBlurCapture\n  - onCanPlay\n  - onCanPlayCapture\n  - onCanPlayThrough\n  - onCanPlayThroughCapture\n  - onChange\n  - onChangeCapture\n  - onClick\n  - onClickCapture\n  - onCompositionEnd\n  - onCompositionEndCapture\n  - onCompositionStart\n  - onCompositionStartCapture\n  - onCompositionUpdate\n  - onCompositionUpdateCapture\n  - onContextMenu\n  - onContextMenuCapture\n  - onCopy\n  - onCopyCapture\n  - onCut\n  - onCutCapture\n  - onDoubleClick\n  - onDoubleClickCapture\n  - onDrag\n  - onDragCapture\n  - onDragEnd\n  - onDragEndCapture\n  - onDragEnter\n  - onDragEnterCapture\n  - onDragExit\n  - onDragExitCapture\n  - onDragLeave\n  - onDragLeaveCapture\n  - onDragOver\n  - onDragOverCapture\n  - onDragStart\n  - onDragStartCapture\n  - onDrop\n  - onDropCapture\n  - onDurationChange\n  - onDurationChangeCapture\n  - onEmptied\n  - onEmptiedCapture\n  - onEncrypted\n  - onEncryptedCapture\n  - onEnded\n  - onEndedCapture\n  - onError\n  - onErrorCapture\n  - onFocus\n  - onFocusCapture\n  - onGotPointerCapture\n  - onGotPointerCaptureCapture\n  - onInput\n  - onInputCapture\n  - onInvalid\n  - onInvalidCapture\n  - onKeyDown\n  - onKeyDownCapture\n  - onKeyPress\n  - onKeyPressCapture\n  - onKeyUp\n  - onKeyUpCapture\n  - onLoad\n  - onLoadCapture\n  - onLoadStart\n  - onLoadStartCapture\n  - onLoadedData\n  - onLoadedDataCapture\n  - onLoadedMetadata\n  - onLoadedMetadataCapture\n  - onLostPointerCapture\n  - onLostPointerCaptureCapture\n  - onMouseDown\n  - onMouseDownCapture\n  - onMouseEnter\n  - onMouseLeave\n  - onMouseMove\n  - onMouseMoveCapture\n  - onMouseOut\n  - onMouseOutCapture\n  - onMouseOver\n  - onMouseOverCapture\n  - onMouseUp\n  - onMouseUpCapture\n  - onPaste\n  - onPasteCapture\n  - onPause\n  - onPauseCapture\n  - onPlay\n  - onPlayCapture\n  - onPlaying\n  - onPlayingCapture\n  - onPointerCancel\n  - onPointerCancelCapture\n  - onPointerDown\n  - onPointerDownCapture\n  - onPointerEnter\n  - onPointerLeave\n  - onPointerMove\n  - onPointerMoveCapture\n  - onPointerOut\n  - onPointerOutCapture\n  - onPointerOver\n  - onPointerOverCapture\n  - onPointerUp\n  - onPointerUpCapture\n  - onProgress\n  - onProgressCapture\n  - onRateChange\n  - onRateChangeCapture\n  - onReset\n  - onResetCapture\n  - onScroll\n  - onScrollCapture\n  - onScrollEnd\n  - onScrollEndCapture\n  - onSeeked\n  - onSeekedCapture\n  - onSeeking\n  - onSeekingCapture\n  - onSelect\n  - onSelectCapture\n  - onStalled\n  - onStalledCapture\n  - onSubmit\n  - onSubmitCapture\n  - onSuspend\n  - onSuspendCapture\n  - onTimeUpdate\n  - onTimeUpdateCapture\n  - onToggle\n  - onTouchCancel\n  - onTouchCancelCapture\n  - onTouchEnd\n  - onTouchEndCapture\n  - onTouchMove\n  - onTouchMoveCapture\n  - onTouchStart\n  - onTouchStartCapture\n  - onTransitionCancel\n  - onTransitionCancelCapture\n  - onTransitionEnd\n  - onTransitionEndCapture\n  - onTransitionRun\n  - onTransitionRunCapture\n  - onTransitionStart\n  - onTransitionStartCapture\n  - onVolumeChange\n  - onVolumeChangeCapture\n  - onWaiting\n  - onWaitingCapture\n  - onWheel\n  - onWheelCapture\n  - part\n  - placeholder\n  - popover\n  - popoverTarget\n  - popoverTargetAction\n  - prefix\n  - property\n  - radioGroup\n  - readOnly\n  - rel\n  - required\n  - resizable\n  - resource\n  - results\n  - rev\n  - role\n  - rounded\n  - rows\n  - security\n  - size\n  - slot\n  - spellCheck\n  - style\n  - suffix\n  - suppressContentEditableWarning\n  - suppressHydrationWarning\n  - tabIndex\n  - title\n  - translate\n  - typeof\n  - unselectable\n  - valid\n  - validationMessage\n  - validityStyles\n  - value\n  - vocab\n  - wrap\n\n---\n### TextArea.TextArea.props (children)\nname: props\nfullName: TextArea.TextArea.props\nsyntax:\n  return:\n    type: TextAreaProps | RefAttributes\n\n\nCharacters Counter\n\nThe following example demonstrates the TextArea component with a characters counter in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n<a href=\"/kendo-react-ui-develop/components/inputs/textarea/default_state\">Default state</a>—The TextArea allows you to set its default value.\n<a href=\"/kendo-react-ui-develop/components/inputs/textarea/sizing\">Sizing</a>—You can configure the auto size option and the initial height of the TextArea.\n<a href=\"/kendo-react-ui-develop/components/inputs/textarea/counter\">Characters Counter</a>—The TextArea component is easily customizable and allows you to integrate it with a character counter. You can resize the TextArea.\nYou can use the character counter to count and limit the input characters.\nYou can use the TextArea with form validation.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "AppBar": "## API Reference Item\n- Name: AppBar\n- Type: Function\n- Summary: Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### AppBarProps (children)\nname: AppBarProps\nfullName: AppBarProps\nsummary: \"Represents the props of the [KendoReact AppBar component]({% slug overview_appbar %}).\\r\\nUsed to display information, actions, branding titles and additional navigation on the current screen.\"\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - id\n  - position\n  - positionMode\n  - style\n  - themeColor\n\n---\n### AppBar.AppBar.props (children)\nname: props\nfullName: AppBar.AppBar.props\nsyntax:\n  return:\n    type: AppBarProps | RefAttributes\n\n\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/appearance\">Appearance</a>—The AppBar comes with predefined option that allow you to set its theme color.\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/responsive-design\">Responsive Design</a>—The responsive layout adapts to any device and screen size.\n\nResponsive Design\n\nIn general, responsive layouts adjust and adapt to any device screen size, whether it is a desktop, tablet, or a mobile phone.\nThe following example demonstrates how the AppBar adjusts for different screen sizes by using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\" rel=\"noopener\" target=\"_blank\">CSS media queries</a>. Resize the screen to observe the responsive layout.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/layout/appbar\">\n\n\n\nAppBar\nA component for displaying information, actions, branding titles and additional navigation on the current screen.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/layout/avatar\">\n\n\n\nAvatar\nA component for displaying images, icons, or other entities.\n</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "DataGrid": "## API Reference Item\n- Name: Grid\n- Type: Function\n- Summary: Represents the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nconst App = () => {\n    return <Grid />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### GridProps (children)\nname: GridProps\nfullName: GridProps\nsummary: >-\n  Represents the props of the [KendoReact Grid component]({% slug overview_grid\n  %}).\nsyntax: {}\npackageName: '@progress/kendo-react-grid'\nmembers:\n  - adaptive\n  - adaptiveTitle\n  - autoProcessData\n  - cells\n  - children\n  - className\n  - clipboard\n  - columnMenu\n  - columnMenuIcon\n  - columnVirtualization\n  - columnsState\n  - contextMenu\n  - data\n  - dataItemKey\n  - defaultColumnsState\n  - defaultDetailExpand\n  - defaultEdit\n  - defaultFilter\n  - defaultGroup\n  - defaultGroupExpand\n  - defaultSearch\n  - defaultSelect\n  - defaultSkip\n  - defaultSort\n  - defaultTake\n  - detail\n  - detailExpand\n  - detailRowHeight\n  - edit\n  - editDialog\n  - editable\n  - filter\n  - filterOperators\n  - filterable\n  - fixedScroll\n  - group\n  - groupExpand\n  - groupable\n  - highlight\n  - id\n  - language\n  - loader\n  - locale\n  - lockGroups\n  - navigatable\n  - onClipboard\n  - onColumnReorder\n  - onColumnResize\n  - onColumnsStateChange\n  - onContextMenu\n  - onContextMenuItemClick\n  - onDataStateChange\n  - onDetailExpandChange\n  - onEditChange\n  - onFilterChange\n  - onGroupChange\n  - onGroupExpandChange\n  - onHeaderSelectionChange\n  - onHighlightChange\n  - onItemChange\n  - onKeyDown\n  - onNavigationAction\n  - onPageChange\n  - onPdfExport\n  - onRowClick\n  - onRowDoubleClick\n  - onRowReorder\n  - onScroll\n  - onSearchChange\n  - onSelectionChange\n  - onSortChange\n  - pageSize\n  - pageable\n  - pager\n  - pdf\n  - reorderable\n  - resizable\n  - rowHeight\n  - rowReorderable\n  - rowSpannable\n  - rows\n  - scrollable\n  - search\n  - searchFields\n  - select\n  - selectable\n  - showLoader\n  - size\n  - skip\n  - sort\n  - sortable\n  - style\n  - take\n  - total\n\n---\n### Grid.Grid.props (children)\nname: props\nfullName: Grid.Grid.props\nsyntax:\n  return:\n    type: GridProps | RefAttributes\n\n\n## API Reference Item\n- Name: GridColumnProps.locked\n- Type: Property\n- Summary: Defines if the column is locked (frozen or sticky).\r\nLocked columns are the columns that are visible at all times while the user scrolls the component horizontally.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridColumn field=\"id\" title=\"Id\" width={50} locked={true} />\n            <GridColumn field=\"name\" title=\"Name\" width={500} />\n            <GridColumn field=\"description\" title=\"Description\" width={500} />\n        </Grid>\n    );\n}\n\n```\n\n\nfilter operationsMulti-column filteringSortingSingle column sortingMulti-column sortingPagingNoCustom PagerVirtualizationNumeric pager with drop-downColumn virtualizationRow virtualizationExportingCVS exportPDF exportExcel exportLoadingLoading indicatorGroupingNoPersisting group stateAggregates for grouped dataLocked groupColumn groups the same as multi-column headersRow groupsMaster-detail gridNoMaster-detail gridOtherPrintAccessibilityKeyboard navigationLocalization and globalizationStylingAdaptivenessClipboard copyClipboard pasteChart integrationContext menuOData supportDataSource  Toolbar ToolsServer and hybrid data operationsNoSupport for server templatesServer actionsServer-side renderingServer-side filteringServer-side selectionServer-side filtering\n\nKendoReact Data Grid Custom ColumnPremium\n\nThe <a href=\"/kendo-react-ui-develop/components/grid\">React Grid</a> can be enhanced with custom AI-powered custom columns that provide personalized insights, summaries, and explanations about individual Grid rows.\nBy integrating the Inline AI Prompt component with <a href=\"/kendo-react-ui-develop/components/grid/cells\">Custom cells</a>, you can create an interactive experience where users can ask natural language questions about specific data records and receive contextual AI-generated responses.\n\nKey Features\n\nThe KendoReact Server Data Grid offers an extensive and continuously expanding set of built-in features that isn't limited by the list in this section. What makes the Grid truly exceptional is its flexibility—it allows you to seamlessly blend both server-side and client-side operations, adapting to your application's unique requirements.\n\nData Operations\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Grid": "## API Reference Item\n- Name: GridProps.editable\n- Type: Property\n- Summary: The Grid editable settings.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridItemChangeEvent } from '@progress/kendo-react-grid';\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    const [data, setData] = React.useState<Array<{ id: number; name: string }>>(sampleData);\n\n    const handleItemChange = (event: GridItemChangeEvent) => {\n        const inEditID = event.dataItem.id;\n        const field = event.field || '';\n        const newData = data.map((item) => (item.id === inEditID ? { ...item, [field]: event.value } : item));\n        setData(newData);\n    };\n\n    return (\n        <Grid\n            data={data}\n            autoProcessData={true}\n            editable={true}\n            defaultEdit={{\n                1: true\n            }}\n            dataItemKey=\"id\"\n            onItemChange={handleItemChange}\n        >\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps.autoProcessData\n- Type: Property\n- Summary: Enables data-processing inside the GridComponent based on its state.\r\nProvides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridColumnProps.editable\n- Type: Property\n- Summary: Defines whether the column is editable ([more information and examples]({% slug editing_inline_grid %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn, GridItemChangeEvent } from '@progress/kendo-react-grid';\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    const [data, setData] = React.useState<Array<{ id: number; name: string }>>(sampleData);\n\n    const handleItemChange = (event: GridItemChangeEvent) => {\n        const inEditID = event.dataItem.id;\n        const field = event.field || '';\n        const newData = data.map((item) => (item.id === inEditID ? { ...item, [field]: event.value } : item));\n        setData(newData);\n    };\n\n    return (\n        <Grid\n            data={data}\n            autoProcessData={true}\n            editable={true}\n            defaultEdit={{\n                1: true\n            }}\n            dataItemKey=\"id\"\n            onItemChange={handleItemChange}\n        >\n            <GridColumn field=\"id\" title=\"Id\" editable={false} />\n            <GridColumn field=\"name\" title=\"Name\" editable={true} />\n            <GridColumn field=\"description\" title=\"Description\" editable={true} />\n        </Grid>\n    );\n}\n\n```\n\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "DateRangePicker": "## API Reference Item\n- Name: DateRangePickerProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact DateRangePicker component]({% slug overview_daterangepicker %}).\n- Syntax: \n\n## Additional Context\n### DateRangePickerProps.adaptive (children)\nname: adaptive\nfullName: DateRangePickerProps.adaptive\nsummary: \"/**\\r\\n* Enable adaptive popup rendering based on viewport width.\\r\\n*\\r\\n*\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: DateRangePickerProps.adaptiveSubtitle\nsummary: \"/**\\r\\n* Set the subtitle text in the adaptive popup (action sheet).\\r\\n* Use only when \\n`adaptive`\\n is \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: DateRangePickerProps.adaptiveTitle\nsummary: \"/**\\r\\n* Set the title text in the adaptive popup (action sheet).\\r\\n* Use only when \\n`adaptive`\\n is \\n`true`\\n.\\r\\n* If not set, it matches the \\n`label`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.allowReverse (children)\nname: allowReverse\nfullName: DateRangePickerProps.allowReverse\nsummary: \"If \\n`allowReverse`\\n is set to \\n`true`\\n, the component skips the validation of whether the \\n`from`\\n value is after the \\n`to`\\n value ([see example]({% slug reverse_daterangepicker %})).\\r\\n\\r\\n> If the [\\n`calendarSettings`\\n](#toc-calendarsettings) property is set, its \\n`allowReverse`\\n will take precedence.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: DateRangePickerProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: DateRangePickerProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.autoFocus (children)\nname: autoFocus\nfullName: DateRangePickerProps.autoFocus\nsummary: \"/**\\r\\n* Apply the \\n`autoFocus`\\n attribute to the first input.\\r\\n*\\r\\n*\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.calendar (children)\nname: calendar\nfullName: DateRangePickerProps.calendar\nsummary: >-\n  Enables the customization or the override of the default Calendar which is\n  rendered by the DateRangePicker.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.calendarSettings (children)\nname: calendarSettings\nfullName: DateRangePickerProps.calendarSettings\nsummary: >-\n  Represents the additional props that can be passed to the\n  [MultiViewCalendar]({% slug overview_multiviewcalendar %}) inside the\n  DateRangePicker ([see example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-the-multiviewcalendar)).\nsyntax:\n  return:\n    type: DateRangePickerCalendarSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.className (children)\nname: className\nfullName: DateRangePickerProps.className\nsummary: |-\n  Sets the \n  `className`\n   of the DateRangePicker.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.clearButton (children)\nname: clearButton\nfullName: DateRangePickerProps.clearButton\nsummary: \"/**\\r\\n* Show a clear button for start and end inputs. Clicking resets the range and fires \\n`onChange`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.defaultShow (children)\nname: defaultShow\nfullName: DateRangePickerProps.defaultShow\nsummary: >-\n  Sets the default state of the DateRangePicker upon render ([see example]({%\n  slug default_value_daterangepicker %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.defaultValue (children)\nname: defaultValue\nfullName: DateRangePickerProps.defaultValue\nsummary: |-\n  Set the initial \n  `value`\n   when uncontrolled ([see example]({% slug default_value_daterangepicker %})).\nsyntax:\n  return:\n    type: SelectionRange\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.disabled (children)\nname: disabled\nfullName: DateRangePickerProps.disabled\nsummary: >-\n  Determines whether the DateRangePicker is disabled ([see example]({% slug\n  disabled_daterangepicker %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.endDateInput (children)\nname: endDateInput\nfullName: DateRangePickerProps.endDateInput\nsummary: \"Enables the customization or the override of the default end DateInput which is rendered by the DateRangePicker\\r\\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-calendar)).\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.endDateInputSettings (children)\nname: endDateInputSettings\nfullName: DateRangePickerProps.endDateInputSettings\nsummary: >-\n  Represents the additional props that can be passed to the end-date\n  [DateInput]({% slug overview_dateinput %}) inside the DateRangePicker ([see\n  example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-dateinputs)).\nsyntax:\n  return:\n    type: DateRangePickerDateInputSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.focusedDate (children)\nname: focusedDate\nfullName: DateRangePickerProps.focusedDate\nsummary: >-\n  Specifies the focused date of the DateRangePicker ([see example]({% slug\n  focused_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.format (children)\nname: format\nfullName: DateRangePickerProps.format\nsummary: \"Specifies the \\n`date`\\n format which is used for formatting the value of the DateInput ([see example]({% slug formats_dateinput %})).\\r\\n\\r\\n> If [\\n`startDateInputSettings`\\n](#toc-startdateinputsettings) or [\\n`endDateInputSettings`\\n](#toc-enddateinputsettings) are set, their \\n`format`\\n will take precedence.\"\nsyntax:\n  return:\n    type: string | DateFormatOptions\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.id (children)\nname: id\nfullName: DateRangePickerProps.id\nsummary: |-\n  Specifies the \n  `id`\n   of the DateRangePicker.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.inputAttributes (children)\nname: inputAttributes\nfullName: DateRangePickerProps.inputAttributes\nsummary: \"Pass HTML attributes to the internal focusable input elements.\\r\\nAttributes required for core logic are ignored.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.max (children)\nname: max\nfullName: DateRangePickerProps.max\nsummary: >-\n  Specifies the greatest valid date ([see example]({% slug\n  dateranges_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.min (children)\nname: min\nfullName: DateRangePickerProps.min\nsummary: >-\n  Specifies the smallest valid date ([see example]({% slug\n  dateranges_daterangepicker %})).\nsyntax:\n  return:\n    type: Date\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onBlur (children)\nname: onBlur\nfullName: DateRangePickerProps.onBlur\nsummary: Fires each time any of the DateRangePicker elements gets blurred.\nsyntax:\n  return:\n    type: '(event: FocusEvent<any, Element>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onCancel (children)\nname: onCancel\nfullName: DateRangePickerProps.onCancel\nsummary: >-\n  Fires when the popup is about to cancel in ([adaptive mode]({% slug\n  adaptive_rendering_daterangepicker %})).\nsyntax:\n  return:\n    type: '(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onChange (children)\nname: onChange\nfullName: DateRangePickerProps.onChange\nsummary: >-\n  Fires when the user changes part of the range ([see example]({% slug\n  controlled_daterangepicker %}#toc-controlling-the-value)).\nsyntax:\n  return:\n    type: '(event: DateRangePickerChangeEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onClose (children)\nname: onClose\nfullName: DateRangePickerProps.onClose\nsummary: Fires when the popup closes.\nsyntax:\n  return:\n    type: '(event: DateRangePickerCloseEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onFocus (children)\nname: onFocus\nfullName: DateRangePickerProps.onFocus\nsummary: Fires each time the user focuses any of the DateRangePicker elements.\nsyntax:\n  return:\n    type: '(event: FocusEvent<any, Element>) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.onOpen (children)\nname: onOpen\nfullName: DateRangePickerProps.onOpen\nsummary: Fires when the popup opens.\nsyntax:\n  return:\n    type: '(event: DateRangePickerOpenEvent) => void'\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.popupSettings (children)\nname: popupSettings\nfullName: DateRangePickerProps.popupSettings\nsummary: >-\n  Represents the additional props that will be passed to the [Popup]({% slug\n  overview_popup %}) inside the DateRangePicker ([see example]({% slug\n  child_settings_daterangepicker %}#toc-configuring-the-popup)).\nsyntax:\n  return:\n    type: DateRangePickerPopupSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.show (children)\nname: show\nfullName: DateRangePickerProps.show\nsummary: >-\n  Specifies if the calendar will be displayed ([see example]({% slug\n  controlled_daterangepicker %}#toc-controlling-the-popup-state)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.startDateInput (children)\nname: startDateInput\nfullName: DateRangePickerProps.startDateInput\nsummary: \"Enables the customization or the override of the default start DateInput which is rendered by the DateRangePicker\\r\\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-dateinputs)).\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.startDateInputSettings (children)\nname: startDateInputSettings\nfullName: DateRangePickerProps.startDateInputSettings\nsummary: >-\n  Represents the additional props that will be passed to the start-date\n  [DateInput]({% slug overview_dateinput %}) inside the DateRangePicker ([see\n  example]({% slug child_settings_daterangepicker\n  %}#toc-configuring-dateinputs)).\nsyntax:\n  return:\n    type: DateRangePickerDateInputSettings\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.style (children)\nname: style\nfullName: DateRangePickerProps.style\nsummary: >-\n  Specifies the additional styles that will be applied to the wrapping\n  DateRangePicker element.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.swapButton (children)\nname: swapButton\nfullName: DateRangePickerProps.swapButton\nsummary: \"Determines whether the DateRangePicker will display a **Swap Value** button ([see example]({% slug reverse_daterangepicker %}#toc-swapping-start-and-end-dates-in-ranges)).\\r\\n\\r\\n> The DateRangePicker will display the swap button only if the [\\n`allowReverse`\\n](#toc-allowreverse) property is also set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.tabIndex (children)\nname: tabIndex\nfullName: DateRangePickerProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   property of the DatePicker.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.valid (children)\nname: valid\nfullName: DateRangePickerProps.valid\nsummary: \"Override the validity state.\\r\\nIf \\n`valid`\\n is set, ignore \\n`required`\\n.\\r\\nPart of [FormComponentProps]({% slug api_common_formcomponentprops %}).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dateinputs'\n\n---\n### DateRangePickerProps.value (children)\nname: value\nfullName: DateRangePickerProps.value\nsummary: \"Set the selected range ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).\\r\\nProvide \\n`start`\\n and \\n`end`\\n valid \\n`Date`\\n values or \\n`null`\\n.\"\nsyntax:\n  return:\n    type: SelectionRange\npackageName: '@progress/kendo-react-dateinputs'\n\n\n## API Reference Item\n- Name: DateRangePickerProps.popup\n- Type: Property\n- Summary: Enables the customization or the override of the default Popup which is rendered by the DateRangePicker\r\n([see example]({% slug custom_rendering_daterangepicker %}#toc-customizing-the-popup)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DateRangePicker } from '@progress/kendo-react-dateinputs';\nimport { Popup } from '@progress/kendo-react-popup';\n\nexport default function App() {\n    return (\n        <DateRangePicker\n            popup={(props) => (\n                <Popup {...props}>\n                    <div>Custom Popup Content</div>\n                </Popup>\n            )}\n        />\n    );\n}\n\n```\n\n\n<a href=\"/kendo-react-ui-develop/components/dateinputs/daterangepicker/custom-rendering\">Custom rendering</a>—The DateRangePicker allows you to customize its rendering and transform the appearance of its child components like start and end date, calendar, and popup.\n<a href=\"/kendo-react-ui-develop/components/dateinputs/daterangepicker/child-settings\">Configuration of child components</a>—The DateRangePicker provides options for customizing its child components.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Badge": "## API Reference Item\n- Name: Badge\n- Type: Function\n- Summary: Represents the [KendoReact Badge component]({% slug overview_badge %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge themeColor=\"info\" />\n        </Button>\n    );\n}\n\n```\n\n\n## Additional Context\n### BadgeProps (children)\nname: BadgeProps\nfullName: BadgeProps\nsummary: >-\n  Represents the props of the [KendoReact Badge component]({% slug\n  overview_badge %}).\nsyntax: {}\npackageName: '@progress/kendo-react-indicators'\nmembers:\n  - align\n  - children\n  - className\n  - cutoutBorder\n  - dir\n  - fillMode\n  - position\n  - rounded\n  - size\n  - style\n  - themeColor\n\n---\n### Badge.Badge.props (children)\nname: props\nfullName: Badge.Badge.props\nsyntax:\n  return:\n    type: BadgeProps | RefAttributes\n\n\n## API Reference Item\n- Name: BadgeProps.themeColor\n- Type: Property\n- Summary: Specifies the theme color of the Badge.\r\n\r\nThe possible values are:\r\n* \n`base`\n &mdash;Applies coloring based on the \n`base`\n theme color.\r\n* \n`primary`\n (Default)&mdash;Applies coloring based on primary theme color.\r\n* \n`secondary`\n&mdash;Applies coloring based on secondary theme color.\r\n* \n`tertiary`\n&mdash; Applies coloring based on tertiary theme color.\r\n* \n`inherit`\n&mdash; Applies inherited coloring value.\r\n* \n`info`\n&mdash;Applies coloring based on info theme color.\r\n* \n`success`\n&mdash; Applies coloring based on success theme color.\r\n* \n`warning`\n&mdash; Applies coloring based on warning theme color.\r\n* \n`error`\n&mdash; Applies coloring based on error theme color.\r\n* \n`dark`\n&mdash; Applies coloring based on dark theme color.\r\n* \n`light`\n&mdash; Applies coloring based on light theme color.\r\n* \n`inverse`\n&mdash; Applies coloring based on inverse theme color.\r\n* null&mdash;Does not set a themeColor \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Badge } from '@progress/kendo-react-indicators';\nimport { Button } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Button>\n            New Updates\n            <Badge themeColor=\"success\">Success</Badge>\n        </Button>\n    );\n}\n\n```\n\n\nKendoReact enables you to create a beautiful and fast Grid with live data. The Grid Live Data App uses one of the most powerful KendoReact components such as the <a href=\"/kendo-react-ui/components/charts\">KendoReact Chart</a>, <a href=\"/kendo-react-ui/components/indicators/badge\">React Badge</a>, <a href=\"/kendo-react-ui/components/grid\">Grid</a>, and more.\n\nAppearance\n\nThe Badge component provides many predefined appearance options such as different shapes, sizes, theme colors and optional cutout borders.\n\nTheme Color\n\nThe Badge allows you to specify predefined theme colors.\nThe available <a href=\"/kendo-react-ui-develop/components/indicators/api/badgeprops#themecolor\">themeColor</a> values are:\n\nThe Badge component is a visual indicator for UI elements. It enables you to easily show statuses, notifications, and short messages in your app. Badges provide additional contextual information for other elements on the page.\nThe KendoReact Badge is distributed through the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-indicators\" rel=\"noopener\" target=\"_blank\">kendo-react-indicators NPM package</a>.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ListView": "## API Reference Item\n- Name: ListViewProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact ListView component]({% slug overview_listview %}).\n- Syntax: \n\n## Additional Context\n### ListViewProps.className (children)\nname: className\nfullName: ListViewProps.className\nsummary: Sets a class of the ListView DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.data (children)\nname: data\nfullName: ListViewProps.data\nsummary: Sets the data of the ListView.\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.footer (children)\nname: footer\nfullName: ListViewProps.footer\nsummary: Defines the component that renders for the ListView footer.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.header (children)\nname: header\nfullName: ListViewProps.header\nsummary: Defines the component that renders for the ListView header.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.item (children)\nname: item\nfullName: ListViewProps.item\nsummary: Defines the component that renders for each item of the data collection.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.navigatable (children)\nname: navigatable\nfullName: ListViewProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the ListView.\\r\\nBy default, navigation is disabled.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.onScroll (children)\nname: onScroll\nfullName: ListViewProps.onScroll\nsummary: Fires when the ListView has been scrolled.\nsyntax:\n  return:\n    type: '(event: ListViewEvent) => void'\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.style (children)\nname: style\nfullName: ListViewProps.style\nsummary: Sets styles to the ListView container.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-listview'\n\n\nStyle the Components\n\n\nAre you looking for guidance around how to create visually appealing and consistent user interfaces with Telerik UI components? Check out the <a href=\"https://www.telerik.com/design-system/docs/\" rel=\"noopener\" target=\"_blank\">Progress Design System</a>.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Avatar": "## API Reference Item\n- Name: Avatar\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### Avatar.Avatar.props (children)\nname: props\nfullName: Avatar.Avatar.props\nsyntax:\n  return:\n    type: AvatarProps\n\n\n## API Reference Item\n- Name: AvatarProps.size\n- Type: Property\n- Summary: Configures the \n`size`\n of the Avatar.\r\n\r\nThe available options are:\r\n- small\r\n- medium\r\n- large\r\n- null&mdash;Does not set a size \n`className`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Avatar } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    return <Avatar size=\"large\">AB</Avatar>;\n}\n\n```\n\n\nTo specify a custom avatar size, use the <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#style\">style</a>property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFill Mode\n\nThe Avatar enables you to set styling options and create solid or outline avatars by setting the fillMode property.\nThe available <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#fillmode\">fillMode</a> values are:\n\nsolid (Default)\noutline\n\nKey Features\n\n\n<a href=\"/kendo-react-ui-develop/components/layout/avatar/appearance\">Appearance</a>—The Avatar comes with predefined option that allow you to set its shape, type, color, size, border, and fill. The Avatar component is typically used to display images, icons, or initials representing people or other entities.\nThis   is   a  Free React  AvatarThe KendoReact  Avatar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Avatar in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "DropDownList": "## API Reference Item\n- Name: DropDownListProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact DropDownList component]({% slug overview_dropdownlist %}).\n- Syntax: \n\n## Additional Context\n### DropDownListProps.accessKey (children)\nname: accessKey\nfullName: DropDownListProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptive (children)\nname: adaptive\nfullName: DropDownListProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: DropDownListProps.adaptiveSubtitle\nsummary: \"Specifies the text that is rendered as subtitle in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: DropDownListProps.adaptiveTitle\nsummary: \"Specifies the text that is rendered as title in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\\r\\nIf not provided, the title will be the same as the label.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: DropDownListProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaLabel (children)\nname: ariaLabel\nfullName: DropDownListProps.ariaLabel\nsummary: |-\n  The accessible label of the component. By default is set to value of \n  `label`\n   prop.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: DropDownListProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.className (children)\nname: className\nfullName: DropDownListProps.className\nsummary: Sets additional classes to the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.data (children)\nname: data\nfullName: DropDownListProps.data\nsummary: >-\n  Sets the data of the DropDownList ([see example]({% slug binding_dropdownlist\n  %})).\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.dataItemKey (children)\nname: dataItemKey\nfullName: DropDownListProps.dataItemKey\nsummary: |-\n  Sets the key for comparing the data items of the DropDownList. If \n  `dataItemKey`\n   is not set, the DropDownList compares the items by reference ([see example]({% slug binding_dropdownlist %}#toc-datasets-of-objects)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.defaultItem (children)\nname: defaultItem\nfullName: DropDownListProps.defaultItem\nsummary: >-\n  Sets the text of the default empty item. The type of the defined value has to\n  match the data type.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.defaultValue (children)\nname: defaultValue\nfullName: DropDownListProps.defaultValue\nsummary: >-\n  Sets the default value of the DropDownList ([see example]({% slug\n  defaultitem_dropdownlist %})). Similar to the native \n\n  `select`\n   HTML element.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.delay (children)\nname: delay\nfullName: DropDownListProps.delay\nsummary: >-\n  Sets the delay before an item search is performed. When filtration is\n  disabled, use this option.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.dir (children)\nname: dir\nfullName: DropDownListProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.disabled (children)\nname: disabled\nfullName: DropDownListProps.disabled\nsummary: Sets the disabled state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.fillMode (children)\nname: fillMode\nfullName: DropDownListProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- flat\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.filter (children)\nname: filter\nfullName: DropDownListProps.filter\nsummary: >-\n  Sets the value of filtering input. Useful for making the filtering input a\n  [controlled\n  component](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.filterable (children)\nname: filterable\nfullName: DropDownListProps.filterable\nsummary: >-\n  Enables the filtering functionality of the DropDownList ([more information and\n  examples]({% slug filtering_dropdownlist %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.focusedItemIndex (children)\nname: focusedItemIndex\nfullName: DropDownListProps.focusedItemIndex\nsummary: \"If set, the DropDownList will use it to get the focused item index.\\r\\n\\r\\nDefault functionality returns the first item which starts with the input text.\"\nsyntax:\n  return:\n    type: '(data: any, inputText: string, textField?: string) => number'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.footer (children)\nname: footer\nfullName: DropDownListProps.footer\nsummary: >-\n  Sets the footer component of the DropDownList ([see example]({% slug\n  customrendering_dropdownlist %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupField (children)\nname: groupField\nfullName: DropDownListProps.groupField\nsummary: >-\n  Sets the data item field that represents the start of a group. Applicable to\n  objects data.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupHeaderItemRender (children)\nname: groupHeaderItemRender\nfullName: DropDownListProps.groupHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's group header item is about to be rendered. Used to\n  override the default appearance of the group's headers.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListGroupItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.groupStickyHeaderItemRender (children)\nname: groupStickyHeaderItemRender\nfullName: DropDownListProps.groupStickyHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's sticky group header item is about to be rendered.\n  Used to override the default appearance of the sticky group header of the\n  component.\nsyntax:\n  return:\n    type: >-\n      (div: ReactElement<HTMLDivElement, string | JSXElementConstructor<any>>,\n      stickyHeaderProps: GroupStickyHeaderProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.header (children)\nname: header\nfullName: DropDownListProps.header\nsummary: >-\n  Sets the header component of the DropDownList ([see example]({% slug\n  customrendering_dropdownlist %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.iconClassName (children)\nname: iconClassName\nfullName: DropDownListProps.iconClassName\nsummary: |-\n  Sets CSS classes to the expand \n  `icon`\n   DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.id (children)\nname: id\nfullName: DropDownListProps.id\nsummary: Specifies the id of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.ignoreCase (children)\nname: ignoreCase\nfullName: DropDownListProps.ignoreCase\nsummary: >-\n  Enables a case-insensitive search. When filtering is disabled, use this\n  option.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.itemRender (children)\nname: itemRender\nfullName: DropDownListProps.itemRender\nsummary: >-\n  Fires when a DropDownList item is about to be rendered ([see example]({% slug\n  customrendering_dropdownlist %}#toc-items)). Used to override the default\n  appearance of the list items.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.label (children)\nname: label\nfullName: DropDownListProps.label\nsummary: Renders a floating label for the DropDownList.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.leftRightKeysNavigation (children)\nname: leftRightKeysNavigation\nfullName: DropDownListProps.leftRightKeysNavigation\nsummary: \"If set to \\n`false`\\n, the DropDownList will not navigate over its data through left and right keys.\\r\\nUseful when the DropDownList is placed inside a toolbar which needs to handle left and right keys.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.listNoDataRender (children)\nname: listNoDataRender\nfullName: DropDownListProps.listNoDataRender\nsummary: >-\n  Fires when the element which indicates no data in the popup is about to be\n  rendered ([see example]({% slug customrendering_dropdownlist %}#toc-no-data)).\n  Used to override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLDivElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.loading (children)\nname: loading\nfullName: DropDownListProps.loading\nsummary: Sets the loading state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.name (children)\nname: name\nfullName: DropDownListProps.name\nsummary: |-\n  Specifies the \n  `name`\n   property of the \n  `select`\n   DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onBlur (children)\nname: onBlur\nfullName: DropDownListProps.onBlur\nsummary: Fires each time the DropDownList gets blurred.\nsyntax:\n  return:\n    type: '(event: DropDownListBlurEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onChange (children)\nname: onChange\nfullName: DropDownListProps.onChange\nsummary: >-\n  Fires each time the value of the DropDownList is about to change ([see\n  examples]({% slug binding_dropdownlist %})).\nsyntax:\n  return:\n    type: '(event: DropDownListChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onClose (children)\nname: onClose\nfullName: DropDownListProps.onClose\nsummary: Fires each time the popup of the DropDownList is about to close.\nsyntax:\n  return:\n    type: '(event: DropDownListCloseEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onFilterChange (children)\nname: onFilterChange\nfullName: DropDownListProps.onFilterChange\nsummary: >-\n  Fires each time the user types in the filter input. You can filter the source\n  based on the passed filtration value.\nsyntax:\n  return:\n    type: '(event: DropDownListFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onFocus (children)\nname: onFocus\nfullName: DropDownListProps.onFocus\nsummary: Fires each time the user focuses the DropDownList.\nsyntax:\n  return:\n    type: '(event: DropDownListFocusEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onOpen (children)\nname: onOpen\nfullName: DropDownListProps.onOpen\nsummary: Fires each time the popup of the DropDownList is about to open.\nsyntax:\n  return:\n    type: '(event: DropDownListOpenEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.onPageChange (children)\nname: onPageChange\nfullName: DropDownListProps.onPageChange\nsummary: >-\n  Fires when both the virtual scrolling of the DropDownList is enabled and the\n  component requires data for another page ([see example]({% slug\n  virtualization_dropdownlist %})).\nsyntax:\n  return:\n    type: '(event: DropDownListPageChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.opened (children)\nname: opened\nfullName: DropDownListProps.opened\nsummary: Sets the opened and closed state of the DropDownList.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.popupSettings (children)\nname: popupSettings\nfullName: DropDownListProps.popupSettings\nsummary: Configures the popup of the DropDownList.\nsyntax:\n  return:\n    type: DropDownsPopupSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.required (children)\nname: required\nfullName: DropDownListProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.rounded (children)\nname: rounded\nfullName: DropDownListProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.size (children)\nname: size\nfullName: DropDownListProps.size\nsummary: \"Configures the \\n`size`\\n of the DropDownList.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.skipDisabledItems (children)\nname: skipDisabledItems\nfullName: DropDownListProps.skipDisabledItems\nsummary: >-\n  Defines if DropDownList's disabled items will be skipped or focused when\n  navigating through the list of items using a keyboard. Defaults to \n\n  `true`\n\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.style (children)\nname: style\nfullName: DropDownListProps.style\nsummary: The styles that are applied to the DropDownList.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.svgIcon (children)\nname: svgIcon\nfullName: DropDownListProps.svgIcon\nsummary: Sets the specified SVG icon.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.tabIndex (children)\nname: tabIndex\nfullName: DropDownListProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the DropDownList.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.textField (children)\nname: textField\nfullName: DropDownListProps.textField\nsummary: >-\n  Sets the data item field that represents the item text ([see example]({% slug\n  defaultitem_dropdownlist %})). If the data contains only primitive values, do\n  not define it.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.title (children)\nname: title\nfullName: DropDownListProps.title\nsummary: Sets the title attribute to the DropDownList DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valid (children)\nname: valid\nfullName: DropDownListProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.validationMessage (children)\nname: validationMessage\nfullName: DropDownListProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.validityStyles (children)\nname: validityStyles\nfullName: DropDownListProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### DropDownListProps.value (children)\nname: value\nfullName: DropDownListProps.value\nsummary: >-\n  Sets the value of the DropDownList ([see example]({% slug binding_dropdownlist\n  %})). It can either be of the primitive (string, numbers) or of the complex\n  (objects) type.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valueMap (children)\nname: valueMap\nfullName: DropDownListProps.valueMap\nsummary: >-\n  Represents a callback function, which returns the value for submitting. The\n  returned value will be rendered in an \n\n  `option`\n   of a hidden [\n  `select`\n\n  ](https://react.dev/reference/react-dom/components/select) element.\nsyntax:\n  return:\n    type: '(value: any) => any'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.valueRender (children)\nname: valueRender\nfullName: DropDownListProps.valueRender\nsummary: >-\n  Fires when the element which renders the value is about to be rendered ([see\n  example]({% slug customrendering_dropdownlist %}#toc-values)). Used to\n  override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLSpanElement, string |\n      JSXElementConstructor<any>>, value: any) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### DropDownListProps.virtual (children)\nname: virtual\nfullName: DropDownListProps.virtual\nsummary: >-\n  Configures the virtual scrolling of the DropDownList ([see example]({% slug\n  virtualization_dropdownlist %})).\nsyntax:\n  return:\n    type: VirtualizationSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n\nKendoReact DropDownList Overview of this  DropDownList  in production—no sign-up or license required. It is part of KendoReact, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components. To test-drive premium functionality such as virtualization, <a href=\"https://www.telerik.com/try/kendo-react-ui\" rel=\"noopener\" target=\"_blank\">start a 30-day trial</a>.\nThe following example demonstrates the DropDownList in action.\n\nThe following example demonstrates the AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, and MultiSelect components in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nWhat are the KendoReact Dropdowns?\n\nThe Dropdowns are native KendoReact components built specifically for the React ecosystem and distributed via npm.\n\n<a href=\"https://www.npmjs.com/package/@progress/kendo-react-dropdowns\" rel=\"noopener\" target=\"_blank\">@progress/kendo-react-dropdowns</a>\n\nPackage Contents\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Dialog": "## API Reference Item\n- Name: DialogProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Dialog component]({% slug overview_dialog %}).\n- Syntax: \n\n## Additional Context\n### DialogProps.appendTo (children)\nname: appendTo\nfullName: DialogProps.appendTo\nsummary: \"Defines the container to which the Dialog will be appended.\\r\\n* If set to \\n`null`\\n the Dialog will be rendered without React Portal.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.autoFocus (children)\nname: autoFocus\nfullName: DialogProps.autoFocus\nsummary: Set the focus the Dialog container automatically when mounted.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.autoFocusedElement (children)\nname: autoFocusedElement\nfullName: DialogProps.autoFocusedElement\nsummary: >-\n  Specifies the query selector used to set the initial focus ([see examples]({%\n  slug initial_focus_dialogs %})).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.className (children)\nname: className\nfullName: DialogProps.className\nsummary: Sets a class of the Dialog DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.closeIcon (children)\nname: closeIcon\nfullName: DialogProps.closeIcon\nsummary: >-\n  Specifies whether a close button should be rendered at the top corner of the\n  dialog.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.contentStyle (children)\nname: contentStyle\nfullName: DialogProps.contentStyle\nsummary: The styles that are applied to the content of the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.dir (children)\nname: dir\nfullName: DialogProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.height (children)\nname: height\nfullName: DialogProps.height\nsummary: >-\n  Specifies the height of the Dialog ([see example]({% slug dimensions_dialog\n  %})).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.id (children)\nname: id\nfullName: DialogProps.id\nsummary: |-\n  Sets the \n  `aria-labelledby`\n   value.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.minWidth (children)\nname: minWidth\nfullName: DialogProps.minWidth\nsummary: Specifies the minimum width of the Dialog.\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.modal (children)\nname: modal\nfullName: DialogProps.modal\nsummary: >-\n  Specifies if the Dialog will be modal by rendering an overlay under the\n  component.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.onClose (children)\nname: onClose\nfullName: DialogProps.onClose\nsummary: |-\n  Fires when the **Close** button in the title is clicked or when the \n  `Esc`\n   button is pressed.\nsyntax:\n  return:\n    type: '(event: DialogCloseEvent) => void'\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.overlayStyle (children)\nname: overlayStyle\nfullName: DialogProps.overlayStyle\nsummary: |-\n  Set styles to the Dialog overlay element rendered when the \n  `modal`\n   prop is enabled.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.style (children)\nname: style\nfullName: DialogProps.style\nsummary: The styles that are applied to the Dialog.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.themeColor (children)\nname: themeColor\nfullName: DialogProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Dialog.\\r\\n\\r\\nThe available options are:\\r\\n- primary\\r\\n- dark\\r\\n- light\"\nsyntax:\n  return:\n    type: '\"primary\" | \"dark\" | \"light\"'\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.title (children)\nname: title\nfullName: DialogProps.title\nsummary: >-\n  Sets the title of the Dialog ([see example]({% slug title_dialog %})). If you\n  do not specify the \n\n  `title`\n\n  , the Dialog does not render a **Close** button.\nsyntax:\n  return:\n    type: string | ReactElement\npackageName: '@progress/kendo-react-dialogs'\n\n---\n### DialogProps.width (children)\nname: width\nfullName: DialogProps.width\nsummary: >-\n  Specifies the width of the Dialog ([see example]({% slug dimensions_dialog\n  %})).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-dialogs'\n\n\nKey Features\n\nThe KendoReact Dialogs provide the following key features. Note that this is not an exhaustive list.\n\nHighly customizable and easy to style appearance\n\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a> Fully customizable <a href=\"/kendo-react-ui/components/dialogs/dialog/action-buttons\">Action Buttons</a>\nFlexible <a href=\"/kendo-react-ui/components/dialogs/dialog/title\">Title customization</a>\nAdjustable dimensions via the width and height properties\n<a href=\"/kendo-react-ui/components/dialogs/globalization\">Globalization</a>\nOut-of-the-box accessibility and keyboard navigation\n\nHow Do the KendoReact Dialogs Work?\n\n<a href=\"/kendo-react-ui-develop/components/dialogs/dialog/title\">Title</a>—You can customize the title of the Dialog.\n<a href=\"/kendo-react-ui-develop/components/dialogs/dialog/visibility\">Visibility</a>—You can control when the Dialog is visible on the page.\n<a href=\"/kendo-react-ui-develop/components/dialogs/dialog/action-buttons\">Action buttons</a>—You can add different actions buttons to the Dialog.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Breadcrumb": "## API Reference Item\n- Name: Breadcrumb\n- Type: Function\n- Summary: Represents the Breadcrumb component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Breadcrumb } from '@progress/kendo-react-layout';\n\nexport default function App() {\n    const data = [\n        { id: '1', text: 'Home' },\n        { id: '2', text: 'Products' },\n        { id: '3', text: 'Electronics' }\n    ];\n    return <Breadcrumb data={data} />;\n}\n\n```\n\n\n## Additional Context\n### BreadcrumbProps (children)\nname: BreadcrumbProps\nfullName: BreadcrumbProps\nsummary: >-\n  Represents the props of [Breadcrumb]({% slug api_layout_breadcrumb %})\n  component.\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - ariaLabel\n  - breadcrumbDelimiter\n  - breadcrumbLink\n  - breadcrumbListItem\n  - breadcrumbOrderedList\n  - className\n  - data\n  - dir\n  - disabled\n  - iconClassField\n  - iconField\n  - id\n  - onItemSelect\n  - onKeyDown\n  - size\n  - style\n  - tabIndex\n  - textField\n  - valueField\n\n---\n### Breadcrumb.Breadcrumb.props (children)\nname: props\nfullName: Breadcrumb.Breadcrumb.props\nsyntax:\n  return:\n    type: BreadcrumbProps | RefAttributes\n\n\nOut of the box, the Kendo React Breadcrumb provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\nItem Appearance\n\nThe Breadcrumb component provides different options for customizing the appearance of the items.\n\nSize\n\nThe KendoReact Breadcrumb allows selecting a predefined size option that changes its size.\nTo change the default size of the Breadcrumb, set its <a href=\"/kendo-react-ui-develop/components/layout/api/breadcrumbprops#size\">size</a> property which will change the padding of its elements. The available size options are:\n\nThe Breadcrumb component allows you to navigate within a folder structure or web page. It provides an easy way to navigate backwards by one or multiple steps. The Breadcrumb is always used in controlled mode.\nThis   is   a  Free React  BreadcrumbThe KendoReact  Breadcrumb   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Chart": "## API Reference Item\n- Name: Chart\n- Type: Class\n- Summary: Represents the [KendoReact Chart component]({% slug overview_chart_charts %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n### Example 2\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n### Example 3\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n### Example 4\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n### Example 5\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n### Example 6\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n### Example 7\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n### Example 8\n```\nimport * as React from 'react';\nimport { Chart, ChartSeries, ChartSeriesItem } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Chart>\n            <ChartSeries>\n                <ChartSeriesItem type=\"line\" data={[1, 2, 3]} />\n            </ChartSeries>\n        </Chart>\n    );\n}\n\n```\n\n\n## Additional Context\n### Chart._baseChart (children)\nname: _baseChart\nfullName: Chart._baseChart\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### Chart.getTarget (children)\nname: getTarget\nfullName: Chart.getTarget\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### Chart.element (children)\nname: element\nfullName: Chart.element\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\n\n---\n### Chart.surface (children)\nname: surface\nfullName: Chart.surface\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\n\n---\n### ChartProps (children)\nname: ChartProps\nfullName: ChartProps\nsummary: Represents the props of the KendoReact Chart component.\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\nmembers:\n  - axisDefaults\n  - className\n  - dir\n  - donutCenterRender\n  - drilldownState\n  - onAxisLabelClick\n  - onDrag\n  - onDragEnd\n  - onDragStart\n  - onDrilldown\n  - onLegendItemClick\n  - onLegendItemHover\n  - onNoteClick\n  - onNoteHover\n  - onPlotAreaClick\n  - onPlotAreaHover\n  - onRefresh\n  - onRender\n  - onSelect\n  - onSelectEnd\n  - onSelectStart\n  - onSeriesClick\n  - onSeriesHover\n  - onZoom\n  - onZoomEnd\n  - onZoomStart\n  - paneDefaults\n  - panes\n  - pannable\n  - renderAs\n  - seriesColors\n  - seriesDefaults\n  - style\n  - transitions\n  - zoomable\n\n\n## API Reference Item\n- Name: ChartTooltipProps.shared\n- Type: Property\n- Summary: If set to \n`true`\n, the Chart displays a single tooltip for every category ([see example]({% slug tooltips_chart_charts %}#toc-shared-tooltip)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport { Chart, ChartSeries, ChartSeriesItem, ChartTooltip } from '@progress/kendo-react-charts';\n\nconst series = [2, 4, 6, 2];\n\nconst App = () => (\n    <Chart>\n        <ChartTooltip shared={true} />\n        <ChartSeries>\n            <ChartSeriesItem type=\"bar\" data={series} />\n            <ChartSeriesItem type=\"bar\" data={series} />\n        </ChartSeries>\n    </Chart>\n);\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: ChartZoomable\n- Type: Function\n- Summary: Represents the KendoReact ChartZoomable component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport {\n    Chart,\n    ChartSeries,\n    ChartSeriesItem,\n    ChartCategoryAxis,\n    ChartCategoryAxisTitle,\n    ChartCategoryAxisItem,\n    ChartZoomable\n} from '@progress/kendo-react-charts';\n\nconst series = [2, 4, 6, 2];\nconst categories = ['Q1', 'Q2', 'Q3', 'Q4'];\nconst App = () => (\n    <Chart>\n        <ChartZoomable mousewheel={true} />\n        <ChartCategoryAxis>\n            <ChartCategoryAxisItem categories={categories}>\n                <ChartCategoryAxisTitle text=\"Months\" />\n            </ChartCategoryAxisItem>\n        </ChartCategoryAxis>\n        <ChartSeries>\n            <ChartSeriesItem type=\"bar\" gap={2} spacing={0.25} data={series} />\n        </ChartSeries>\n    </Chart>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ChartZoomable.ChartZoomable.props (children)\nname: props\nfullName: ChartZoomable.ChartZoomable.props\nsyntax:\n  return:\n    type: ChartZoomableProps\n\n\n## API Reference Item\n- Name: ChartAxisDefaultsCrosshair\n- Type: Function\n- Summary: Represents the KendoReact ChartAxisDefaultsCrosshair component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\n\nimport {\n    Chart,\n    ChartAxisDefaults,\n    ChartAxisDefaultsCrosshair,\n    ChartCategoryAxis,\n    ChartCategoryAxisItem,\n    ChartSeries,\n    ChartSeriesItem\n} from '@progress/kendo-react-charts';\n\nconst data = [1, 2, 3, 5];\n\nconst categories = ['Q1', 'Q2', 'Q3', 'Q4'];\n\nconst ChartContainer = () => (\n    <Chart>\n        <ChartAxisDefaults>\n            <ChartAxisDefaultsCrosshair visible={true} />\n        </ChartAxisDefaults>\n        <ChartCategoryAxis>\n            <ChartCategoryAxisItem categories={categories} />\n        </ChartCategoryAxis>\n        <ChartSeries>\n            <ChartSeriesItem data={data} name=\"Fibonacci\" />\n        </ChartSeries>\n    </Chart>\n);\n\nexport default ChartContainer;\n\n```\n\n\n## Additional Context\n### ChartAxisDefaultsCrosshair.ChartAxisDefaultsCrosshair.props (children)\nname: props\nfullName: ChartAxisDefaultsCrosshair.ChartAxisDefaultsCrosshair.props\nsyntax:\n  return:\n    type: ChartAxisDefaultsCrosshairProps\n\n\nThe KendoReact Chart renders a wide range of high-quality data visualizations including panning and zooming, export and styling options.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Drawer": "## API Reference Item\n- Name: Drawer\n- Type: Function\n- Summary: Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### DrawerProps (children)\nname: DrawerProps\nfullName: DrawerProps\nsummary: >-\n  The properties of the [KendoReact Drawer component]({% slug overview_drawer\n  %}).\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - animation\n  - children\n  - className\n  - dir\n  - drawerClassName\n  - expanded\n  - item\n  - items\n  - mini\n  - miniWidth\n  - mode\n  - onOverlayClick\n  - onSelect\n  - position\n  - style\n  - tabIndex\n  - width\n\n---\n### Drawer.Drawer.props (children)\nname: props\nfullName: Drawer.Drawer.props\nsyntax:\n  return:\n    type: DrawerProps | RefAttributes\n\n\nPositioning\n\nThe Drawer enables you to specify its position in relation to the page content.\nTo specify the side of the content to which the Drawer will be displayed, use the <a href=\"/kendo-react-ui-develop/components/layout/api/drawerprops#position\">position</a> property.\nThe Drawer provides the following options for positioning:\n\nstart—Positions the Drawer to the left of the content.\nend—Positions the Drawer to the right of the content.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nPositioning\n\nThe Drawer enables you to specify its position in relation to the page content.\nTo specify the side of the content to which the Drawer will be displayed, use the <a href=\"/kendo-react-ui/components/layout/api/drawerprops#position\">position</a> property.\nThe Drawer provides the following options for positioning:\n\nstart—Positions the Drawer to the left of the content.\nend—Positions the Drawer to the right of the content.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe KendoReact Drawer component is a dismissible panel for navigating in responsive web applications.\nIt also enables the user to change the content of a specific section of the page.\nThis   is   a  Free React  DrawerThe KendoReact  Drawer   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "TextBox": "## API Reference Item\n- Name: TextBox\n- Type: Function\n- Summary: Represents the [KendoReact TextBox component]({% slug overview_textbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextBox, TextBoxChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [name, setName] = React.useState<string>('');\n\n    const handleChange = (event: TextBoxChangeEvent) => {\n        setName(event.value as string);\n    };\n\n    return <TextBox value={name} onChange={handleChange} placeholder=\"Enter your name\" />;\n}\n\n```\n\n\n## Additional Context\n### TextBox.TextBox.props (children)\nname: props\nfullName: TextBox.TextBox.props\nsyntax:\n  return:\n    type: TextBoxProps | RefAttributes\n\n\n## API Reference Item\n- Name: TextBoxProps\n- Type: Interface\n- Summary: Represents the properties of the KendoReact [TextBox]({% slug api_inputs_textbox %}) component\n- Syntax: \n\n## Additional Context\n### TextBoxProps.autoFocus (children)\nname: autoFocus\nfullName: TextBoxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the TextBox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.fillMode (children)\nname: fillMode\nfullName: TextBoxProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.inputAttributes (children)\nname: inputAttributes\nfullName: TextBoxProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.onChange (children)\nname: onChange\nfullName: TextBoxProps.onChange\nsummary: |-\n  The \n  `onChange`\n   callback of the \n  `input`\n   element inside the TextBox.\nsyntax:\n  return:\n    type: '(event: TextBoxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.prefix (children)\nname: prefix\nfullName: TextBoxProps.prefix\nsummary: Sets a custom prefix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.rounded (children)\nname: rounded\nfullName: TextBoxProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.size (children)\nname: size\nfullName: TextBoxProps.size\nsummary: \"Configures the \\n`size`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.suffix (children)\nname: suffix\nfullName: TextBoxProps.suffix\nsummary: Sets a custom suffix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.valid (children)\nname: valid\nfullName: TextBoxProps.valid\nsummary: |-\n  Indicates if the component is in \n  `valid`\n   state\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n\nControlled Mode\n\nBy default, the KendoReact TextBox component is in an uncontrolled mode.\n\nControlling the Value\n\n\nUse its <a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#onchange\">onChange</a> event.\n\nThe following example showcases the controlled mode in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nForms Support\n\nThe KendoReact TextBox component can be easily integrated with our <a href=\"/kendo-react-ui-develop/components/form\">KendoReact Form</a>.\nThe form enables you to validate the TextBox and prevent the submission of the forms which are in an invalid state.\nBy utilizing the KendoReact Form component we can take advantage of the <a href=\"/kendo-react-ui-develop/components/form/validation\">Validation</a> functionality and render additional custom component depending on the form's validity state.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nAppearance\n\nThe TextBox provides a predefined set of appearance options.\nApart from the default vision of the TextBox, these alternative styling options enable you to configure each individual aspect of the appearance of a TextBox.\n\n<a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#size\">size</a>\n<a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#rounded\">rounded</a>\n<a href=\"/kendo-react-ui-develop/components/inputs/api/textboxprops#fillmode\">fillMode</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Pager": "Added the new size property that allows you to configure the size of the Pager and supports small, medium, large and not set size (null).\nAdded k-grid-{size} class to the main wrapping element of the component. Necessary to introduce the <a href=\"/kendo-react-ui/components/grid/styling/sizing\">Size options of the Grid</a>. The child elements inherit the k-grid-{size} class.\nAdded k-toolbar-{size} class to the wrapping element of the toolbar.\nAdded a new <div className=\"k-grouping-drop-container\"> wrapper of the groups.\n\nThis section looks at some of the premium Data Grid features. To be able to complete this part of the tutorial, you need a commercial license or an active trial license.\n\nFeatures like sorting, filtering, and paging require you to configure data operations. As the Grid in this tutorial is bound to local (client-side) data, enable <a href=\"/kendo-react-ui/components/grid/data-operations/local-operations\">local data operations</a> by following these steps:\n\n\nEnable each data operation separately in the Grid declaration (pageable={true} and sortable={true}).\n\nThe KendoReact Pager is part of the KendoReact library of React UI components. It is distributed through NPM under the <a href=\"https://www.npmjs.com/package/@progress/kendo-react-data-tools\" rel=\"noopener\" target=\"_blank\">kendo-react-data-tools package</a>.\nYou can configure the Pager by using the following properties:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "ComboBox": "## API Reference Item\n- Name: ComboBoxProps.filterable\n- Type: Property\n- Summary: Enables the filtering functionality of the ComboBox ([more information and examples]({% slug filtering_combobox %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ComboBoxFilterChangeEvent } from '@progress/kendo-react-dropdowns';\nimport { filterBy, FilterDescriptor } from '@progress/kendo-data-query';\n\nconst weather = ['Sunny', 'Cloudy'];\n\nexport default function App() {\n    const [data, setData] = React.useState(weather.slice());\n\n    const filterData = (filter: FilterDescriptor) => {\n        return filterBy(weather, filter);\n    };\n\n    const filterChange = (event: ComboBoxFilterChangeEvent) => {\n        setData(filterData(event.filter));\n    };\n\n    return <ComboBox data={data} label=\"Select weather\" onFilterChange={filterChange} filterable={true} />;\n}\n\n```\n\n\n## API Reference Item\n- Name: ComboBoxProps.virtual\n- Type: Property\n- Summary: Configures the virtual scrolling of the ComboBox ([more information and examples]({% slug virtualization_combobox %})).\n- Syntax: \n\n- Return Type: name: VirtualizationSettings\nfullName: VirtualizationSettings\nsummary: The virtualization settings.\nsyntax: {}\npackageName: '@progress/kendo-react-dropdowns'\nmembers:\n  - pageSize\n  - skip\n  - total\n\n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ComboBox, ComboBoxPageChangeEvent } from '@progress/kendo-react-dropdowns';\n\nconst total = 5000;\nconst pageSize = 18;\nconst allData: { id: number; text: string }[] = [];\n\nfor (let i = 0; i < total; i++) {\n    allData.push({ id: i, text: 'Item ' + i });\n}\n\nexport default function App() {\n    const [state, setState] = React.useState({\n        subsetData: allData.slice(0, pageSize),\n        skip: 0\n    });\n\n    const pageChange = (event: ComboBoxPageChangeEvent) => {\n        const skip = event.page.skip;\n        const take = event.page.take;\n        const newSubsetData = allData.slice(skip, skip + take);\n\n        setState({\n            subsetData: newSubsetData,\n            skip: skip\n        });\n    };\n\n    return (\n        <ComboBox\n            data={state.subsetData}\n            dataItemKey=\"id\"\n            textField=\"text\"\n            virtual={{\n                total: total,\n                pageSize: pageSize,\n                skip: state.skip\n            }}\n            onPageChange={pageChange}\n            popupSettings={{\n                height: '250px'\n            }}\n        />\n    );\n}\n\n```\n\n\nBasic Configuration\n\nThe following example demonstrates how to set the virtualization of the ComboBox.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nVirtualization with Filtering\n\nIf you use virtualization in your project alongside filtering, scrolling will be reset every time the value of the filter input is changed.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nVirtualization with Grouping\n\nThe below example shows how we can use the ComboBox in a scenario with Grouping and Virtualization.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nMinimum Filter Length\n\nThe following example demonstrates how to update the data and open the drop-down list of the ComboBox only after typing a minimum number of characters.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFiltering with Remote Data and Virtualization\n\nThe following example demonstrates how to configure the ComboBox to use remote data along with data caching, virtual scrolling, and filtering.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n<a href=\"/kendo-react-ui-develop/components/dropdowns/combobox/filtering\">Filtering</a>—You can configure the ComboBox to filter the results locally or on the server.\n<a href=\"/kendo-react-ui-develop/components/dropdowns/combobox/grouping\">Grouping</a>—You can display grouped data with visual labels for each group.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Button": "## API Reference Item\n- Name: ButtonProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Button component]({% slug overview_button %}).\r\nExtends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).\n- Syntax: \n\n## Additional Context\n### ButtonProps.endIcon (children)\nname: endIcon\nfullName: ButtonProps.endIcon\nsummary: \"Sets an SVG icon or custom element after the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.fillMode (children)\nname: fillMode\nfullName: ButtonProps.fillMode\nsummary: |-\n  Configures the \n  `fillMode`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\" | \"link\" | \"clear\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.icon (children)\nname: icon\nfullName: ButtonProps.icon\nsummary: >-\n  Defines the name for an existing icon in a KendoReact theme ([see example]({%\n  slug icons_button %})). The icon renders inside the Button by a \n\n  `span.k-icon`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconClass (children)\nname: iconClass\nfullName: ButtonProps.iconClass\nsummary: >-\n  Defines a CSS class — or multiple classes separated by spaces — which apply to\n  a \n\n  `span`\n   element inside the Button ([see example]({% slug icons_button %})). Allows you to use custom icons.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconSize (children)\nname: iconSize\nfullName: ButtonProps.iconSize\nsummary: |-\n  Configures the \n  `size`\n   of the SVG icon that displays inside the Button.\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageAlt (children)\nname: imageAlt\nfullName: ButtonProps.imageAlt\nsummary: >-\n  Defines the alternative text of the image that renders inside the Button\n  component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageUrl (children)\nname: imageUrl\nfullName: ButtonProps.imageUrl\nsummary: |-\n  Defines a URL which is used as an \n  `img`\n   element inside the Button ([see example]({% slug icons_button %})). The URL can be relative or absolute. If relative, it evaluates in relation to the URL of the web page.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.rounded (children)\nname: rounded\nfullName: ButtonProps.rounded\nsummary: |-\n  Configures the \n  `roundness`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.selected (children)\nname: selected\nfullName: ButtonProps.selected\nsummary: Sets the selected state of the Button. You can use this for controlled mode.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.size (children)\nname: size\nfullName: ButtonProps.size\nsummary: |-\n  Configures the \n  `size`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.startIcon (children)\nname: startIcon\nfullName: ButtonProps.startIcon\nsummary: \"Sets an SVG icon or custom element before the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.svgIcon (children)\nname: svgIcon\nfullName: ButtonProps.svgIcon\nsummary: Defines the SVG icon that renders inside the Button component.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.themeColor (children)\nname: themeColor\nfullName: ButtonProps.themeColor\nsummary: |-\n  Configures the \n  `themeColor`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.title (children)\nname: title\nfullName: ButtonProps.title\nsummary: |-\n  Sets the \n  `title`\n   HTML attribute of the Button.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.togglable (children)\nname: togglable\nfullName: ButtonProps.togglable\nsummary: >-\n  Provides visual styling that shows if the Button is selected ([see example]({%\n  slug toggleable_button %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.unstyled (children)\nname: unstyled\nfullName: ButtonProps.unstyled\nsummary: The unstyled option classes.\nsyntax:\n  return:\n    type: ButtonsClassStructure\npackageName: '@progress/kendo-react-buttons'\n\n\n## API Reference Item\n- Name: ButtonProps.disabled\n- Type: Property\n- Summary: Specifies if the Button is disabled ([see example]({% slug disabled_button %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return (\n        <Button disabled={true}>\n            Disabled Button\n        </Button>\n    );\n}\n\nexport default App;\n\n```\n\n\nButton Events\n\nThe KendoReact Button generates a variety of events that you can handle. This allows you to tailor the Button's behavior to your specific requirements.\nThe following example demonstrates basic Button events.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nOut of the box, the Kendo React Button provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\nAdd buttons to your <a href=\"/kendo-react-ui/components/grid\">Grid</a> header or rows.\nUse buttons to submit data with <a href=\"/kendo-react-ui/components/inputs\">Inputs</a>.\nBuild more interactive <a href=\"/kendo-react-ui/components/dialogs\">Dialogs</a> with buttons.\nShow <a href=\"/kendo-react-ui/components/notification\">Notifications</a> when you trigger an action with a button.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Form": "## API Reference Item\n- Name: FormClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Form component]({% slug overview_form %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FieldRenderProps,\n    FormRenderProps,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### FormClassComponent._fields (children)\nname: _fields\nfullName: FormClassComponent._fields\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._key (children)\nname: _key\nfullName: FormClassComponent._key\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._modified (children)\nname: _modified\nfullName: FormClassComponent._modified\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._submitted (children)\nname: _submitted\nfullName: FormClassComponent._submitted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._touched (children)\nname: _touched\nfullName: FormClassComponent._touched\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._unmounted (children)\nname: _unmounted\nfullName: FormClassComponent._unmounted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._validatorsByField (children)\nname: _validatorsByField\nfullName: FormClassComponent._validatorsByField\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._values (children)\nname: _values\nfullName: FormClassComponent._values\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._visited (children)\nname: _visited\nfullName: FormClassComponent._visited\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.licenseMessage (children)\nname: licenseMessage\nfullName: FormClassComponent.licenseMessage\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onChange (children)\nname: onChange\nfullName: FormClassComponent.onChange\nsummary: \"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"\nsyntax:\n  return:\n    type: '(name: string, options: Object) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onReset (children)\nname: onReset\nfullName: FormClassComponent.onReset\nsummary: \"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.showLicenseWatermark (children)\nname: showLicenseWatermark\nfullName: FormClassComponent.showLicenseWatermark\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps (children)\nname: FormProps\nfullName: FormProps\nsummary: Contains the props for the KendoReact Form component.\nsyntax: {}\npackageName: '@progress/kendo-react-form'\nmembers:\n  - ignoreModified\n  - initialValues\n  - onSubmit\n  - onSubmitClick\n  - render\n  - validator\n\n\nWe use form validation to make sure that users provide correct information in terms of format, content length, etc. For example, is the phone number an actual number, did the user put info in all of the required fields, and so on.\n\nHow it Works?\n\nKendoReact supports handling user input in the UI, and displays useful validation messages using the Form, Field, and Error components. Refer to the <a href=\"/kendo-react-ui-develop/components/form/validation\">article on form validation</a> for further details and runnable demos.\n\nField-level Form Validation The <a href=\"/kendo-react-ui-develop/components/form/api/field\">Field</a> component and its <a href=\"/kendo-react-ui-develop/components/form/api/fieldrenderprops\">FieldRenderProps</a> enable you to control when and how validation messages are shown.\n\nError Messages For instant validation, error messages are the best way to alert users that they have made a mistake while filling out a form. Applying only error-specific styles does not convey enough information about what the user should do to provide valid data. Error messages should specify exactly why the user input is not accepted. Error messages for different fields should appear one by one. KendoReact provides an <a href=\"/kendo-react-ui-develop/components/labels/api/error\">Error</a> component for that use. To associate it with the editor for screen readers, set the id property of the component to the ariaDescribedBy property of the editor.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Switch": "## API Reference Item\n- Name: SwitchProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Switch component]({% slug overview_switch %}).\n- Syntax: \n\n## Additional Context\n### SwitchProps.accessKey (children)\nname: accessKey\nfullName: SwitchProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: SwitchProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component.\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: SwitchProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.checked (children)\nname: checked\nfullName: SwitchProps.checked\nsummary: >-\n  Sets the current value of the Switch ([see example]({% slug controlled_switch\n  %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.className (children)\nname: className\nfullName: SwitchProps.className\nsummary: Adds custom CSS classes to the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.defaultChecked (children)\nname: defaultChecked\nfullName: SwitchProps.defaultChecked\nsummary: >-\n  Sets the value of the Switch when it is initially displayed ([see example]({%\n  slug default_state %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.defaultValue (children)\nname: defaultValue\nfullName: SwitchProps.defaultValue\nsummary: Specifies the default value of the Switch.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.dir (children)\nname: dir\nfullName: SwitchProps.dir\nsummary: |-\n  Specifies the \n  `dir`\n   property of the wrapping element of the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.disabled (children)\nname: disabled\nfullName: SwitchProps.disabled\nsummary: |-\n  Disables the Switch when set to \n  `true`\n   ([see example]({% slug disabled_switch %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.id (children)\nname: id\nfullName: SwitchProps.id\nsummary: |-\n  Specifies the \n  `id`\n   of the Switch.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.name (children)\nname: name\nfullName: SwitchProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.offLabel (children)\nname: offLabel\nfullName: SwitchProps.offLabel\nsummary: Sets a custom label for the **Off** state.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onBlur (children)\nname: onBlur\nfullName: SwitchProps.onBlur\nsummary: Fires when the Switch is blurred.\nsyntax:\n  return:\n    type: '(event: FocusEvent<HTMLSpanElement, Element>) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onChange (children)\nname: onChange\nfullName: SwitchProps.onChange\nsummary: Fires when the value of the Switch changes.\nsyntax:\n  return:\n    type: '(event: SwitchChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onFocus (children)\nname: onFocus\nfullName: SwitchProps.onFocus\nsummary: Fires when the Switch is focused.\nsyntax:\n  return:\n    type: '(event: FocusEvent<HTMLSpanElement, Element>) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.onLabel (children)\nname: onLabel\nfullName: SwitchProps.onLabel\nsummary: Sets a custom label for the **On** state.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.required (children)\nname: required\nfullName: SwitchProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.size (children)\nname: size\nfullName: SwitchProps.size\nsummary: \"Configures the \\n`size`\\n of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.tabIndex (children)\nname: tabIndex\nfullName: SwitchProps.tabIndex\nsummary: >-\n  Specifies the [\n\n  `tabIndex`\n\n  ](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)\n  of the component.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.thumbRounded (children)\nname: thumbRounded\nfullName: SwitchProps.thumbRounded\nsummary: \"Configures the \\n`thumbRounded`\\n property of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a thumbRounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.trackRounded (children)\nname: trackRounded\nfullName: SwitchProps.trackRounded\nsummary: \"Configures the \\n`trackRounded`\\n of the Switch.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a trackRounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### SwitchProps.valid (children)\nname: valid\nfullName: SwitchProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.validationMessage (children)\nname: validationMessage\nfullName: SwitchProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.validityStyles (children)\nname: validityStyles\nfullName: SwitchProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### SwitchProps.value (children)\nname: value\nfullName: SwitchProps.value\nsummary: Specifies the value of the Switch.\nsyntax:\n  return:\n    type: null | string | number | boolean | Array<string>\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: SwitchProps.ariaLabel\n- Type: Property\n- Summary: Specifies the accessible label of the Switch.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Switch } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return (\n        <Switch ariaLabel=\"Enable notifications\" />\n    );\n}\n\n```\n\n\nControlled Mode\n\nBy default, the Switch is in an uncontrolled state.\nTo manage the state of the Switch, use its <a href=\"/kendo-react-ui-develop/components/inputs/api/switchprops#checked\">checked</a> property, handle the <a href=\"/kendo-react-ui-develop/components/inputs/api/switchprops#onchange\">onChange</a> event, and pass the new value through the props.\n\nManual Switch Toggle\n\nThe following example demonstrates how to manually toggle the Switch.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nRead-Only Switch\n\nThis   is   a  Free React  SwitchThe KendoReact  Switch   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Switch in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nBy design, the Switch does not render any labels when the component is styled with the KendoReact Bootstrap or Material theme. To change the default setup and achieve any of the additional predefined layouts, refer to the article on <a href=\"https://github.com/telerik/kendo-themes/wiki/Change-the-Switch-Layout\" rel=\"noopener\" target=\"_blank\">changing the Switch layout</a> in the kendo-themes Wiki. For more information, refer to <a href=\"https://github.com/telerik/kendo-themes/issues/567\" rel=\"noopener\" target=\"_blank\">issue\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Toolbar": "## API Reference Item\n- Name: ToolbarProps.className\n- Type: Property\n- Summary: Sets additional classes to the Toolbar.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar, Button, ButtonGroup } from '@progress/kendo-react-buttons';\nimport { boldIcon, italicIcon, underlineIcon } from '@progress/kendo-svg-icons';\n\nconst App = () => {\n    return (\n        <Toolbar className=\"my-custom-toolbar\">\n            <ButtonGroup>\n                <Button className=\"k-toolbar-button\" svgIcon={boldIcon} title=\"Bold\" togglable={true} />\n                <Button className=\"k-toolbar-button\" svgIcon={italicIcon} title=\"Italic\" togglable={true} />\n                <Button className=\"k-toolbar-button\" svgIcon={underlineIcon} title=\"Underline\" togglable={true} />\n            </ButtonGroup>\n        </Toolbar>\n    );\n};\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: Toolbar\n- Type: Function\n- Summary: Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Toolbar>\n            <span>Toolbar content</span>\n        </Toolbar>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### ToolbarProps (children)\nname: ToolbarProps\nfullName: ToolbarProps\nsummary: >-\n  Represents the props of the [KendoReact Toolbar component]({% slug\n  overview_toolbar %}).\nsyntax: {}\npackageName: '@progress/kendo-react-buttons'\nmembers:\n  - ariaLabel\n  - buttonScrollSpeed\n  - children\n  - className\n  - dir\n  - fillMode\n  - id\n  - keyboardNavigation\n  - nextButton\n  - onResize\n  - overflow\n  - prevButton\n  - scrollButtons\n  - scrollButtonsPosition\n  - size\n  - style\n  - tabIndex\n\n---\n### Toolbar.Toolbar.props (children)\nname: props\nfullName: Toolbar.Toolbar.props\nsyntax:\n  return:\n    type: ToolbarProps | RefAttributes\n\n\n## API Reference Item\n- Name: ToolbarProps.overflow\n- Type: Property\n- Summary: Represents the possible overflow mode options of the Toolbar.\r\nApplicable when there is not enough space to render all tools.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button, ButtonGroup, Toolbar } from '@progress/kendo-react-buttons';\n\nexport default function App() {\n    return (\n        <Toolbar overflow=\"scroll\" style={{ width: '300px' }}>\n            <ButtonGroup>\n                <Button>Tool 1</Button>\n                <Button>Tool 2</Button>\n                <Button>Tool 3</Button>\n                <Button>Tool 4</Button>\n                <Button>Tool 5</Button>\n                <Button>Tool 6</Button>\n                <Button>Tool 7</Button>\n                <Button>Tool 8</Button>\n            </ButtonGroup>\n        </Toolbar>\n    );\n}\n\n```\n\n\nOut of the box, the Kendo React ToolBar provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/tools\">Tools</a>—You can include various button types in the Toolbar and create a handy selection of tools.\n<a href=\"/kendo-react-ui-develop/components/buttons/toolbar/adaptive-rendering\">Adaptive Rendering</a>—The ToolBar provides options to hide the tools that do not fit its width in an overflow section or rendering scroll arrows. The Toolbar is part of the <a href=\"/kendo-react-ui-develop/components/buttons\">KendoReact Buttons</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Toolbar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/buttons/get-started\">Getting Started with the KendoReact Buttons</a> guide.\n\nKey Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "NumericTextBox": "## API Reference Item\n- Name: NumericTextBox\n- Type: Function\n- Summary: Represents the [KendoReact NumericTextBox component]({% slug overview_numerictextbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return <NumericTextBox label=\"Select quantity\" name=\"quantity\" />;\n}\n\n```\n\n\n## Additional Context\n### NumericTextBoxProps (children)\nname: NumericTextBoxProps\nfullName: NumericTextBoxProps\nsummary: >-\n  Represents the props of the [KendoReact NumericTextBox component]({% slug\n  overview_numerictextbox %}).\nsyntax: {}\npackageName: '@progress/kendo-react-inputs'\nmembers:\n  - about\n  - accessKey\n  - aria-activedescendant\n  - aria-atomic\n  - aria-autocomplete\n  - aria-braillelabel\n  - aria-brailleroledescription\n  - aria-busy\n  - aria-checked\n  - aria-colcount\n  - aria-colindex\n  - aria-colindextext\n  - aria-colspan\n  - aria-controls\n  - aria-current\n  - aria-describedby\n  - aria-description\n  - aria-details\n  - aria-disabled\n  - aria-dropeffect\n  - aria-errormessage\n  - aria-expanded\n  - aria-flowto\n  - aria-grabbed\n  - aria-haspopup\n  - aria-hidden\n  - aria-invalid\n  - aria-keyshortcuts\n  - aria-label\n  - aria-labelledby\n  - aria-level\n  - aria-live\n  - aria-modal\n  - aria-multiline\n  - aria-multiselectable\n  - aria-orientation\n  - aria-owns\n  - aria-placeholder\n  - aria-posinset\n  - aria-pressed\n  - aria-readonly\n  - aria-relevant\n  - aria-required\n  - aria-roledescription\n  - aria-rowcount\n  - aria-rowindex\n  - aria-rowindextext\n  - aria-rowspan\n  - aria-selected\n  - aria-setsize\n  - aria-sort\n  - aria-valuemax\n  - aria-valuemin\n  - aria-valuenow\n  - aria-valuetext\n  - ariaDescribedBy\n  - ariaLabel\n  - ariaLabelledBy\n  - autoCapitalize\n  - autoCorrect\n  - autoFocus\n  - autoSave\n  - className\n  - color\n  - content\n  - contentEditable\n  - contextMenu\n  - dangerouslySetInnerHTML\n  - datatype\n  - defaultChecked\n  - defaultValue\n  - dir\n  - disabled\n  - draggable\n  - enterKeyHint\n  - exportparts\n  - fillMode\n  - format\n  - hidden\n  - id\n  - inert\n  - inlist\n  - inputAttributes\n  - inputMode\n  - inputStyle\n  - inputType\n  - is\n  - itemID\n  - itemProp\n  - itemRef\n  - itemScope\n  - itemType\n  - label\n  - lang\n  - max\n  - min\n  - name\n  - nonce\n  - onAbort\n  - onAbortCapture\n  - onAnimationEnd\n  - onAnimationEndCapture\n  - onAnimationIteration\n  - onAnimationIterationCapture\n  - onAnimationStart\n  - onAnimationStartCapture\n  - onAuxClick\n  - onAuxClickCapture\n  - onBeforeInput\n  - onBeforeInputCapture\n  - onBeforeToggle\n  - onBlur\n  - onBlurCapture\n  - onCanPlay\n  - onCanPlayCapture\n  - onCanPlayThrough\n  - onCanPlayThroughCapture\n  - onChange\n  - onChangeCapture\n  - onClick\n  - onClickCapture\n  - onCompositionEnd\n  - onCompositionEndCapture\n  - onCompositionStart\n  - onCompositionStartCapture\n  - onCompositionUpdate\n  - onCompositionUpdateCapture\n  - onContextMenu\n  - onContextMenuCapture\n  - onCopy\n  - onCopyCapture\n  - onCut\n  - onCutCapture\n  - onDoubleClick\n  - onDoubleClickCapture\n  - onDrag\n  - onDragCapture\n  - onDragEnd\n  - onDragEndCapture\n  - onDragEnter\n  - onDragEnterCapture\n  - onDragExit\n  - onDragExitCapture\n  - onDragLeave\n  - onDragLeaveCapture\n  - onDragOver\n  - onDragOverCapture\n  - onDragStart\n  - onDragStartCapture\n  - onDrop\n  - onDropCapture\n  - onDurationChange\n  - onDurationChangeCapture\n  - onEmptied\n  - onEmptiedCapture\n  - onEncrypted\n  - onEncryptedCapture\n  - onEnded\n  - onEndedCapture\n  - onError\n  - onErrorCapture\n  - onFocus\n  - onFocusCapture\n  - onGotPointerCapture\n  - onGotPointerCaptureCapture\n  - onInput\n  - onInputCapture\n  - onInvalid\n  - onInvalidCapture\n  - onKeyDown\n  - onKeyDownCapture\n  - onKeyPress\n  - onKeyPressCapture\n  - onKeyUp\n  - onKeyUpCapture\n  - onLoad\n  - onLoadCapture\n  - onLoadStart\n  - onLoadStartCapture\n  - onLoadedData\n  - onLoadedDataCapture\n  - onLoadedMetadata\n  - onLoadedMetadataCapture\n  - onLostPointerCapture\n  - onLostPointerCaptureCapture\n  - onMouseDown\n  - onMouseDownCapture\n  - onMouseEnter\n  - onMouseLeave\n  - onMouseMove\n  - onMouseMoveCapture\n  - onMouseOut\n  - onMouseOutCapture\n  - onMouseOver\n  - onMouseOverCapture\n  - onMouseUp\n  - onMouseUpCapture\n  - onPaste\n  - onPasteCapture\n  - onPause\n  - onPauseCapture\n  - onPlay\n  - onPlayCapture\n  - onPlaying\n  - onPlayingCapture\n  - onPointerCancel\n  - onPointerCancelCapture\n  - onPointerDown\n  - onPointerDownCapture\n  - onPointerEnter\n  - onPointerLeave\n  - onPointerMove\n  - onPointerMoveCapture\n  - onPointerOut\n  - onPointerOutCapture\n  - onPointerOver\n  - onPointerOverCapture\n  - onPointerUp\n  - onPointerUpCapture\n  - onProgress\n  - onProgressCapture\n  - onRateChange\n  - onRateChangeCapture\n  - onReset\n  - onResetCapture\n  - onScroll\n  - onScrollCapture\n  - onScrollEnd\n  - onScrollEndCapture\n  - onSeeked\n  - onSeekedCapture\n  - onSeeking\n  - onSeekingCapture\n  - onSelect\n  - onSelectCapture\n  - onStalled\n  - onStalledCapture\n  - onSubmit\n  - onSubmitCapture\n  - onSuspend\n  - onSuspendCapture\n  - onTimeUpdate\n  - onTimeUpdateCapture\n  - onToggle\n  - onTouchCancel\n  - onTouchCancelCapture\n  - onTouchEnd\n  - onTouchEndCapture\n  - onTouchMove\n  - onTouchMoveCapture\n  - onTouchStart\n  - onTouchStartCapture\n  - onTransitionCancel\n  - onTransitionCancelCapture\n  - onTransitionEnd\n  - onTransitionEndCapture\n  - onTransitionRun\n  - onTransitionRunCapture\n  - onTransitionStart\n  - onTransitionStartCapture\n  - onVolumeChange\n  - onVolumeChangeCapture\n  - onWaiting\n  - onWaitingCapture\n  - onWheel\n  - onWheelCapture\n  - part\n  - placeholder\n  - popover\n  - popoverTarget\n  - popoverTargetAction\n  - prefix\n  - property\n  - radioGroup\n  - rangeOnEnter\n  - readOnly\n  - rel\n  - required\n  - resource\n  - results\n  - rev\n  - role\n  - rounded\n  - security\n  - size\n  - slot\n  - spellCheck\n  - spinners\n  - step\n  - style\n  - suffix\n  - suppressContentEditableWarning\n  - suppressHydrationWarning\n  - tabIndex\n  - title\n  - translate\n  - typeof\n  - unselectable\n  - valid\n  - validationMessage\n  - validityStyles\n  - value\n  - vocab\n  - width\n\n---\n### NumericTextBox.NumericTextBox.props (children)\nname: props\nfullName: NumericTextBox.NumericTextBox.props\nsyntax:\n  return:\n    type: NumericTextBoxProps | RefAttributes\n\n\nSetting Custom Validation Messages\n\nYou can implement custom error messages which will be displayed when the NumericTextBox is in an invalid state and the user tries to submit the form. To render a custom validation message, set the <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextboxprops#validationmessage\">validationMessage</a> prop.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nEnforcing the Validity State The NumericTextBox supports props for setting basic validation requirements—for example, the minimum and maximum value. The <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextboxprops#min\">min</a>, <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextboxprops#max\">max</a>, and <a href=\"/kendo-react-ui-develop/components/inputs/api/numerictextboxprops#required\">required</a> properties enable the user to pre-define minimum requirements which define the validity state of the component and allow a successful form Forms Support\n\nThe NumericTextBox supports a native KendoReact implementation of <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\" rel=\"noopener\" target=\"_blank\">HTML5 form validation</a>.\nThe forms supports enables you to validate input values and prevent the submission of forms which are in an invalid state.\n\nFunctionality and Features\n\n\nSetting the minimum validation requirements\nSetting custom validation messages\nOverriding the validity state\nDisabling the visual representation of the validity state\n\nSetting Validation Requirements\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Loader": "## API Reference Item\n- Name: Loader\n- Type: Function\n- Summary: Represents the [KendoReact Loader component]({% slug overview_loader %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Loader } from '@progress/kendo-react-indicators';\n\nexport default function App() {\n    return (\n        <div className=\"k-d-flex k-justify-content-evenly\">\n            <Loader type=\"pulsing\" />\n            <Loader type=\"infinite-spinner\" />\n            <Loader type=\"converging-spinner\" />\n        </div>\n    );\n}\n\n```\n\n\n## Additional Context\n### LoaderProps (children)\nname: LoaderProps\nfullName: LoaderProps\nsummary: >-\n  Represents the props of the [KendoReact Loader component]({% slug\n  overview_loader %}).\nsyntax: {}\npackageName: '@progress/kendo-react-indicators'\nmembers:\n  - className\n  - size\n  - style\n  - themeColor\n  - type\n\n---\n### Loader.Loader.props (children)\nname: props\nfullName: Loader.Loader.props\nsyntax:\n  return:\n    type: LoaderProps | RefAttributes\n\n\nAdd a Loader to indicate that data is being fetched for a <a href=\"/kendo-react-ui/components/grid\">Grid</a>.\nShow unread notifications with a Badge on an <a href=\"/kendo-react-ui/components/layout/appbar\">AppBar</a> or <a href=\"/kendo-react-ui/components/buttons/button\">Button</a>.\nImprove UX with Skeleton placeholders for a <a href=\"/kendo-react-ui/components/layout/card\">Card</a> with profile details while data loads.\n\nThis   is   a  Free React  LoaderThe KendoReact  Loader   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Loader in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... KendoReact Loader Overview\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "TabStrip": "## API Reference Item\n- Name: TabStripProps.className\n- Type: Property\n- Summary: Specifies the CSS class names of the TabStrip component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TabStrip, TabStripSelectEventArguments, TabStripTab } from '@progress/kendo-react-layout';\n\ninterface Tab {\n    temp: number;\n    city: string;\n    weather: string;\n}\n\nconst items: Tab[] = [\n    {\n        city: 'Paris',\n        temp: 17,\n        weather: 'rainy'\n    },\n    {\n        city: 'New York',\n        temp: 29,\n        weather: 'sunny'\n    }\n];\n\nconst App = () => {\n    const [selected, setSelected] = React.useState<number>(1);\n\n    const handleSelect = (e: TabStripSelectEventArguments) => {\n        setSelected(e.selected);\n    };\n\n    return (\n        <TabStrip className=\"my-custom-class\" selected={selected} onSelect={handleSelect}>\n            {items.map((item, index) => {\n                return (\n                    <TabStripTab title={item.city} key={index}>\n                        <p>{item.temp}°C</p>\n                        Weather in {item.city} is {item.weather}.\n                    </TabStripTab>\n                );\n            })}\n        </TabStrip>\n    );\n};\nexport default App;\n\n```\n\n\n<a href=\"/kendo-react-ui-develop/components/layout/tabstrip/tabs\">Tabs</a>—You can customize the TabStrip tabs by configuring their titles, position, disabled state, and more.\n<a href=\"/kendo-react-ui-develop/components/layout/globalization\">Globalization</a>—The TabStrip has built-in globalization support.\n<a href=\"/kendo-react-ui-develop/components/layout/tabstrip/keyboard-navigation\">Keyboard navigation</a>—The TabStrip component supports various keyboard shortcuts.\n\nKeyboard Navigation\n\nManaging the Focus\n\nFocusable elements in the TabStrip components are:\n\nSelected Tab\nTab Content/Panel\n\nThe tab items focusing mechanism is roving tabindex. Only the active tab should have tabindex=\"0\", the remaining tabs should have tabindex=\"-1\".\n\nKeyboard Shortcuts\n\nConfiguration\n\nThe following example demonstrates how to map a collection to TabStripTab components.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nDynamically Add Tabs\n\nYou can dynamically add tabs by creating a tab collection, pushing new items to it, and mapping the collection to TabStripTab components.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Tooltip": "## API Reference Item\n- Name: TooltipProps.showOption\n- Type: Property\n- Summary: Configures when the Tooltip will be displayed.\r\nThe available options are:\r\n- \n`hover`\n&mdash;Displays the Tooltip when the mouse hovers over the target element (default).\r\n- \n`click`\n&mdash;Displays the Tooltip when the target element is clicked.\r\n- \n`focus`\n&mdash;Displays the Tooltip when the target element is focused.\r\n- \n`keys`\n&mdash;Displays the Tooltip when a specific key is pressed while the target element is focused.\r\n- \n`none`\n&mdash;Disables the Tooltip display.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Tooltip } from '@progress/kendo-react-tooltip';\n\nexport default function App() {\n    return (\n        <Tooltip showOption={{ click: true, hover: false }}>\n            <span title=\"Tooltip content\">Hover or click me</span>\n        </Tooltip>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: Tooltip\n- Type: Class\n- Summary: Represents the [KendoReact Tooltip component]({% slug overview_tooltip %}).\r\n\r\nAccepts properties of type [TooltipProps]({% slug api_tooltip_tooltipprops %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react'\nimport { Tooltip } from '@progress/kendo-react-tooltip'\n\nfunction App() {\n    return (\n        <Tooltip>\n            <button>Hover me</button>\n        </Tooltip>\n    )\n}\n\n\n```\n\n\n## Additional Context\n### Tooltip.calloutClassName (children)\nname: calloutClassName\nfullName: Tooltip.calloutClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.compareTargets (children)\nname: compareTargets\nfullName: Tooltip.compareTargets\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.getCurrentZIndex (children)\nname: getCurrentZIndex\nfullName: Tooltip.getCurrentZIndex\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.getTitle (children)\nname: getTitle\nfullName: Tooltip.getTitle\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleBodyMousemove (children)\nname: handleBodyMousemove\nfullName: Tooltip.handleBodyMousemove\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleEscape (children)\nname: handleEscape\nfullName: Tooltip.handleEscape\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleKeyDown (children)\nname: handleKeyDown\nfullName: Tooltip.handleKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleMouseOut (children)\nname: handleMouseOut\nfullName: Tooltip.handleMouseOut\nsummary: The method is used on the MouseOut event to hide the Tooltip.\nsyntax:\n  return:\n    type: '(event: any) => void'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.handleMouseOver (children)\nname: handleMouseOver\nfullName: Tooltip.handleMouseOver\nsummary: |-\n  Used on the \n  `MouseOver`\n   event to show the Tooltip.\nsyntax:\n  return:\n    type: '(event: any) => void'\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.isVisible (children)\nname: isVisible\nfullName: Tooltip.isVisible\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.left (children)\nname: left\nfullName: Tooltip.left\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.onClose (children)\nname: onClose\nfullName: Tooltip.onClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.onIntervalUpdate (children)\nname: onIntervalUpdate\nfullName: Tooltip.onIntervalUpdate\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.openTimeoutId (children)\nname: openTimeoutId\nfullName: Tooltip.openTimeoutId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.position (children)\nname: position\nfullName: Tooltip.position\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.setUpdateInterval (children)\nname: setUpdateInterval\nfullName: Tooltip.setUpdateInterval\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.showToolTip (children)\nname: showToolTip\nfullName: Tooltip.showToolTip\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.top (children)\nname: top\nfullName: Tooltip.top\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.updateIntervalId (children)\nname: updateIntervalId\nfullName: Tooltip.updateIntervalId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.willOpen (children)\nname: willOpen\nfullName: Tooltip.willOpen\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### Tooltip.defaultProps (children)\nname: defaultProps\nfullName: Tooltip.defaultProps\nsummary: The default properties of the Tooltip component.\nsyntax:\n  return:\n    type: >-\n      { anchorElement: string, openDelay: number, parentTitle: boolean,\n      position: string, showCallout: boolean }\npackageName: '@progress/kendo-react-tooltip'\n\n---\n### TooltipProps (children)\nname: TooltipProps\nfullName: TooltipProps\nsummary: >-\n  Represents the props of the [KendoReact Tooltip component]({% slug\n  overview_tooltip %}).\nsyntax: {}\npackageName: '@progress/kendo-react-tooltip'\nmembers:\n  - anchorElement\n  - appendTo\n  - children\n  - className\n  - content\n  - filter\n  - id\n  - onClose\n  - onOpen\n  - onPosition\n  - open\n  - openDelay\n  - parentTitle\n  - position\n  - setCalloutOnPositionAuto\n  - showCallout\n  - showOption\n  - style\n  - targetElement\n  - tooltipClassName\n  - tooltipStyle\n  - updateInterval\n\n\n<a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/positioning\">Defining the position</a> - By default, the position of the Tooltip is determined by the available space around it. You can also specify other positions.\n<a href=\"/kendo-react-ui-develop/components/tooltip/tooltip/templates\">Setting a content template</a> - The KendoReact Tooltip allow setting a custom rendering for its content.\n\nDate Formatting\n\nDate formatting converts a Date object into a human-readable string by using the specific settings of the locale. For more information on date formatting, refer to the kendo-intl <a href=\"https://github.com/telerik/kendo-intl/blob/develop/docs/date-formatting/index.md\" rel=\"noopener\" target=\"_blank\">Date Formatting section</a>.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nNumber Parsing\n\nTemplates\n\nYou can provide a custom rendering for the content of the Tooltip.\nBy default, the Tooltip shows the title attribute value of the anchor element. To customize the default content, set the <a href=\"/kendo-react-ui-develop/components/tooltip/api/tooltipprops#content\">content</a> property of the Tooltip. content can accept a JSX element or another component and the title property of the anchor element will be received as props.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "StackLayout": "## API Reference Item\n- Name: StackLayout\n- Type: Function\n- Summary: Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\r\nArranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={100}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StackLayoutProps (children)\nname: StackLayoutProps\nfullName: StackLayoutProps\nsummary: >-\n  Represents the props of the [KendoReact StackLayout component]({% slug\n  overview_stacklayout %}).\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - align\n  - children\n  - className\n  - gap\n  - id\n  - orientation\n  - style\n\n---\n### StackLayout.StackLayout.props (children)\nname: props\nfullName: StackLayout.StackLayout.props\nsyntax:\n  return:\n    type: StackLayoutProps | RefAttributes\n\n\n## API Reference Item\n- Name: StackLayoutProps.gap\n- Type: Property\n- Summary: Specifies the gap between the inner elements ([see example]({% slug layout_stacklayout %}#toc-gaps)).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={20}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\nLayout\n\nThe StackLayout component provides options for controlling its appearance.\nTo customize the layout of the StackLayout, use any of the following configuration options:\n\nOrientation\nGaps\nHorizontal alignment\nVertical alignment\nNested StackLayouts\n\nOrientation\n\nTo set the StackLayout orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#orientation\">orientation</a> property.\nBy default, orientation is set to horizontal.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGaps Gaps\n\nTo set the StackLayout gaps, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#gap\">gap</a> property.\nBy default, the StackLayout does not apply a gap.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nHorizontal alignment\n\nTo set the StackLayout horizontal alignment, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#align\">align</a> property. The horizontal key controls the alignment of the inner elements based on the X axis.\nThe available values are:\n\n<a href=\"/kendo-react-ui-develop/components/layout/stacklayout/layout#orientation\">Orientation</a>—The orientation configuration option allows you to choose between the vertical and horizontal positioning.\n<a href=\"/kendo-react-ui-develop/components/layout/stacklayout/layout#gaps\">Gaps</a>—The Gap property allows you to set gaps between the boxes.\n<a href=\"/kendo-react-ui-develop/components/layout/stacklayout/layout#horizontal-alignment\">Horizontal alignment</a>—You can align the StackLayout horizontally.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Sparkline": "## API Reference Item\n- Name: Sparkline\n- Type: Class\n- Summary: The root Sparkline component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Sparkline } from '@progress/kendo-react-charts';\n\nconst App = () => {\n    return <Sparkline data={[1, 4, 6, 8, 2, 5]} />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Sparkline._baseChart (children)\nname: _baseChart\nfullName: Sparkline._baseChart\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### Sparkline.getTarget (children)\nname: getTarget\nfullName: Sparkline.getTarget\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-charts'\n\n---\n### Sparkline.element (children)\nname: element\nfullName: Sparkline.element\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\n\n---\n### Sparkline.surface (children)\nname: surface\nfullName: Sparkline.surface\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\n\n---\n### SparklineProps (children)\nname: SparklineProps\nfullName: SparklineProps\nsummary: Represents the props of the KendoReact Sparkline component.\nsyntax: {}\npackageName: '@progress/kendo-react-charts'\nmembers:\n  - axisDefaults\n  - className\n  - data\n  - dir\n  - onAxisLabelClick\n  - onDrag\n  - onDragEnd\n  - onDragStart\n  - onPlotAreaClick\n  - onPlotAreaHover\n  - onRefresh\n  - onRender\n  - onSelect\n  - onSelectEnd\n  - onSelectStart\n  - onSeriesClick\n  - onSeriesHover\n  - onZoom\n  - onZoomEnd\n  - onZoomStart\n  - paneDefaults\n  - panes\n  - pannable\n  - renderAs\n  - seriesColors\n  - seriesDefaults\n  - style\n  - transitions\n  - type\n  - zoomable\n\n\n## API Reference Item\n- Name: AxisLine.dashType\n- Type: Property\n- Summary: The dash type of the line.\n- Syntax: \n\n- Return Type: name: DashType\nfullName: DashType\nsummary: The dash type of a line.\nsyntax:\n  return:\n    type: >-\n      \"dash\" | \"dashDot\" | \"dot\" | \"longDash\" | \"longDashDot\" | \"longDashDotDot\"\n      | \"solid\"\npackageName: '@progress/kendo-react-gauges'\n\n\n## Examples\n### Example 2\n```\nimport * as React from 'react';\nimport { Sparkline } from '@progress/kendo-react-charts';\n\nexport default function App() {\n    return (\n        <Sparkline\n            axisDefaults={{\n                line: {\n                    dashType: 'dash'\n                }\n            }}\n        />\n    );\n}\n\n```\n\n\nGenerally, Sparklines are simple, word-sized graphics that can be embedded in tables, headlines, or chunks of text. The concept for their graphical representation was developed by <a href=\"https://en.wikipedia.org/wiki/Edward_Tufte\" rel=\"noopener\" target=\"_blank\">Edward Tufte</a>. The KendoReact Sparkline is a version of the <a href=\"/kendo-react-ui-develop/components/charts/chart\">KendoReact Chart</a> which is tailored for this specific application. While the standard KendoReact Chart component behaves like a block element, due to its rendering inside a div element to allow for an easy Key Features\n\n\nSparklines include shortcuts for setting the <a href=\"/kendo-react-ui-develop/components/charts/api/sparklineprops#data\">data</a> and <a href=\"/kendo-react-ui-develop/components/charts/api/sparklineprops#type\">type</a> series options.\nThe Sparkline also supports all configuration options that are applicable for the Categorical series type of the <a href=\"/kendo-react-ui-develop/components/charts/series-types\">Chart</a>. The  Sparkline Chart   is  part of <a href=\"https://www.telerik.com/kendo-react-ui\">KendoReact</a> premium, an enterprise-grade UI library with 120+ <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">free</a> and premium components for building polished, performant apps. Test-drive all features with a free 30-day trial.<a class=\"cta-panel-big-module--btnTrial--38b3e\"\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "FloatingActionButton": "<a href=\"/kendo-react-ui-develop/components/buttons/floatingactionbutton/keyboard-navigation\">Keyboard Navigation</a>—The FloatingActionButton supports various keyboard shortcuts.\n<a href=\"/kendo-react-ui-develop/components/buttons/floatingactionbutton/accessibility/wai-aria-support\">Accessibility</a>—The FloatingActionButton is accessible for screen readers and supports WAI-ARIA attributes.\n\nKeyboard Navigation\n\nFor more details about the FloatingActionButton component's keyboard navigation, refer to the article on <a href=\"/kendo-react-ui-develop/components/buttons/floatingactionbutton/keyboard-navigation\">keyboard navigation in the FloatingActionButton component</a>. Out of the box, the Kendo React FloatingActionButton provides extensive accessibility support and enables users with disabilities to acquire complete control over its features.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "AutoComplete": "## API Reference Item\n- Name: AutoCompleteProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact AutoComplete component]({% slug overview_autocomplete %}).\n- Syntax: \n\n## Additional Context\n### AutoCompleteProps.accessKey (children)\nname: accessKey\nfullName: AutoCompleteProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the AutoComplete.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.adaptive (children)\nname: adaptive\nfullName: AutoCompleteProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: AutoCompleteProps.adaptiveSubtitle\nsummary: \"Specifies the text that is rendered as subtitle in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: AutoCompleteProps.adaptiveTitle\nsummary: \"Specifies the text that is rendered as title in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\\r\\nIf not provided, the title will be the same as the label.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: AutoCompleteProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: AutoCompleteProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.className (children)\nname: className\nfullName: AutoCompleteProps.className\nsummary: Sets additional classes to the AutoComplete.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.data (children)\nname: data\nfullName: AutoCompleteProps.data\nsummary: >-\n  Sets the data of the AutoComplete ([more information and example]({% slug\n  binding_autocomplete %})).\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.dataItemKey (children)\nname: dataItemKey\nfullName: AutoCompleteProps.dataItemKey\nsummary: |-\n  Sets the key for comparing the data items of the AutoComplete. If \n  `dataItemKey`\n   is not set, the AutoComplete compares the items by reference.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.defaultValue (children)\nname: defaultValue\nfullName: AutoCompleteProps.defaultValue\nsummary: |-\n  Sets the default value of the AutoComplete. Similar to the native \n  `input`\n   HTML element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.dir (children)\nname: dir\nfullName: AutoCompleteProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.disabled (children)\nname: disabled\nfullName: AutoCompleteProps.disabled\nsummary: Sets the disabled state of the AutoComplete.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.fillMode (children)\nname: fillMode\nfullName: AutoCompleteProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the AutoComplete.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- flat\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.focusedItemIndex (children)\nname: focusedItemIndex\nfullName: AutoCompleteProps.focusedItemIndex\nsummary: \"If set, the AutoComplete will use it to get the focused item index.\\r\\n\\r\\nDefault functionality returns the first item which starts with the input text.\"\nsyntax:\n  return:\n    type: '(data: any, inputText: string, textField?: string) => number'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.footer (children)\nname: footer\nfullName: AutoCompleteProps.footer\nsummary: >-\n  Sets the footer component of the AutoComplete ([see example]({% slug\n  customrendering_autocomplete %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.groupField (children)\nname: groupField\nfullName: AutoCompleteProps.groupField\nsummary: >-\n  Sets the data item field that represents the start of a group. Applicable to\n  objects data.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.groupHeaderItemRender (children)\nname: groupHeaderItemRender\nfullName: AutoCompleteProps.groupHeaderItemRender\nsummary: >-\n  Fires when a AutoComplete group header item is about to be rendered. Used to\n  override the default appearance of the group's headers.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListGroupItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.groupStickyHeaderItemRender (children)\nname: groupStickyHeaderItemRender\nfullName: AutoCompleteProps.groupStickyHeaderItemRender\nsummary: >-\n  Fires when a AutoComplete sticky group header item is about to be rendered.\n  Used to override the default appearance of the sticky group header of the\n  component.\nsyntax:\n  return:\n    type: >-\n      (div: ReactElement<HTMLDivElement, string | JSXElementConstructor<any>>,\n      stickyHeaderProps: GroupStickyHeaderProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.header (children)\nname: header\nfullName: AutoCompleteProps.header\nsummary: >-\n  Sets the header component of the AutoComplete ([see example]({% slug\n  customrendering_autocomplete %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.id (children)\nname: id\nfullName: AutoCompleteProps.id\nsummary: Specifies the id of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.inputAttributes (children)\nname: inputAttributes\nfullName: AutoCompleteProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.itemRender (children)\nname: itemRender\nfullName: AutoCompleteProps.itemRender\nsummary: >-\n  Fires when an AutoComplete list item is about to be rendered ([see example]({%\n  slug customrendering_autocomplete %}#toc-items)). Used to override the default\n  appearance of the list items.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.label (children)\nname: label\nfullName: AutoCompleteProps.label\nsummary: Renders a floating label for the AutoComplete.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.listNoDataRender (children)\nname: listNoDataRender\nfullName: AutoCompleteProps.listNoDataRender\nsummary: >-\n  Fires when the element which indicates no data in the popup is about to be\n  rendered ([see example]({% slug customrendering_autocomplete %}#toc-no-data)).\n  Used to override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLDivElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.loading (children)\nname: loading\nfullName: AutoCompleteProps.loading\nsummary: >-\n  Sets the loading state of the AutoComplete ([see example]({% slug\n  filtering_autocomplete %}#toc-basic-configuration)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.name (children)\nname: name\nfullName: AutoCompleteProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.onBlur (children)\nname: onBlur\nfullName: AutoCompleteProps.onBlur\nsummary: Fires each time the AutoComplete gets blurred.\nsyntax:\n  return:\n    type: '(event: AutoCompleteBlurEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onChange (children)\nname: onChange\nfullName: AutoCompleteProps.onChange\nsummary: >-\n  Fires each time the value of the AutoComplete is about to change ([more\n  information and example]({% slug binding_autocomplete %})).\nsyntax:\n  return:\n    type: '(event: AutoCompleteChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onClose (children)\nname: onClose\nfullName: AutoCompleteProps.onClose\nsummary: Fires each time the popup of the AutoComplete is about to close.\nsyntax:\n  return:\n    type: '(event: AutoCompleteCloseEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onFocus (children)\nname: onFocus\nfullName: AutoCompleteProps.onFocus\nsummary: Fires each time the user focuses the AutoComplete.\nsyntax:\n  return:\n    type: '(event: AutoCompleteFocusEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.onOpen (children)\nname: onOpen\nfullName: AutoCompleteProps.onOpen\nsummary: Fires each time the popup of the AutoComplete is about to open.\nsyntax:\n  return:\n    type: '(event: AutoCompleteOpenEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.opened (children)\nname: opened\nfullName: AutoCompleteProps.opened\nsummary: Sets the opened and closed state of the AutoComplete.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.placeholder (children)\nname: placeholder\nfullName: AutoCompleteProps.placeholder\nsummary: The hint that is displayed when the AutoComplete is empty.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.popupSettings (children)\nname: popupSettings\nfullName: AutoCompleteProps.popupSettings\nsummary: Configures the popup of the AutoComplete.\nsyntax:\n  return:\n    type: DropDownsPopupSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.prefix (children)\nname: prefix\nfullName: AutoCompleteProps.prefix\nsummary: Sets a custom prefix to the AutoComplete component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.readonly (children)\nname: readonly\nfullName: AutoCompleteProps.readonly\nsummary: Sets the read-only state of the AutoComplete.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.required (children)\nname: required\nfullName: AutoCompleteProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.rounded (children)\nname: rounded\nfullName: AutoCompleteProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the AutoComplete.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.size (children)\nname: size\nfullName: AutoCompleteProps.size\nsummary: \"Configures the \\n`size`\\n of the AutoComplete.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.skipDisabledItems (children)\nname: skipDisabledItems\nfullName: AutoCompleteProps.skipDisabledItems\nsummary: >-\n  Defines if AutoComplete's disabled items will be skipped or focused when\n  navigating through the list of items using a keyboard. Defaults to \n\n  `true`\n\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.style (children)\nname: style\nfullName: AutoCompleteProps.style\nsummary: The styles that are applied to the AutoComplete.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.suffix (children)\nname: suffix\nfullName: AutoCompleteProps.suffix\nsummary: Sets a custom suffix to the AutoComplete component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.suggest (children)\nname: suggest\nfullName: AutoCompleteProps.suggest\nsummary: >-\n  Enables the auto-completion of the text based on the first data item ([see\n  example]({% slug suggestions_autocomplete %})).\nsyntax:\n  return:\n    type: string | boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.tabIndex (children)\nname: tabIndex\nfullName: AutoCompleteProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the AutoComplete.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.textField (children)\nname: textField\nfullName: AutoCompleteProps.textField\nsummary: >-\n  Sets the data item field that represents the item text ([see example]({% slug\n  binding_autocomplete %}#toc-datasets-of-objects)). If the data contains only\n  primitive values, do not define it.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.valid (children)\nname: valid\nfullName: AutoCompleteProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.validationMessage (children)\nname: validationMessage\nfullName: AutoCompleteProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.validityStyles (children)\nname: validityStyles\nfullName: AutoCompleteProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### AutoCompleteProps.value (children)\nname: value\nfullName: AutoCompleteProps.value\nsummary: >-\n  Sets the value of the AutoComplete ([more information and example]({% slug\n  binding_autocomplete %})).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### AutoCompleteProps.valueRender (children)\nname: valueRender\nfullName: AutoCompleteProps.valueRender\nsummary: >-\n  Fires when the AutoComplete input element is about to be rendered. Use it to\n  override the default appearance of the component.\nsyntax:\n  return:\n    type: >-\n      (rendering: ReactElement<HTMLSpanElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n\n## API Reference Item\n- Name: AutoCompleteProps.clearButton\n- Type: Property\n- Summary: By default, the AutoComplete renders a button on hovering over the component, which resets the value.\r\nIf \n`clearButton`\n is set to \n`false`\n, the button will not be rendered.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AutoComplete } from '@progress/kendo-react-dropdowns';\n\nconst browsers = ['Chrome', 'Firefox'];\n\nexport default function App() {\n    return <AutoComplete data={browsers} clearButton={false} />;\n}\n\n```\n\n\nProvide descriptions and indicate the expected input for <a href=\"/kendo-react-ui/components/inputs/textbox\">TextBoxes</a>, <a href=\"/kendo-react-ui/components/inputs/numerictextbox\">NumericTextBoxes</a>, or <a href=\"/kendo-react-ui/components/inputs/maskedtextbox\">MaskedTextBoxes</a>.\n\nOn every user modification of the input value, the AutoComplete triggers an <a href=\"/kendo-react-ui-develop/components/dropdowns/api/autocompleteprops#onchange\">onChange</a> event. The event argument contains the typed string value that you can use to filter the source.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\nTo filter the data after a delay, use a similar implementation. You can toggle the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/autocompleteprops#loading\">loading</a> property and provide the user with a visual indication of the filtering process.\n\n<a href=\"/kendo-react-ui/components/form\">Form</a>\n<a href=\"/kendo-react-ui/components/inputs\">Inputs</a>—Input, TextBox, MaskedTextBox, RadioButton, RadioGroup\n<a href=\"/kendo-react-ui/components/labels\">Labels</a>—Label, Floating Label, Hint, Error\n<a href=\"/kendo-react-ui/components/popup\">Popup</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "MultiSelect": "## API Reference Item\n- Name: MultiSelectProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact MultiSelect component]({% slug overview_multiselect %}).\n- Syntax: \n\n## Additional Context\n### MultiSelectProps.accessKey (children)\nname: accessKey\nfullName: MultiSelectProps.accessKey\nsummary: |-\n  Specifies the \n  `accessKey`\n   of the MultiSelect.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.adaptive (children)\nname: adaptive\nfullName: MultiSelectProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.adaptiveFilter (children)\nname: adaptiveFilter\nfullName: MultiSelectProps.adaptiveFilter\nsummary: Sets the value of the adaptive filtering input of the of MultiSelect.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.adaptiveSubtitle (children)\nname: adaptiveSubtitle\nfullName: MultiSelectProps.adaptiveSubtitle\nsummary: \"Specifies the text that is rendered as subtitle in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: MultiSelectProps.adaptiveTitle\nsummary: \"Specifies the text that is rendered as title in the adaptive popup(action sheet).\\r\\nApplicable only when \\n`adaptive`\\n is set to \\n`true`\\n.\\r\\nIf not provided, the title will be the same as the label.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: MultiSelectProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.ariaLabel (children)\nname: ariaLabel\nfullName: MultiSelectProps.ariaLabel\nsummary: Specifies the accessible label of the interactive component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: MultiSelectProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.autoClose (children)\nname: autoClose\nfullName: MultiSelectProps.autoClose\nsummary: >-\n  Determines whether to close the options list of the MultiSelect after the item\n  selection is finished.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.className (children)\nname: className\nfullName: MultiSelectProps.className\nsummary: Sets additional classes to the MultiSelect.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.data (children)\nname: data\nfullName: MultiSelectProps.data\nsummary: >-\n  Sets the data of the MultiSelect ([see example]({% slug binding_multiselect\n  %})).\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.dataItemKey (children)\nname: dataItemKey\nfullName: MultiSelectProps.dataItemKey\nsummary: >-\n  Sets the key for comparing the data items of the MultiSelect ([see example]({%\n  slug binding_multiselect %}#toc-datasets-of-objects)). If \n\n  `dataItemKey`\n   is not set, the MultiSelect compares the items by reference.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.defaultValue (children)\nname: defaultValue\nfullName: MultiSelectProps.defaultValue\nsummary: |-\n  Sets the default value of the MultiSelect. Similar to the native \n  `select`\n   HTML element.\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.dir (children)\nname: dir\nfullName: MultiSelectProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.disabled (children)\nname: disabled\nfullName: MultiSelectProps.disabled\nsummary: Sets the disabled state of the MultiSelect.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.fillMode (children)\nname: fillMode\nfullName: MultiSelectProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the MultiSelect.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- flat\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.filter (children)\nname: filter\nfullName: MultiSelectProps.filter\nsummary: >-\n  Sets the value of filtering input. Useful for making the filtering input a\n  [controlled\n  component](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.filterable (children)\nname: filterable\nfullName: MultiSelectProps.filterable\nsummary: >-\n  Enables the filtering functionality of the MultiSelect ([more information and\n  examples]({% slug filtering_multiselect %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.focusedItemIndex (children)\nname: focusedItemIndex\nfullName: MultiSelectProps.focusedItemIndex\nsummary: \"If set, the MultiSelect will use it to get the focused item index.\\r\\n\\r\\nDefault functionality returns the first item which starts with the input text.\"\nsyntax:\n  return:\n    type: '(data: any, inputText: string, textField?: string) => number'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.footer (children)\nname: footer\nfullName: MultiSelectProps.footer\nsummary: >-\n  Sets the footer component of the MultiSelect ([see example]({% slug\n  customrendering_multiselect %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.groupField (children)\nname: groupField\nfullName: MultiSelectProps.groupField\nsummary: >-\n  Sets the data item field that represents the start of a group. Applicable to\n  objects data.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.groupHeaderItemRender (children)\nname: groupHeaderItemRender\nfullName: MultiSelectProps.groupHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's group header item is about to be rendered. Used to\n  override the default appearance of the group's headers.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListGroupItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.groupStickyHeaderItemRender (children)\nname: groupStickyHeaderItemRender\nfullName: MultiSelectProps.groupStickyHeaderItemRender\nsummary: >-\n  Fires when a DropDownList's sticky group header item is about to be rendered.\n  Used to override the default appearance of the sticky group header of the\n  component.\nsyntax:\n  return:\n    type: >-\n      (div: ReactElement<HTMLDivElement, string | JSXElementConstructor<any>>,\n      stickyHeaderProps: GroupStickyHeaderProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.header (children)\nname: header\nfullName: MultiSelectProps.header\nsummary: >-\n  Sets the header component of the MultiSelect ([see example]({% slug\n  customrendering_multiselect %}#toc-headers-and-footers)).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.id (children)\nname: id\nfullName: MultiSelectProps.id\nsummary: Specifies the id of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.inputAttributes (children)\nname: inputAttributes\nfullName: MultiSelectProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.itemRender (children)\nname: itemRender\nfullName: MultiSelectProps.itemRender\nsummary: >-\n  Fires when a MultiSelect item is about to be rendered ([see example]({% slug\n  customrendering_multiselect %}#toc-items)). Used to override the default\n  appearance of the list items.\nsyntax:\n  return:\n    type: >-\n      (li: ReactElement<HTMLLIElement, string | JSXElementConstructor<any>>,\n      itemProps: ListItemProps) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.label (children)\nname: label\nfullName: MultiSelectProps.label\nsummary: Renders a floating label for the MultiSelect.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.listNoDataRender (children)\nname: listNoDataRender\nfullName: MultiSelectProps.listNoDataRender\nsummary: >-\n  Fires when the element which indicates no data in the popup is about to be\n  rendered ([see example]({% slug customrendering_multiselect %}#toc-no-data)).\n  Used to override the default appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (element: ReactElement<HTMLDivElement, string |\n      JSXElementConstructor<any>>) => ReactNode\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.loading (children)\nname: loading\nfullName: MultiSelectProps.loading\nsummary: >-\n  Sets the loading state of the MultiSelect ([see example]({% slug\n  filtering_multiselect %}#toc-basic-configuration)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.name (children)\nname: name\nfullName: MultiSelectProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### MultiSelectProps.onBlur (children)\nname: onBlur\nfullName: MultiSelectProps.onBlur\nsummary: Fires each time the MultiSelect gets blurred.\nsyntax:\n  return:\n    type: '(event: MultiSelectBlurEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.onCancel (children)\nname: onCancel\nfullName: MultiSelectProps.onCancel\nsummary: >-\n  Fires each time the popup of the MultiSelect is about to cancel in ([adaptive\n  mode]({% slug adaptive_rendering_multiselect %})).\nsyntax:\n  return:\n    type: '(event: MultiSelectCancelEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.onChange (children)\nname: onChange\nfullName: MultiSelectProps.onChange\nsummary: >-\n  Fires each time the value of the MultiSelect is about to change ([see\n  examples]({% slug binding_multiselect %})).\nsyntax:\n  return:\n    type: '(event: MultiSelectChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.onClose (children)\nname: onClose\nfullName: MultiSelectProps.onClose\nsummary: Fires each time the popup of the MultiSelect is about to close.\nsyntax:\n  return:\n    type: '(event: MultiSelectCloseEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.onFilterChange (children)\nname: onFilterChange\nfullName: MultiSelectProps.onFilterChange\nsummary: >-\n  Fires each time the user types in the filter input ([see example]({% slug\n  filtering_multiselect %}#toc-basic-configuration)). You can filter the source\n  based on the passed filtration value.\nsyntax:\n  return:\n    type: '(event: MultiSelectFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.onFocus (children)\nname: onFocus\nfullName: MultiSelectProps.onFocus\nsummary: Fires each time the user focuses the MultiSelect.\nsyntax:\n  return:\n    type: '(event: MultiSelectFocusEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.onOpen (children)\nname: onOpen\nfullName: MultiSelectProps.onOpen\nsummary: Fires each time the popup of the MultiSelect is about to open.\nsyntax:\n  return:\n    type: '(event: MultiSelectOpenEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.onPageChange (children)\nname: onPageChange\nfullName: MultiSelectProps.onPageChange\nsummary: >-\n  Fires when both the virtual scrolling of the MultiSelect is enabled and when\n  the component requires data for another page ([see example]({% slug\n  virtualization_multiselect %})).\nsyntax:\n  return:\n    type: '(event: MultiSelectPageChangeEvent) => void'\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.opened (children)\nname: opened\nfullName: MultiSelectProps.opened\nsummary: Sets the opened and closed state of the MultiSelect.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.placeholder (children)\nname: placeholder\nfullName: MultiSelectProps.placeholder\nsummary: The hint that is displayed when the MultiSelect is empty.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.popupSettings (children)\nname: popupSettings\nfullName: MultiSelectProps.popupSettings\nsummary: Configures the popup of the MultiSelect.\nsyntax:\n  return:\n    type: DropDownsPopupSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.prefix (children)\nname: prefix\nfullName: MultiSelectProps.prefix\nsummary: Sets a custom prefix to the MultiSelect component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.required (children)\nname: required\nfullName: MultiSelectProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### MultiSelectProps.rounded (children)\nname: rounded\nfullName: MultiSelectProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the MultiSelect.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.size (children)\nname: size\nfullName: MultiSelectProps.size\nsummary: \"Configures the \\n`size`\\n of the MultiSelect.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.skipDisabledItems (children)\nname: skipDisabledItems\nfullName: MultiSelectProps.skipDisabledItems\nsummary: >-\n  Defines if MultiSelect's disabled items will be skipped or focused when\n  navigating through the list of items using a keyboard. Defaults to \n\n  `true`\n\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.style (children)\nname: style\nfullName: MultiSelectProps.style\nsummary: The styles that are applied to the MultiSelect.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.suffix (children)\nname: suffix\nfullName: MultiSelectProps.suffix\nsummary: Sets a custom suffix to the MultiSelect component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.tabIndex (children)\nname: tabIndex\nfullName: MultiSelectProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the MultiSelect.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.tagRender (children)\nname: tagRender\nfullName: MultiSelectProps.tagRender\nsummary: >-\n  Fires when a tag element is about to be rendered ([see example]({% slug\n  customrendering_multiselect %}#toc-tags)). Used to override the default\n  appearance of the element.\nsyntax:\n  return:\n    type: >-\n      (tagData: MultiSelectTagData, tag: ReactElement<any, string |\n      JSXElementConstructor<any>>) => ReactElement\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.textField (children)\nname: textField\nfullName: MultiSelectProps.textField\nsummary: >-\n  Sets the data item field that represents the item text ([see example]({% slug\n  binding_multiselect %}#toc-datasets-of-objects)). If the data contains only\n  primitive values, do not define it.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.valid (children)\nname: valid\nfullName: MultiSelectProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### MultiSelectProps.validationMessage (children)\nname: validationMessage\nfullName: MultiSelectProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### MultiSelectProps.validityStyles (children)\nname: validityStyles\nfullName: MultiSelectProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### MultiSelectProps.value (children)\nname: value\nfullName: MultiSelectProps.value\nsummary: >-\n  Sets the value of the MultiSelect ([see example]({% slug binding_multiselect\n  %})). It can either be of the primitive (string, numbers) or of the complex\n  (objects) type.\nsyntax:\n  return:\n    type: Array<any>\npackageName: '@progress/kendo-react-dropdowns'\n\n---\n### MultiSelectProps.virtual (children)\nname: virtual\nfullName: MultiSelectProps.virtual\nsummary: >-\n  Configures the virtual scrolling of the MultiSelect ([see example]({% slug\n  virtualization_multiselect %})).\nsyntax:\n  return:\n    type: VirtualizationSettings\npackageName: '@progress/kendo-react-dropdowns'\n\n\n## API Reference Item\n- Name: MultiSelectProps.tags\n- Type: Property\n- Summary: Sets the tags of the MultiSelect ([see example]({% slug customtags_multiselect %})).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { MultiSelect, MultiSelectChangeEvent } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    const data = ['Tag 1', 'Tag 2', 'Tag 3'];\n    const [value, setValue] = React.useState<string[]>(['Orange', 'Apple']);\n\n    const handleChange = (event: MultiSelectChangeEvent) => {\n        setValue(event.value);\n    };\n    return (\n        <MultiSelect\n            data={data}\n            value={value}\n            onChange={handleChange}\n            tags={value.length > 0 ? [{ text: `${value.length} items selected`, data: [...value] }] : []}\n        />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: MultiSelectProps.allowCustom\n- Type: Property\n- Summary: Specifies whether the MultiSelect allows user-defined values that are not present in the dataset ([see example]({% slug custom_values_multiselect %})). Defaults to \n`false`\n.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { MultiSelect } from '@progress/kendo-react-dropdowns';\n\nexport default function App() {\n    const data = ['Item 1', 'Item 2', 'Item 3'];\n    return <MultiSelect data={data} allowCustom={true} />;\n}\n\n```\n\n\nCustom Tags\n\nThe MultiSelect enables you to customize the display of the selected tags.\nTo customize the MultiSelect tags, use the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/multiselectprops#tags\">tags</a> property.\nThe following example demonstrates how to display a single summary tag.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom Rendering\n\nThe MultiSelect provides options for customizing the way it renders its elements.\nThe MultiSelect utilizes custom renderers which enable you to moderate the content of its:\n\nOption list items\nTags\nHeader and footer elements\nOption list when no data is available\n\nItems\n\nTo customize the content of each suggestion list item, use the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/multiselectprops#itemrender\">itemRender</a> prop.\nThe following example demonstrates how to set the itemRender prop of the MultiSelect and customize the list elements.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... Tags\n\nTo customize the content of each tag, use the <a href=\"/kendo-react-ui-develop/components/dropdowns/api/multiselectprops#tagrender\">tagRender</a> prop.\nThe following example demonstrates how to set the tagRender prop of the MultiSelect and customize the tags elements.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nHeaders and Footers\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Notification": "## API Reference Item\n- Name: Notification\n- Type: Class\n- Summary: Represents the [KendoReact Notification component]({% slug overview_notification %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Notification } from '@progress/kendo-react-notification';\n\nconst App = () => {\n    return (\n        <Notification>\n            <span>Notification message</span>\n        </Notification>\n    );\n};\n\nexport default App;\n\n```\n\n\n## API Reference Item\n- Name: NotificationProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Notification component]({% slug overview_notification %}).\n- Syntax: \n\n## Additional Context\n### NotificationProps.className (children)\nname: className\nfullName: NotificationProps.className\nsummary: Sets additional classes to the Notification.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.closable (children)\nname: closable\nfullName: NotificationProps.closable\nsummary: \"Sets if the Notification requires a user action to hide.\\r\\nIf the property is set to \\n`true`\\n, the Notification renders a **Close** button.\\r\\nIf the property is set to an object, the Notification renders a **Close** button\\r\\nby extending the default props with the provided object.\"\nsyntax:\n  return:\n    type: boolean | DetailedHTMLProps\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.dir (children)\nname: dir\nfullName: NotificationProps.dir\nsummary: |-\n  Sets the \n  `dir`\n   HTML attribute, which determines the text direction.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.onClose (children)\nname: onClose\nfullName: NotificationProps.onClose\nsummary: Fires when you click the **Close** button.\nsyntax:\n  return:\n    type: '(event: NotificationEvent) => void'\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.style (children)\nname: style\nfullName: NotificationProps.style\nsummary: The styles that are applied to the Notification.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-notification'\n\n---\n### NotificationProps.type (children)\nname: type\nfullName: NotificationProps.type\nsummary: Sets the Notification type, which determines its style and icon.\nsyntax:\n  return:\n    type: >-\n      { icon?: boolean, style?: \"base\" | \"primary\" | \"secondary\" | \"tertiary\" |\n      \"info\" | \"success\" | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\" |\n      \"none\" }\npackageName: '@progress/kendo-react-notification'\n\n\nDisplay different notification types after clicking a <a href=\"/kendo-react-ui-develop/components/grid\">Button</a>\nShow a message after a <a href=\"/kendo-react-ui-develop/components/form\">Form</a> has been submitted\nDisplay a notification once the <a href=\"/kendo-react-ui-develop/components/upload\">Upload</a> successfully completes a file upload\n\n\nThe Notification package is a dependency for multiple other KendoReact components.\n\nReact Notification with Other Telerik Components\n\nBased on the frameworks and technologies used in your project, you can combine UI components from different Telerik and Progress suites. The KendoReact Notification positions a piece of content next to a specific anchor component.\nThis   is   a  Free React  NotificationThe KendoReact  Notification   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following demo shows the Notification component which is included in the KendoReact Notification package:\n\nAnimations\n\nThe Notification allows you to add opening and closing animations to it by using the KendoReact Animation components from the <a href=\"/kendo-react-ui-develop/components/animation\">@progress/kendo-react-animation</a> package.\nTo animate the Notification, wrap it in the desired KendoReact Animation component.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "DatePicker": "## API Reference Item\n- Name: DatePickerProps.dateInput\n- Type: Property\n- Summary: Allows you to customize or replace the default DateInput rendered by DatePicker.\r\n([see example]({% slug custom_rendering_datepicker %}#toc-customizing-the-dateinput)).\r\nExample usage of the \n`dateInput`\n property:\r\n\n```jsx\r\n<DatePicker dateInput={CustomDateInput} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DatePicker, DateInput } from '@progress/kendo-react-dateinputs';\n\nconst CustomDateInput = (props) => (\n    <DateInput {...props} style={{ borderColor: 'red' }} />\n);\n\nexport default function App() {\n    return (\n        <DatePicker dateInput={CustomDateInput} />\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: DatePickerProps.min\n- Type: Property\n- Summary: Specifies the smallest valid date ([see example]({% slug dateranges_datepicker %})).\r\nExample usage of the \n`min`\n property:\r\n\n```jsx\r\n<DatePicker min={new Date(1900, 0, 1)} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { DatePicker } from '@progress/kendo-react-dateinputs';\n\nexport default function App() {\n    return (\n        <DatePicker min={new Date(1900, 0, 1)} />\n    );\n}\n\n```\n\n\nDate Ranges\n\nThe DatePicker can display a date range between predefined min and max values, allowing the user to pick a date only from that range.\n\nTo enable the user to select a date range, use the <a href=\"/kendo-react-ui-develop/components/dateinputs/daterangepicker\">KendoReact DateRangePicker component</a>.\n\nThe DatePicker supports props for setting basic validation requirements—for example, the minimum and maximum date. The <a href=\"/kendo-react-ui-develop/components/dateinputs/api/datepickerprops#min\">min</a>, <a href=\"/kendo-react-ui-develop/components/dateinputs/api/datepickerprops#max\">max</a>, and <a href=\"/kendo-react-ui-develop/components/dateinputs/api/datepickerprops#required\">required</a> properties enable the user to pre-define minimum requirements which define the validity state of the component and allow a successful form\n\nThe KendoReact DatePicker component offers a highly customizable interface for the user to enter and pick dates supporting different locales.\nIts features cover everything from setting a default value and selecting a date range to form validation and keyboard shortcuts.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Typography": "React Typography Demo Preview\n\nThe following example demonstrates the Typography variants and styles in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Typography is part of the <a href=\"/kendo-react-ui-develop/components/common\">KendoReact Common Utilities</a> component library. The procedures for installing, importing, and using the Common Utilities are identical for all components in the package. To learn how to use the Typography and the rest of the Common Utilities, see the <a href=\"/kendo-react-ui-develop/components/common\">Getting Started with the KendoReact Common Utilities</a> guide.\n\nKey Features Key Features\n\n\n<a href=\"/kendo-react-ui-develop/components/common/typography/appearance\">Appearance</a>—You can quickly add additional style to the Typography by choosing from the predefined styling options.\n\nHighly customizable and easy to style appearance\n\n<a href=\"/kendo-react-ui/components/styling\">Built-in themes</a>\n<a href=\"/kendo-react-ui/components/styling/customizing\">Theme customization</a>\n<a href=\"/kendo-react-ui/components/styling/theme-builder\">Self-created themes</a>\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Card": "<a href=\"/kendo-react-ui-develop/components/layout/card/orientation\">Orientation</a>—You can arrange the content of the Card vertically or horizontally.\n<a href=\"/kendo-react-ui-develop/components/layout/card/types\">Types</a>—The predefined types provide a convenient way to change the appearance of the Card.\n<a href=\"/kendo-react-ui-develop/components/layout/card/action_buttons\">Actions</a>—The Card allows you to render custom action buttons and to customize their orientation and layout.\n\n<a href=\"https://telerik.github.io/kendo-react/kendo-react-tailwind/\" rel=\"noopener\" target=\"_blank\">Open the sample in a new tab</a> to explore its responsive design, built with Tailwind CSS utility classes.\n\nCustomizing Styled KendoReact Components with Tailwind CSS\n\nSince KendoReact components do not natively utilize Tailwind CSS utility classes in their markup, you cannot style them directly using Tailwind CSS class names. Instead, you can customize their visual appearance by overriding the corresponding Kendo UI theme variables with default Tailwind CSS variables or with your own custom variables.\n\nTo style KendoReact components with Tailwind CSS, first enable the unstyled mode and then apply Tailwind utility classes in the preset CSS classes passed to the <a href=\"/kendo-react-ui/components/common/api/unstyledcontext\">UnstyledContext</a> provider. For details on enabling unstyled mode, see the <a href=\"/kendo-react-ui/components/styling/unstyled\">KendoReact Unstyled Mode</a> article. Once enabled, you can use Tailwind classes in your component configuration and markup for full styling control.\n\nDemo\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Menu": "## API Reference Item\n- Name: MenuItemProps\n- Type: Interface\n- Summary: The properties of the KendoReact MenuItem component ([more information and examples]({% slug items_menu %})).\n- Syntax: \n\n## Additional Context\n### MenuItemProps.contentRender (children)\nname: contentRender\nfullName: MenuItemProps.contentRender\nsummary: >-\n  A React functional or class component which is used for rendering content\n  instead of the item children ([see example]({% slug rendering_menu\n  %}#toc-content)).\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.cssClass (children)\nname: cssClass\nfullName: MenuItemProps.cssClass\nsummary: >-\n  The additional CSS classes that will be rendered on the item ([see example]({%\n  slug itemproperties_menu %}#toc-styles-and-classes)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.cssStyle (children)\nname: cssStyle\nfullName: MenuItemProps.cssStyle\nsummary: >-\n  The CSS styles that will be rendered on the item ([see example]({% slug\n  itemproperties_menu %}#toc-styles-and-classes)).\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.data (children)\nname: data\nfullName: MenuItemProps.data\nsummary: Represents any additional data that is associated with the Menu item.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.disabled (children)\nname: disabled\nfullName: MenuItemProps.disabled\nsummary: >-\n  Specifies if the item is disabled ([see example]({% slug itemproperties_menu\n  %}#toc-disabled-items)).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.icon (children)\nname: icon\nfullName: MenuItemProps.icon\nsummary: >-\n  Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons)\n  that will be rendered for the item ([see example]({% slug itemproperties_menu\n  %}#toc-icon)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.linkRender (children)\nname: linkRender\nfullName: MenuItemProps.linkRender\nsummary: >-\n  A React functional or class component which is used for rendering the link of\n  the item ([see example]({% slug rendering_menu %}#toc-links)). The item link\n  is a part of the visual representation of the item which, by default, includes\n  an arrow, icon, and text.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.render (children)\nname: render\nfullName: MenuItemProps.render\nsummary: >-\n  A React functional or class component which is used for rendering the\n  innermost part of the Menu item ([see example]({% slug rendering_menu\n  %}#toc-items)). By default, the innermost item part includes only the text for\n  the item.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.separator (children)\nname: separator\nfullName: MenuItemProps.separator\nsummary: |-\n  Specifies if this is a separator item. If set to true only the \n  `cssClass`\n   and \n  `cssStyle`\n   props should be rendered along.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.svgIcon (children)\nname: svgIcon\nfullName: MenuItemProps.svgIcon\nsummary: >-\n  Specifies the SVG icon that will be rendered for the item ([see example]({%\n  slug itemproperties_menu %}#toc-icon)).\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.text (children)\nname: text\nfullName: MenuItemProps.text\nsummary: >-\n  Specifies the item text ([see example]({% slug itemproperties_menu\n  %}#toc-text)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuItemProps.url (children)\nname: url\nfullName: MenuItemProps.url\nsummary: |-\n  Specifies a URL which is rendered as a \n  `href`\n   attribute on the item link ([see example]({% slug itemproperties_menu %}#toc-url)).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { MenuClassComponent, MenuItem } from '@progress/kendo-react-layout';\n\nconst App = () => (\n    <MenuClassComponent>\n        <MenuItem text=\"Item 1\" />\n        <MenuItem text=\"Item 2\" />\n    </MenuClassComponent>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### MenuClassComponent.constructor (children)\nname: constructor\nfullName: MenuClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.checkIsDirectionRightToLeft (children)\nname: checkIsDirectionRightToLeft\nfullName: MenuClassComponent.checkIsDirectionRightToLeft\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable (children)\nname: clearItemHoverAndLeaveRequestsIfApplicable\nfullName: MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.directionHolder (children)\nname: directionHolder\nfullName: MenuClassComponent.directionHolder\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.dispatchSelectEventIfWired (children)\nname: dispatchSelectEventIfWired\nfullName: MenuClassComponent.dispatchSelectEventIfWired\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getInputItem (children)\nname: getInputItem\nfullName: MenuClassComponent.getInputItem\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getMenuClassName (children)\nname: getMenuClassName\nfullName: MenuClassComponent.getMenuClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.inputItems (children)\nname: inputItems\nfullName: MenuClassComponent.inputItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.isItemWithDefaultClose (children)\nname: isItemWithDefaultClose\nfullName: MenuClassComponent.isItemWithDefaultClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemHoverRequest (children)\nname: itemHoverRequest\nfullName: MenuClassComponent.itemHoverRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemLeaveRequest (children)\nname: itemLeaveRequest\nfullName: MenuClassComponent.itemLeaveRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.items (children)\nname: items\nfullName: MenuClassComponent.items\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuWrapperEl (children)\nname: menuWrapperEl\nfullName: MenuClassComponent.menuWrapperEl\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.mouseOverHandler (children)\nname: mouseOverHandler\nfullName: MenuClassComponent.mouseOverHandler\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemBlur (children)\nname: onItemBlur\nfullName: MenuClassComponent.onItemBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemClick (children)\nname: onItemClick\nfullName: MenuClassComponent.onItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemFocus (children)\nname: onItemFocus\nfullName: MenuClassComponent.onItemFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseDown (children)\nname: onItemMouseDown\nfullName: MenuClassComponent.onItemMouseDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseLeave (children)\nname: onItemMouseLeave\nfullName: MenuClassComponent.onItemMouseLeave\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseOver (children)\nname: onItemMouseOver\nfullName: MenuClassComponent.onItemMouseOver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onKeyDown (children)\nname: onKeyDown\nfullName: MenuClassComponent.onKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.prepareItems (children)\nname: prepareItems\nfullName: MenuClassComponent.prepareItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.reset (children)\nname: reset\nfullName: MenuClassComponent.reset\nsummary: Resets the selection and opening of Menu items.\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setFocusedItemId (children)\nname: setFocusedItemId\nfullName: MenuClassComponent.setFocusedItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setHoveredItemId (children)\nname: setHoveredItemId\nfullName: MenuClassComponent.setHoveredItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.animate (children)\nname: animate\nfullName: MenuClassComponent.animate\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.element (children)\nname: element\nfullName: MenuClassComponent.element\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuItemId (children)\nname: menuItemId\nfullName: MenuClassComponent.menuItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps (children)\nname: MenuProps\nfullName: MenuProps\nsummary: The properties of the [KendoReact Menu component]({% slug overview_menu %}).\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - animate\n  - children\n  - className\n  - customCloseItemIds\n  - dir\n  - hoverCloseDelay\n  - hoverOpenDelay\n  - id\n  - itemRender\n  - items\n  - linkRender\n  - onSelect\n  - openOnClick\n  - style\n  - vertical\n\n\nEvents\n\nThe KendoReact Menu generates a variety of events that you can handle. This allows you to tailor the behavior of the Menu to your specific requirements.\nThe following example demonstrates the <a href=\"/kendo-react-ui-develop/components/layout/api/menuselectevent\">select</a> event of the Menu.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThis   is   a  Free React  MenuThe KendoReact  Menu   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Menu in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... KendoReact Menu Overview\n\nThe KendoReact Menu is a multi-level component for displaying hierarchical data.\nYou can describe the Menu items either by:\n\nUsing nested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSetting the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> property.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
  "Popup": "For any questions about the use of the KendoReact Popup, or any other <a href=\"https://www.telerik.com/kendo-react-ui/components/\" rel=\"noopener\" target=\"_blank\">KendoReact components</a>, there are <a href=\"https://www.telerik.com/kendo-react-ui/support\" rel=\"noopener\" target=\"_blank\">several support options available</a>:\n\ntarget=\"_blank\">npm</a>ActionSheetAppBarAvatarBottomNavigationBreadcrumbCardContextMenuDrawerExpansionPanelGridLayoutMenuPanelBarStackLayoutStepperTabStripTileLayoutSplitterTimeline<a href=\"/kendo-react-ui/components/listbox\">ListBox</a><a href=\"https://www.npmjs.com/package/@progress/kendo-react-listbox\" rel=\"noopener\" target=\"_blank\">npm</a><a href=\"/kendo-react-ui/components/listview\">ListView</a><a href=\"https://www.npmjs.com/package/@progress/kendo-react-listview\" rel=\"noopener\" target=\"_blank\">npm</a>No<a href=\"/kendo-react-ui/components/map\">Map</a><a href=\"https://www.npmjs.com/package/@progress/kendo-react-map\" rel=\"noopener\" target=\"_blank\">npm</a>No<a href=\"/kendo-react-ui/components/notification\">Notification</a><a\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n"
}