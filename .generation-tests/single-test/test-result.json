{
  "title": "Single Query Test",
  "query": "Create a simple landing page with a header, hero section, and footer",
  "success": true,
  "executionTime": 112734,
  "timestamp": "2025-09-14T19:34:31.867Z",
  "results": {
    "planner": {
      "id": "f3103381-be8d-41de-a5d0-8237055ef91f",
      "userQuery": "Create a simple landing page with a header, hero section, and footer",
      "plan": "# Page Structure Plan: Simple Landing Page\n\n## Overview\n- Goal: Simple, focused landing page with Header/Navigation, Hero section, and Footer.\n- Component Families Included: layout, navigation, data display, buttons/CTAs, forms, feedback, media.\n- Data Inputs: branding info, navigation items, hero content, CTA configuration, social links, legal text, analytics flags.\n\n---\n\n## 1) Layout\n- PageContainer (layout)\n  - Purpose: Overall grid/stack, responsive spacing, theming.\n  - Children: Header, Main (Hero), Footer.\n  - Data: theme tokens (colors, typography), breakpoint rules.\n\n- Grid/Stack System (layout)\n  - Purpose: Arrange Hero content side-by-side or stacked (image/text) with responsive behavior.\n  - Data: layout config (columns, gaps), image aspect rules.\n\n---\n\n## 2) Header / Navigation\n- HeaderBar (layout)\n  - Purpose: Fixed or static top bar containing brand and navigation.\n  - Children:\n    - BrandLogo (data display/media)\n      - Data: logo image src, alt, brand name.\n    - SiteTitle (data display)\n      - Data: brand name string.\n    - NavMenu (navigation)\n      - Data: navigationItems[]: {label, href, target, ariaLabel, isExternal}.\n      - Children: NavItem(s) (navigation)\n    - UtilityActions (buttons)\n      - Examples: Sign In Button, Get Started Button.\n      - Data: ctaPrimary {label, href}, ctaSecondary {label, href}.\n    - MobileNavToggle (buttons)\n      - Data: icon, aria-controls target id.\n    - MobileNavDrawer (navigation/layout)\n      - Children: NavItem list, UtilityActions.\n      - Data: same as NavMenu.\n- Feedback components\n  - SkipToContentLink (navigation/accessibility)\n    - Data: target anchor id (e.g., #main-content).\n\nData required for Header/Navigation:\n- branding: {logoSrc, logoAlt, brandName}\n- navigationItems: array of top-level links\n- ctaPrimary/Secondary: labels + URLs\n- a11y strings: aria labels, skip link target\n\n---\n\n## 3) Main Content (Hero Section)\n- Main (layout)\n  - Attributes: id=\"main-content\" for skip link target.\n  - Children: HeroSection.\n\n- HeroSection (layout)\n  - Variants: centered, split (text left, image right), background image.\n  - Children:\n    - HeroEyebrow (data display)\n      - Data: short kicker text.\n    - HeroHeading (data display)\n      - Data: main headline string.\n    - HeroSubheading (data display)\n      - Data: supporting copy string, rich text allowed.\n    - HeroCTAs (buttons)\n      - PrimaryCTAButton\n        - Data: {label, href, trackingId}\n      - SecondaryCTAButton (ghost/link style)\n        - Data: {label, href}\n    - Optional: HeroSignupInline (form)\n      - Fields: email input, submit button, consent checkbox.\n      - Validation: email format, required consent.\n      - Feedback: InlineFormError, InlineFormSuccess (feedback)\n      - Data: form action endpoint, privacy policy link.\n    - HeroMedia (media/data display)\n      - Types: image, illustration, Lottie, video thumbnail.\n      - Data: src, alt, poster, captions.\n    - TrustBar (data display/feedback)\n      - Items: logos/testimonials count or rating stars.\n      - Data: trustItems[]: {logoSrc, alt, title} or rating {value, count}.\n\nData required for Hero:\n- content: {eyebrow, heading, subheading}\n- ctas: {primary {label, href}, secondary {label, href}}\n- form (optional): {endpoint, placeholders, consentText, privacyHref}\n- media: {type, src, alt, poster}\n- trust: {logos[] or rating}\n\n---\n\n## 4) Footer\n- Footer (layout)\n  - Children:\n    - FooterPrimary (layout)\n      - FooterBrand (data display)\n        - Data: logoSrc, brandName, short description.\n      - FooterLinks (navigation)\n        - Data: footerLinks[]: {label, href}\n      - SocialLinks (navigation/buttons)\n        - Data: social[]: {platform, href, ariaLabel, icon}\n      - NewsletterBlock (form)\n        - Fields: email input, submit button\n        - Feedback: success/error toast (feedback)\n        - Data: endpoint, placeholders, consent text\n    - FooterSecondary (layout)\n      - LegalText (data display)\n        - Data: copyright, company name, year\n      - PolicyLinks (navigation)\n        - Data: {privacyHref, termsHref, cookiesHref}\n\nData required for Footer:\n- brand: {logoSrc, brandName, blurb}\n- footerLinks array\n- social links array\n- newsletter: {endpoint, placeholders}\n- legal: {year, company, copyright}\n- policies: {privacyHref, termsHref, cookiesHref}\n\n---\n\n## 5) Component Hierarchy Summary\n- PageContainer\n  - SkipToContentLink\n  - HeaderBar\n    - BrandLogo\n    - SiteTitle\n    - NavMenu\n      - NavItem*\n    - UtilityActions\n      - PrimaryCTAButton\n      - SecondaryCTAButton\n    - MobileNavToggle\n    - MobileNavDrawer\n      - NavItem*\n      - UtilityActions\n  - Main\n    - HeroSection\n      - HeroEyebrow\n      - HeroHeading\n      - HeroSubheading\n      - HeroCTAs\n        - PrimaryCTAButton\n        - SecondaryCTAButton\n      - HeroSignupInline (optional)\n        - EmailInput\n        - ConsentCheckbox\n        - SubmitButton\n        - InlineFormError / InlineFormSuccess\n      - HeroMedia (optional)\n      - TrustBar (optional)\n  - Footer\n    - FooterPrimary\n      - FooterBrand\n      - FooterLinks\n      - SocialLinks\n      - NewsletterBlock\n        - EmailInput\n        - SubmitButton\n        - ToastSuccess / ToastError\n    - FooterSecondary\n      - LegalText\n      - PolicyLinks\n\n---\n\n## 6) Data Flow & Relationships\n- Global theme tokens feed PageContainer and all children.\n- Navigation data shared between Header NavMenu and MobileNavDrawer.\n- CTA config reused in Header UtilityActions and HeroCTAs (can be distinct per section).\n- Form endpoints used by HeroSignupInline and NewsletterBlock; both emit feedback states to feedback components.\n- Media assets (logos, hero image) consumed by BrandLogo, HeroMedia, TrustBar.\n\n---\n\n## 7) Interaction & Feedback\n- MobileNavToggle controls MobileNavDrawer (aria-controls/expanded state).\n- Forms provide inline validation and toast notifications on submit.\n- Buttons track click events via trackingId for analytics.\n\n---\n\n## 8) Accessibility Notes\n- Skip link targets Main id.\n- All images include alt text; decorative images marked aria-hidden.\n- Buttons and links have discernible labels; focus states visible.\n\n---\n\n## 9) Minimal Data Schema Example\n- branding: {logoSrc, logoAlt, brandName}\n- navigationItems: [{label, href}]\n- hero: {eyebrow, heading, subheading, ctas: {primary, secondary}, media}\n- forms: {heroSignup: {endpoint}, newsletter: {endpoint}}\n- footer: {links: [], social: [], legal: {year, company}, policies: {...}}",
      "createdAt": "2025-09-14T19:32:56.078Z"
    },
    "structure": {
      "structure": {
        "component": "container",
        "description": "Root page container for a simple responsive landing page. Applies global theme tokens (colors, typography), spacing, and breakpoints. Children: header, main (hero), footer. Requires data: branding info, navigation items, CTA config, analytics flags.",
        "mcpQuery": "",
        "children": [
          {
            "component": "navigation",
            "description": "Skip to content accessibility link targeting the main content anchor. Requires data: target id (e.g., #main-content), visible text label.",
            "mcpQuery": "",
            "children": "Skip to main content"
          },
          {
            "component": "header",
            "description": "Top header bar with brand, navigation, and utility actions. Sticky behavior optional. Requires data: branding {logoSrc, logoAlt, brandName}, navigationItems [{label, href, ariaLabel, isExternal}], CTAs {primary, secondary}.",
            "mcpQuery": "",
            "children": [
              {
                "component": "wrapper",
                "description": "Header inner wrapper controlling max-width and padding for responsive layout.",
                "mcpQuery": "",
                "children": [
                  {
                    "component": "logo",
                    "description": "Brand logo image linking to home. Requires data: branding.logoSrc, branding.logoAlt, home href.",
                    "mcpQuery": "Show me Kendo UI Avatar/Image/Logo usage for a header brand area with a clickable home link. Include responsive sizing, alt text accessibility, and examples for light/dark themes. Provide recommendations for handling SVG vs raster and high-DPI assets.",
                    "children": ""
                  },
                  {
                    "component": "title",
                    "description": "Brand/site title adjacent to logo. Requires data: branding.brandName string.",
                    "mcpQuery": "",
                    "children": "Brand Name"
                  },
                  {
                    "component": "menu",
                    "description": "Primary horizontal navigation menu with keyboard support. Requires data: navigationItems[].",
                    "mcpQuery": "Show me Kendo UI Menu examples for a horizontal site navigation with keyboard navigation, focus management, and ARIA attributes. Include styling for hover/active states and handling external links (target=_blank, rel). Provide item template examples for icons and badges.",
                    "children": [
                      {
                        "component": "menuitem",
                        "description": "Single navigation item. Requires data: {label, href, ariaLabel, isExternal}.",
                        "mcpQuery": "",
                        "children": "Nav Item"
                      }
                    ]
                  },
                  {
                    "component": "toolbar",
                    "description": "Utility actions container for header CTAs (Sign in / Get started). Requires data: ctaPrimary {label, href}, ctaSecondary {label, href}.",
                    "mcpQuery": "Show me Kendo UI Toolbar patterns for placing primary and secondary actions in a header. Include button styling variants and responsive collapse behavior.",
                    "children": [
                      {
                        "component": "button",
                        "description": "Primary CTA in header (e.g., Get Started). Tracks analytics. Requires data: label, href, trackingId.",
                        "mcpQuery": "Show me Kendo UI Button examples for a primary CTA with prominent styling, link navigation, and analytics click handler. Include loading state and disabled variant.",
                        "children": "Get Started"
                      },
                      {
                        "component": "button",
                        "description": "Secondary CTA in header (e.g., Sign In) styled as secondary/ghost.",
                        "mcpQuery": "Show me Kendo UI Button secondary/ghost style examples suitable for header utility links, including icon-left usage and accessible labels.",
                        "children": "Sign In"
                      }
                    ]
                  },
                  {
                    "component": "button",
                    "description": "Mobile nav toggle (hamburger) controlling drawer visibility. Requires data: icon, aria-controls, expanded state.",
                    "mcpQuery": "Show me Kendo UI Button/IconButton examples for a mobile navigation toggle with aria-controls/expanded, and how to animate to a close icon.",
                    "children": "☰"
                  },
                  {
                    "component": "drawer",
                    "description": "Mobile navigation drawer containing the same nav items and CTAs. Requires data: navigationItems, ctaPrimary/Secondary, open/close state.",
                    "mcpQuery": "Show me Kendo UI Drawer examples for mobile site navigation with overlay mode, focus trap, and keyboard dismissal (Esc). Include item templates and footer actions.",
                    "children": [
                      {
                        "component": "list",
                        "description": "Drawer nav list rendering navigationItems[].",
                        "mcpQuery": "Show me Kendo UI ListView examples for simple link lists inside a Drawer, including item templates and active item styling.",
                        "children": [
                          {
                            "component": "item",
                            "description": "Drawer nav list item. Requires data: {label, href}.",
                            "mcpQuery": "",
                            "children": "Mobile Nav Item"
                          }
                        ]
                      },
                      {
                        "component": "group",
                        "description": "Drawer utility actions repeating CTAs for mobile.",
                        "mcpQuery": "",
                        "children": [
                          {
                            "component": "button",
                            "description": "Primary CTA inside drawer.",
                            "mcpQuery": "Show me Kendo UI Button usage inside Drawer footers, full-width style, primary emphasis.",
                            "children": "Get Started"
                          },
                          {
                            "component": "button",
                            "description": "Secondary CTA inside drawer.",
                            "mcpQuery": "Show me Kendo UI Button ghost/flat style suitable for secondary action inside Drawer.",
                            "children": "Sign In"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "component": "main",
            "description": "Main content region with id for skip link target. Contains hero section.",
            "mcpQuery": "",
            "children": [
              {
                "component": "section",
                "description": "Hero section supporting split layout, centered content, and background options. Requires data: content {eyebrow, heading, subheading}, ctas {primary, secondary}, optional form, media, trust.",
                "mcpQuery": "",
                "children": [
                  {
                    "component": "grid",
                    "description": "Responsive grid/stack to arrange hero text and media side-by-side on desktop and stacked on mobile. Requires data: layout config (columns, gap).",
                    "mcpQuery": "Show me Kendo UI Grid or StackLayout examples for a responsive hero split layout with two columns on desktop and stacked on mobile, including spacing tokens and alignment controls.",
                    "children": [
                      {
                        "component": "column",
                        "description": "Hero copy column with eyebrow, heading, subheading, and CTAs.",
                        "mcpQuery": "",
                        "children": [
                          {
                            "component": "label",
                            "description": "Hero eyebrow/kicker text. Requires data: content.eyebrow.",
                            "mcpQuery": "",
                            "children": "New"
                          },
                          {
                            "component": "h1",
                            "description": "Hero main heading. Requires data: content.heading.",
                            "mcpQuery": "",
                            "children": "Welcome to Our Product"
                          },
                          {
                            "component": "paragraph",
                            "description": "Supporting subheading/copy. Allows simple rich text. Requires data: content.subheading.",
                            "mcpQuery": "",
                            "children": "Short description of value proposition goes here."
                          },
                          {
                            "component": "group",
                            "description": "Hero CTA button group with primary and secondary actions. Requires data: ctas {primary {label, href, trackingId}, secondary {label, href}}.",
                            "mcpQuery": "",
                            "children": [
                              {
                                "component": "button",
                                "description": "Primary hero CTA button with tracking id.",
                                "mcpQuery": "Show me Kendo UI Button examples for a large primary hero CTA with full-width on mobile, loading state, and analytics click handler.",
                                "children": "Start Free Trial"
                              },
                              {
                                "component": "button",
                                "description": "Secondary hero CTA styled as outline/flat linking to learn more.",
                                "mcpQuery": "Show me Kendo UI Button outline/flat variants suitable for secondary hero actions. Include icon-right usage and hover states.",
                                "children": "Learn More"
                              }
                            ]
                          },
                          {
                            "component": "form",
                            "description": "Optional inline signup form: email capture with consent and inline validation. Requires data: form.endpoint, placeholders.email, consentText, privacyHref.",
                            "mcpQuery": "Show me Kendo UI Form with EmailInput, Checkbox, and Submit Button for an inline hero signup. Include validation (required, email format), error messages, and submit handler with async state.",
                            "children": [
                              {
                                "component": "email",
                                "description": "Email input with placeholder and validation for email format. Requires data: placeholders.email.",
                                "mcpQuery": "Show me Kendo UI TextBox or Input for email type with validation messaging and aria-invalid states.",
                                "children": ""
                              },
                              {
                                "component": "checkbox",
                                "description": "Consent checkbox acknowledging privacy policy. Requires data: consentText, privacyHref, required=true.",
                                "mcpQuery": "Show me Kendo UI Checkbox with inline link to privacy policy and required validation examples.",
                                "children": "I agree to the Privacy Policy"
                              },
                              {
                                "component": "submit",
                                "description": "Submit button for signup form with loading state.",
                                "mcpQuery": "Show me Kendo UI Button configured as type=submit with loading/progress indication and disabled when invalid.",
                                "children": "Sign Up"
                              },
                              {
                                "component": "error",
                                "description": "Inline form error message placeholder. Displays on validation or submit error.",
                                "mcpQuery": "",
                                "children": "Please enter a valid email."
                              },
                              {
                                "component": "success",
                                "description": "Inline form success message placeholder shown after successful submission.",
                                "mcpQuery": "",
                                "children": "Thanks! Check your inbox."
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "component": "column",
                        "description": "Hero media column supporting image/video/illustration with caption.",
                        "mcpQuery": "",
                        "children": [
                          {
                            "component": "image",
                            "description": "Primary hero media image or illustration. Requires data: media {type, src, alt, poster}.",
                            "mcpQuery": "Show me Kendo UI Media/Avatar/Image approaches for responsive hero images with object-fit, lazy loading, and art direction (srcset). Include examples for decorative images with aria-hidden.",
                            "children": ""
                          },
                          {
                            "component": "caption",
                            "description": "Optional media caption or alt-supporting text. Requires data: media.captions.",
                            "mcpQuery": "",
                            "children": "Product interface preview"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "component": "group",
                    "description": "Trust bar showing partner/customer logos or rating stars. Requires data: trust.items[] {logoSrc, alt, title} or rating {value, count}.",
                    "mcpQuery": "",
                    "children": [
                      {
                        "component": "list",
                        "description": "Logo list for trust indicators.",
                        "mcpQuery": "Show me Kendo UI ListView or Grid for rendering a responsive row of partner logos with equalized sizing and grayscale styling.",
                        "children": [
                          {
                            "component": "item",
                            "description": "Single trust logo with accessible alt text.",
                            "mcpQuery": "",
                            "children": [
                              {
                                "component": "image",
                                "description": "Trust logo image. Requires data: item.logoSrc, item.alt.",
                                "mcpQuery": "Show me Kendo UI Image usage with lazy loading for logo strips and high-contrast modes.",
                                "children": ""
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "component": "rating",
                        "description": "Optional rating summary badge with average value and count. Requires data: {value, count}.",
                        "mcpQuery": "Show me Kendo UI Rating or custom Badge examples to display an average rating with star icons and count, accessible to screen readers.",
                        "children": "4.8 (2,314 reviews)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "metadata": {
        "totalComponents": 49,
        "maxDepth": 6,
        "componentTypes": [
          "container",
          "navigation",
          "header",
          "wrapper",
          "logo",
          "title",
          "menu",
          "menuitem",
          "toolbar",
          "button",
          "drawer",
          "list",
          "item",
          "group",
          "main",
          "section",
          "grid",
          "column",
          "label",
          "h1",
          "paragraph",
          "form",
          "email",
          "checkbox",
          "submit",
          "error",
          "success",
          "image",
          "caption",
          "rating"
        ],
        "description": "Comprehensive ACT for a simple landing page with header, hero, and footer, including accessibility, mobile navigation, CTAs, optional hero signup, media, and trust indicators. Includes actionable MCP queries for Kendo-mapped components."
      }
    },
    "merger": {
      "code": {
        "imports": [
          "import * as React from 'react';",
          "import { AppBar, AppBarSection, AppBarSpacer, Drawer, DrawerContent, Avatar, StackLayout, Card } from '@progress/kendo-react-layout';",
          "import { Menu } from '@progress/kendo-react-layout';",
          "import { Button, Toolbar, ToolbarItem, ToolbarSpacer } from '@progress/kendo-react-buttons';",
          "import { ListView, ListViewItemProps } from '@progress/kendo-react-listview';",
          "import { Form, Field, FormElement, FieldRenderProps, FormRenderProps } from '@progress/kendo-react-form';",
          "import { TextBox } from '@progress/kendo-react-inputs';",
          "import { Checkbox, Rating } from '@progress/kendo-react-inputs';",
          "import { Label, Error } from '@progress/kendo-react-labels';",
          "import { Typography } from '@progress/kendo-react-common';",
          "import { menuIcon, closeIcon, chevronRightIcon, userIcon, starIcon } from '@progress/kendo-svg-icons';",
          "import { SVGIcon } from '@progress/kendo-react-common';"
        ],
        "mainComponent": "export default function LandingPage() {\n  // Mock data\n  const branding = {\n    logoSrc: 'https://dummyimage.com/64x64/1f2937/ffffff.png&text=K',\n    logoAlt: 'Kendo Brand',\n    brandName: 'Kendo SaaS'\n  };\n  const navigationItems = [\n    { text: 'Product', href: '#product', ariaLabel: 'Product' },\n    { text: 'Pricing', href: '#pricing', ariaLabel: 'Pricing' },\n    { text: 'Docs', href: 'https://www.telerik.com/kendo-react-ui/', ariaLabel: 'Documentation', isExternal: true },\n    { text: 'Blog', href: '#blog', ariaLabel: 'Blog' }\n  ];\n  const ctas = {\n    primary: { label: 'Get Started', href: '#get-started', trackingId: 'header_get_started' },\n    secondary: { label: 'Sign In', href: '#sign-in' }\n  };\n  const trustLogos = [\n    { logoSrc: 'https://dummyimage.com/120x40/9ca3af/ffffff.png&text=Acme', alt: 'Acme Corp' },\n    { logoSrc: 'https://dummyimage.com/120x40/9ca3af/ffffff.png&text=Globex', alt: 'Globex' },\n    { logoSrc: 'https://dummyimage.com/120x40/9ca3af/ffffff.png&text=Initech', alt: 'Initech' },\n    { logoSrc: 'https://dummyimage.com/120x40/9ca3af/ffffff.png&text=Umbrella', alt: 'Umbrella' }\n  ];\n  const ratingSummary = { value: 4.8, count: 2314 };\n\n  // State\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\n  const [submitting, setSubmitting] = React.useState(false);\n  const [formSuccess, setFormSuccess] = React.useState('');\n  const [formError, setFormError] = React.useState('');\n\n  const toggleDrawer = () => setDrawerOpen((p) => !p);\n\n  const onMenuSelect = (e) => {\n    const item = e.item || {};\n    if (item.data && item.data.href) {\n      if (item.data.isExternal) {\n        window.open(item.data.href, '_blank', 'noopener');\n      } else {\n        window.location.hash = item.data.href;\n      }\n    }\n  };\n\n  // Form validators\n  const emailRegex = /\\S+@\\S+\\.\\S+/;\n  const required = (value) => (value ? '' : 'This field is required.');\n  const emailValidator = (value) => (emailRegex.test(value || '') ? '' : 'Please enter a valid email.');\n\n  const EmailField = (fieldProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldProps;\n    return (\n      <div className=\"flex flex-col gap-1\">\n        <Label editorId={others.id}>Email</Label>\n        <TextBox {...others} inputAttributes={{ type: 'email', id: others.id }} size=\"large\" />\n        {visited && validationMessage && <Error id={`${others.id}-error`}>{validationMessage}</Error>}\n      </div>\n    );\n  };\n\n  const ConsentField = (fieldProps: FieldRenderProps) => {\n    const { validationMessage, visited, value, onChange, ...others } = fieldProps as any;\n    return (\n      <div className=\"flex flex-col gap-1\">\n        <Checkbox\n          {...others}\n          checked={!!value}\n          onChange={(e) => onChange({ value: e.value })}\n          label={<span>I agree to the <a href=\"#privacy\" className=\"underline\">Privacy Policy</a></span>}\n        />\n        {visited && validationMessage && <Error>{validationMessage}</Error>}\n      </div>\n    );\n  };\n\n  const handleFormSubmit = async (values: any) => {\n    setFormError('');\n    setFormSuccess('');\n    setSubmitting(true);\n    try {\n      await new Promise((r) => setTimeout(r, 1000));\n      setFormSuccess('Thanks! Check your inbox.');\n    } catch (err) {\n      setFormError('Something went wrong. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Drawer items mapped from navigation\n  const drawerItems = navigationItems.map((n) => ({ text: n.text, data: n }));\n\n  // ListView item for logos\n  const LogoItem = (props: ListViewItemProps) => {\n    const { logoSrc, alt } = props.dataItem as any;\n    return (\n      <div className=\"flex items-center justify-center h-12 grayscale opacity-70 hover:opacity-100 transition\">\n        <img src={logoSrc} alt={alt} loading=\"lazy\" className=\"max-h-8 w-auto\" />\n      </div>\n    );\n  };\n\n  const trackClick = (id: string) => {\n    // stub analytics\n    console.log('track', id);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-white text-gray-900\">\n      {/* Skip link */}\n      <a href=\"#main-content\" className=\"sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 bg-black text-white px-3 py-2 rounded\">Skip to main content</a>\n\n      {/* Header */}\n      <AppBar positionMode=\"sticky\" className=\"backdrop-blur border-b border-gray-100\">\n        <AppBarSection>\n          <Button aria-label=\"Open navigation\" fillMode=\"flat\" svgIcon={drawerOpen ? (closeIcon as SVGIcon) : (menuIcon as SVGIcon)} onClick={toggleDrawer} className=\"md:hidden\" />\n        </AppBarSection>\n        <AppBarSection>\n          <a href=\"#home\" className=\"flex items-center gap-3\">\n            <Avatar type=\"image\" src={branding.logoSrc} alt={branding.logoAlt} size=\"large\" rounded=\"full\" />\n            <Typography className=\"hidden sm:block font-semibold\">{branding.brandName}</Typography>\n          </a>\n        </AppBarSection>\n        <AppBarSpacer style={{ width: 16 }} />\n        <AppBarSection className=\"hidden md:block\">\n          <Menu\n            className=\"bg-transparent\"\n            items={navigationItems.map((n) => ({ text: n.text, data: n }))}\n            onSelect={onMenuSelect}\n          />\n        </AppBarSection>\n        <AppBarSpacer style={{ flex: 1 }} />\n        <AppBarSection className=\"hidden md:flex items-center\">\n          <Toolbar ariaLabel=\"Header actions\" className=\"bg-transparent\">\n            <ToolbarItem>\n              <Button as=\"a\" href={ctas.secondary.href} fillMode=\"flat\" startIcon={<span className=\"k-icon\"><svg width=\"0\" height=\"0\" /></span>}>\n                {ctas.secondary.label}\n              </Button>\n            </ToolbarItem>\n            <ToolbarSpacer />\n            <ToolbarItem>\n              <Button as=\"a\" href={ctas.primary.href} themeColor=\"primary\" onClick={() => trackClick(ctas.primary.trackingId)}>\n                {ctas.primary.label}\n              </Button>\n            </ToolbarItem>\n          </Toolbar>\n        </AppBarSection>\n      </AppBar>\n\n      {/* Mobile Drawer */}\n      <Drawer\n        expanded={drawerOpen}\n        mode=\"overlay\"\n        position=\"start\"\n        width={280}\n        className=\"md:hidden\"\n        onOverlayClick={() => setDrawerOpen(false)}\n        items={drawerItems}\n        onSelect={(e) => {\n          onMenuSelect(e);\n          setDrawerOpen(false);\n        }}\n      >\n        <DrawerContent />\n      </Drawer>\n\n      {/* Main */}\n      <main id=\"main-content\" className=\"flex-1\">\n        <section className=\"relative overflow-hidden\">\n          <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12 lg:py-20\">\n            {/* Hero grid */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-10 items-center\">\n              {/* Copy column */}\n              <div>\n                <span className=\"inline-block text-xs tracking-wide uppercase text-primary-600\">New</span>\n                <h1 className=\"mt-2 text-3xl sm:text-5xl font-extrabold\">Welcome to Our Product</h1>\n                <p className=\"mt-4 text-base sm:text-lg text-gray-600\">Short description of value proposition goes here.</p>\n\n                {/* CTA group */}\n                <div className=\"mt-6 flex flex-col sm:flex-row gap-3\">\n                  <Button\n                    as=\"a\"\n                    href=\"#start-trial\"\n                    themeColor=\"primary\"\n                    size=\"large\"\n                    onClick={() => trackClick('hero_start_trial')}\n                    className=\"w-full sm:w-auto\"\n                  >\n                    Start Free Trial\n                  </Button>\n                  <Button as=\"a\" href=\"#learn-more\" fillMode=\"outline\" endIcon={<span className=\"k-icon\"><svg width=\"0\" height=\"0\" /></span>} className=\"w-full sm:w-auto\">\n                    Learn More\n                  </Button>\n                </div>\n\n                {/* Inline signup form */}\n                <Card className=\"mt-8 p-4 shadow-sm border border-gray-100\">\n                  <Form\n                    initialValues={{ email: 'demo@example.com', consent: true }}\n                    onSubmit={handleFormSubmit}\n                    render={(formRenderProps: FormRenderProps) => (\n                      <FormElement>\n                        <StackLayout orientation=\"vertical\" gap={12}>\n                          <Field\n                            name=\"email\"\n                            id=\"signup-email\"\n                            component={EmailField}\n                            validator={(value) => required(value) || emailValidator(value)}\n                          />\n                          <Field name=\"consent\" component={ConsentField} validator={required} />\n                          {formError && <Error>{formError}</Error>}\n                          {formSuccess && (\n                            <div role=\"status\" className=\"text-green-700 text-sm\">{formSuccess}</div>\n                          )}\n                          <Button type=\"submit\" themeColor=\"primary\" disabled={!formRenderProps.allowSubmit || submitting}>\n                            {submitting ? 'Signing up…' : 'Sign Up'}\n                          </Button>\n                        </StackLayout>\n                      </FormElement>\n                    )}\n                  />\n                </Card>\n              </div>\n\n              {/* Media column */}\n              <div className=\"relative\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1521737604893-d14cc237f11d?q=80&w=1200&auto=format&fit=crop\"\n                  srcSet=\"https://images.unsplash.com/photo-1521737604893-d14cc237f11d?q=80&w=600&auto=format&fit=crop 600w, https://images.unsplash.com/photo-1521737604893-d14cc237f11d?q=80&w=1200&auto=format&fit=crop 1200w\"\n                  sizes=\"(max-width: 1024px) 100vw, 50vw\"\n                  alt=\"Product interface preview\"\n                  loading=\"lazy\"\n                  className=\"w-full h-auto rounded-lg shadow-md object-cover\"\n                />\n                <figcaption className=\"mt-2 text-sm text-gray-500\">Product interface preview</figcaption>\n              </div>\n            </div>\n\n            {/* Trust bar */}\n            <div className=\"mt-12\">\n              <div className=\"flex items-center gap-4\">\n                <Rating value={Math.round(ratingSummary.value)} max={5} readonly svgIcon={starIcon as SVGIcon} />\n                <span className=\"text-sm text-gray-700\">{ratingSummary.value} ({ratingSummary.count.toLocaleString()} reviews)</span>\n              </div>\n              <div className=\"mt-6\">\n                <ListView\n                  className=\"grid grid-cols-2 sm:grid-cols-4 gap-6\"\n                  data={trustLogos}\n                  item={LogoItem}\n                  navigatable={false}\n                />\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"border-t border-gray-100 py-8\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 text-sm text-gray-500 flex flex-col sm:flex-row items-center justify-between gap-3\">\n          <span>© {new Date().getFullYear()} {branding.brandName}</span>\n          <nav className=\"flex gap-4\">\n            <a href=\"#privacy\" className=\"hover:text-gray-700\">Privacy</a>\n            <a href=\"#terms\" className=\"hover:text-gray-700\">Terms</a>\n            <a href=\"#contact\" className=\"hover:text-gray-700\">Contact</a>\n          </nav>\n        </div>\n      </footer>\n    </div>\n  );\n}\n",
        "metadata": {
          "totalComponents": 28,
          "componentTypes": [
            "AppBar",
            "AppBarSection",
            "AppBarSpacer",
            "Button",
            "Avatar",
            "Menu",
            "Toolbar",
            "ToolbarItem",
            "ToolbarSpacer",
            "Drawer",
            "DrawerContent",
            "Form",
            "Field",
            "FormElement",
            "TextBox",
            "Checkbox",
            "Error",
            "Rating",
            "StackLayout",
            "Card",
            "ListView",
            "Typography"
          ]
        }
      },
      "originalACT": {
        "structure": {
          "component": "container",
          "description": "Root page container for a simple responsive landing page. Applies global theme tokens (colors, typography), spacing, and breakpoints. Children: header, main (hero), footer. Requires data: branding info, navigation items, CTA config, analytics flags.",
          "mcpQuery": "",
          "children": [
            {
              "component": "navigation",
              "description": "Skip to content accessibility link targeting the main content anchor. Requires data: target id (e.g., #main-content), visible text label.",
              "mcpQuery": "",
              "children": "Skip to main content"
            },
            {
              "component": "header",
              "description": "Top header bar with brand, navigation, and utility actions. Sticky behavior optional. Requires data: branding {logoSrc, logoAlt, brandName}, navigationItems [{label, href, ariaLabel, isExternal}], CTAs {primary, secondary}.",
              "mcpQuery": "",
              "children": [
                {
                  "component": "wrapper",
                  "description": "Header inner wrapper controlling max-width and padding for responsive layout.",
                  "mcpQuery": "",
                  "children": [
                    {
                      "component": "logo",
                      "description": "Brand logo image linking to home. Requires data: branding.logoSrc, branding.logoAlt, home href.",
                      "mcpQuery": "Show me Kendo UI Avatar/Image/Logo usage for a header brand area with a clickable home link. Include responsive sizing, alt text accessibility, and examples for light/dark themes. Provide recommendations for handling SVG vs raster and high-DPI assets.",
                      "children": ""
                    },
                    {
                      "component": "title",
                      "description": "Brand/site title adjacent to logo. Requires data: branding.brandName string.",
                      "mcpQuery": "",
                      "children": "Brand Name"
                    },
                    {
                      "component": "menu",
                      "description": "Primary horizontal navigation menu with keyboard support. Requires data: navigationItems[].",
                      "mcpQuery": "Show me Kendo UI Menu examples for a horizontal site navigation with keyboard navigation, focus management, and ARIA attributes. Include styling for hover/active states and handling external links (target=_blank, rel). Provide item template examples for icons and badges.",
                      "children": [
                        {
                          "component": "menuitem",
                          "description": "Single navigation item. Requires data: {label, href, ariaLabel, isExternal}.",
                          "mcpQuery": "",
                          "children": "Nav Item"
                        }
                      ]
                    },
                    {
                      "component": "toolbar",
                      "description": "Utility actions container for header CTAs (Sign in / Get started). Requires data: ctaPrimary {label, href}, ctaSecondary {label, href}.",
                      "mcpQuery": "Show me Kendo UI Toolbar patterns for placing primary and secondary actions in a header. Include button styling variants and responsive collapse behavior.",
                      "children": [
                        {
                          "component": "button",
                          "description": "Primary CTA in header (e.g., Get Started). Tracks analytics. Requires data: label, href, trackingId.",
                          "mcpQuery": "Show me Kendo UI Button examples for a primary CTA with prominent styling, link navigation, and analytics click handler. Include loading state and disabled variant.",
                          "children": "Get Started"
                        },
                        {
                          "component": "button",
                          "description": "Secondary CTA in header (e.g., Sign In) styled as secondary/ghost.",
                          "mcpQuery": "Show me Kendo UI Button secondary/ghost style examples suitable for header utility links, including icon-left usage and accessible labels.",
                          "children": "Sign In"
                        }
                      ]
                    },
                    {
                      "component": "button",
                      "description": "Mobile nav toggle (hamburger) controlling drawer visibility. Requires data: icon, aria-controls, expanded state.",
                      "mcpQuery": "Show me Kendo UI Button/IconButton examples for a mobile navigation toggle with aria-controls/expanded, and how to animate to a close icon.",
                      "children": "☰"
                    },
                    {
                      "component": "drawer",
                      "description": "Mobile navigation drawer containing the same nav items and CTAs. Requires data: navigationItems, ctaPrimary/Secondary, open/close state.",
                      "mcpQuery": "Show me Kendo UI Drawer examples for mobile site navigation with overlay mode, focus trap, and keyboard dismissal (Esc). Include item templates and footer actions.",
                      "children": [
                        {
                          "component": "list",
                          "description": "Drawer nav list rendering navigationItems[].",
                          "mcpQuery": "Show me Kendo UI ListView examples for simple link lists inside a Drawer, including item templates and active item styling.",
                          "children": [
                            {
                              "component": "item",
                              "description": "Drawer nav list item. Requires data: {label, href}.",
                              "mcpQuery": "",
                              "children": "Mobile Nav Item"
                            }
                          ]
                        },
                        {
                          "component": "group",
                          "description": "Drawer utility actions repeating CTAs for mobile.",
                          "mcpQuery": "",
                          "children": [
                            {
                              "component": "button",
                              "description": "Primary CTA inside drawer.",
                              "mcpQuery": "Show me Kendo UI Button usage inside Drawer footers, full-width style, primary emphasis.",
                              "children": "Get Started"
                            },
                            {
                              "component": "button",
                              "description": "Secondary CTA inside drawer.",
                              "mcpQuery": "Show me Kendo UI Button ghost/flat style suitable for secondary action inside Drawer.",
                              "children": "Sign In"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "component": "main",
              "description": "Main content region with id for skip link target. Contains hero section.",
              "mcpQuery": "",
              "children": [
                {
                  "component": "section",
                  "description": "Hero section supporting split layout, centered content, and background options. Requires data: content {eyebrow, heading, subheading}, ctas {primary, secondary}, optional form, media, trust.",
                  "mcpQuery": "",
                  "children": [
                    {
                      "component": "grid",
                      "description": "Responsive grid/stack to arrange hero text and media side-by-side on desktop and stacked on mobile. Requires data: layout config (columns, gap).",
                      "mcpQuery": "Show me Kendo UI Grid or StackLayout examples for a responsive hero split layout with two columns on desktop and stacked on mobile, including spacing tokens and alignment controls.",
                      "children": [
                        {
                          "component": "column",
                          "description": "Hero copy column with eyebrow, heading, subheading, and CTAs.",
                          "mcpQuery": "",
                          "children": [
                            {
                              "component": "label",
                              "description": "Hero eyebrow/kicker text. Requires data: content.eyebrow.",
                              "mcpQuery": "",
                              "children": "New"
                            },
                            {
                              "component": "h1",
                              "description": "Hero main heading. Requires data: content.heading.",
                              "mcpQuery": "",
                              "children": "Welcome to Our Product"
                            },
                            {
                              "component": "paragraph",
                              "description": "Supporting subheading/copy. Allows simple rich text. Requires data: content.subheading.",
                              "mcpQuery": "",
                              "children": "Short description of value proposition goes here."
                            },
                            {
                              "component": "group",
                              "description": "Hero CTA button group with primary and secondary actions. Requires data: ctas {primary {label, href, trackingId}, secondary {label, href}}.",
                              "mcpQuery": "",
                              "children": [
                                {
                                  "component": "button",
                                  "description": "Primary hero CTA button with tracking id.",
                                  "mcpQuery": "Show me Kendo UI Button examples for a large primary hero CTA with full-width on mobile, loading state, and analytics click handler.",
                                  "children": "Start Free Trial"
                                },
                                {
                                  "component": "button",
                                  "description": "Secondary hero CTA styled as outline/flat linking to learn more.",
                                  "mcpQuery": "Show me Kendo UI Button outline/flat variants suitable for secondary hero actions. Include icon-right usage and hover states.",
                                  "children": "Learn More"
                                }
                              ]
                            },
                            {
                              "component": "form",
                              "description": "Optional inline signup form: email capture with consent and inline validation. Requires data: form.endpoint, placeholders.email, consentText, privacyHref.",
                              "mcpQuery": "Show me Kendo UI Form with EmailInput, Checkbox, and Submit Button for an inline hero signup. Include validation (required, email format), error messages, and submit handler with async state.",
                              "children": [
                                {
                                  "component": "email",
                                  "description": "Email input with placeholder and validation for email format. Requires data: placeholders.email.",
                                  "mcpQuery": "Show me Kendo UI TextBox or Input for email type with validation messaging and aria-invalid states.",
                                  "children": ""
                                },
                                {
                                  "component": "checkbox",
                                  "description": "Consent checkbox acknowledging privacy policy. Requires data: consentText, privacyHref, required=true.",
                                  "mcpQuery": "Show me Kendo UI Checkbox with inline link to privacy policy and required validation examples.",
                                  "children": "I agree to the Privacy Policy"
                                },
                                {
                                  "component": "submit",
                                  "description": "Submit button for signup form with loading state.",
                                  "mcpQuery": "Show me Kendo UI Button configured as type=submit with loading/progress indication and disabled when invalid.",
                                  "children": "Sign Up"
                                },
                                {
                                  "component": "error",
                                  "description": "Inline form error message placeholder. Displays on validation or submit error.",
                                  "mcpQuery": "",
                                  "children": "Please enter a valid email."
                                },
                                {
                                  "component": "success",
                                  "description": "Inline form success message placeholder shown after successful submission.",
                                  "mcpQuery": "",
                                  "children": "Thanks! Check your inbox."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "component": "column",
                          "description": "Hero media column supporting image/video/illustration with caption.",
                          "mcpQuery": "",
                          "children": [
                            {
                              "component": "image",
                              "description": "Primary hero media image or illustration. Requires data: media {type, src, alt, poster}.",
                              "mcpQuery": "Show me Kendo UI Media/Avatar/Image approaches for responsive hero images with object-fit, lazy loading, and art direction (srcset). Include examples for decorative images with aria-hidden.",
                              "children": ""
                            },
                            {
                              "component": "caption",
                              "description": "Optional media caption or alt-supporting text. Requires data: media.captions.",
                              "mcpQuery": "",
                              "children": "Product interface preview"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "component": "group",
                      "description": "Trust bar showing partner/customer logos or rating stars. Requires data: trust.items[] {logoSrc, alt, title} or rating {value, count}.",
                      "mcpQuery": "",
                      "children": [
                        {
                          "component": "list",
                          "description": "Logo list for trust indicators.",
                          "mcpQuery": "Show me Kendo UI ListView or Grid for rendering a responsive row of partner logos with equalized sizing and grayscale styling.",
                          "children": [
                            {
                              "component": "item",
                              "description": "Single trust logo with accessible alt text.",
                              "mcpQuery": "",
                              "children": [
                                {
                                  "component": "image",
                                  "description": "Trust logo image. Requires data: item.logoSrc, item.alt.",
                                  "mcpQuery": "Show me Kendo UI Image usage with lazy loading for logo strips and high-contrast modes.",
                                  "children": ""
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "component": "rating",
                          "description": "Optional rating summary badge with average value and count. Requires data: {value, count}.",
                          "mcpQuery": "Show me Kendo UI Rating or custom Badge examples to display an average rating with star icons and count, accessible to screen readers.",
                          "children": "4.8 (2,314 reviews)"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "metadata": {
          "totalComponents": 49,
          "maxDepth": 6,
          "componentTypes": [
            "container",
            "navigation",
            "header",
            "wrapper",
            "logo",
            "title",
            "menu",
            "menuitem",
            "toolbar",
            "button",
            "drawer",
            "list",
            "item",
            "group",
            "main",
            "section",
            "grid",
            "column",
            "label",
            "h1",
            "paragraph",
            "form",
            "email",
            "checkbox",
            "submit",
            "error",
            "success",
            "image",
            "caption",
            "rating"
          ],
          "description": "Comprehensive ACT for a simple landing page with header, hero, and footer, including accessibility, mobile navigation, CTAs, optional hero signup, media, and trust indicators. Includes actionable MCP queries for Kendo-mapped components."
        }
      },
      "routePath": "/generated/76431efe2f3296f6cf06f70fd3a2296a",
      "mcpQueries": {},
      "mcpResponses": {
        "AppBar": "## API Reference Item\n- Name: AppBar\n- Type: Function\n- Summary: Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### AppBar.AppBar.props (children)\nname: props\nfullName: AppBar.AppBar.props\nsyntax:\n  return:\n    type: AppBarProps | RefAttributes\n\n\n## API Reference Item\n- Name: AppBarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Additional Context\n### AppBarProps.children (children)\nname: children\nfullName: AppBarProps.children\nsummary: Represents the child elements that are passed to the AppBar.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.className (children)\nname: className\nfullName: AppBarProps.className\nsummary: Sets additional CSS classes to the AppBar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.id (children)\nname: id\nfullName: AppBarProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root AppBar element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.position (children)\nname: position\nfullName: AppBarProps.position\nsummary: \"Specifies the AppBar position ([see example]({% slug positioning_appbar %}#toc-position)).\\r\\n\\r\\n* The possible values are:\\r\\n* 'top' (Default)\\r\\n* 'bottom'\"\nsyntax:\n  return:\n    type: AppBarPosition\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.positionMode (children)\nname: positionMode\nfullName: AppBarProps.positionMode\nsummary: \"Specifies the AppBar position mode ([see example]({% slug positioning_appbar %}#toc-position-mode)).\\r\\n\\r\\n* The possible values are:\\r\\n* 'static' (Default)\\r\\n* 'sticky'\\r\\n* 'fixed'\"\nsyntax:\n  return:\n    type: AppBarPositionMode\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.style (children)\nname: style\nfullName: AppBarProps.style\nsummary: Sets additional CSS styles to the AppBar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.themeColor (children)\nname: themeColor\nfullName: AppBarProps.themeColor\nsummary: \"Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\\r\\n\\r\\n* The possible values are:\\r\\n* \\n`light`\\n (Default)\\r\\n* 'primary'\\r\\n* 'secondary'\\r\\n* 'tertiary'\\r\\n* 'info'\\r\\n* 'success'\\r\\n* 'warning'\\r\\n* 'error'\\r\\n* 'dark'\\r\\n* 'inherit'\\r\\n* 'inverse'\"\nsyntax:\n  return:\n    type: AppBarThemeColor\npackageName: '@progress/kendo-react-layout'\n\n\nThe AppBar is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the AppBar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features The AppBar provides information and actions related to the current application screen. It is typically used to show page titles, brand identity and can contain navigation items.\nThis   is   a  Free React  AppBarThe KendoReact  AppBar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the AppBar in action. <a href=\"/kendo-react-ui-develop/components/layout/appbar/positioning\">Positioning</a>—The built-in options allow you to specify the position of the component relative to the page content.\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/content-arrangement\">Content Arrangement</a>—You can easily arrange the layout of the appbar content by using sections, spacings, and separators.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Grid": "## API Reference Item\n- Name: GridProps.autoProcessData\n- Type: Property\n- Summary: Enables data-processing inside the GridComponent based on its state.\r\nProvides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Additional Context\n### GridProps.adaptive (children)\nname: adaptive\nfullName: GridProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: GridProps.adaptiveTitle\nsummary: Specifies the text that is rendered as title in the adaptive popup.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.cells (children)\nname: cells\nfullName: GridProps.cells\nsummary: >-\n  Defines a set of custom cell components that the Grid will render instead of\n  the default cells.\nsyntax:\n  return:\n    type: GridCellsSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.children (children)\nname: children\nfullName: GridProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### GridProps.className (children)\nname: className\nfullName: GridProps.className\nsummary: Sets a class for the Grid DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.clipboard (children)\nname: clipboard\nfullName: GridProps.clipboard\nsummary: |-\n  Enables clipboard copy, cut, and paste manipulations. Accepts \n  `ClipboardSettings`\n   or a boolean value.\nsyntax:\n  return:\n    type: boolean | ClipboardSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenu (children)\nname: columnMenu\nfullName: GridProps.columnMenu\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the column\n  menu of the Grid.\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenuIcon (children)\nname: columnMenuIcon\nfullName: GridProps.columnMenuIcon\nsummary: \"Globally overrides the default (three vertical dots) column menu icon for the whole Grid. If set, the prop can be overridden on column level\\r\\n using the ([menuIcon]({% slug api_grid_gridcolumnprops %}#toc-menuicon)) property.\"\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnVirtualization (children)\nname: columnVirtualization\nfullName: GridProps.columnVirtualization\nsummary: >-\n  Enables virtualization of the columns. If virtualization is enabled, the\n  columns outside the view are not rendered.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnsState (children)\nname: columnsState\nfullName: GridProps.columnsState\nsummary: The collection of column states of the grid.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.contextMenu (children)\nname: contextMenu\nfullName: GridProps.contextMenu\nsummary: Specifies the context menu settings applied to the Grid.\nsyntax:\n  return:\n    type: >-\n      boolean | GridContextMenuOptions | (options: GridCellBaseOptions) =>\n      boolean | GridContextMenuOptions\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.data (children)\nname: data\nfullName: GridProps.data\nsummary: \"Sets the data of the Grid ([see example]({% slug paging_grid %})). If you use paging, the \\n`data`\\n option has to contain only the items for the current page. It takes values of type null, any or [DataResult]({% slug api_kendo-data-query_dataresult%})\\r\\nAccepts values of type \\n`null`\\n, \\n`any[]`\\n, or \\n`DataResult`\\n.\"\nsyntax:\n  return:\n    type: null | Array<any> | DataResult\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.dataItemKey (children)\nname: dataItemKey\nfullName: GridProps.dataItemKey\nsummary: \"Sets the Grid row key prop to the value of this field in the dataItem.\\r\\nIf not set, the dataItem index will be used for the row key, which might lead to rows not updating during paging or scrolling.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultColumnsState (children)\nname: defaultColumnsState\nfullName: GridProps.defaultColumnsState\nsummary: The default columns state, used only for the initial load.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultDetailExpand (children)\nname: defaultDetailExpand\nfullName: GridProps.defaultDetailExpand\nsummary: |-\n  The default \n  `detailExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultEdit (children)\nname: defaultEdit\nfullName: GridProps.defaultEdit\nsummary: |-\n  The default \n  `edit`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultFilter (children)\nname: defaultFilter\nfullName: GridProps.defaultFilter\nsummary: |-\n  The default \n  `filter`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroup (children)\nname: defaultGroup\nfullName: GridProps.defaultGroup\nsummary: |-\n  The default \n  `group`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroupExpand (children)\nname: defaultGroupExpand\nfullName: GridProps.defaultGroupExpand\nsummary: |-\n  The default \n  `groupExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSearch (children)\nname: defaultSearch\nfullName: GridProps.defaultSearch\nsummary: >-\n  The descriptor by which the data is searched by default. Its first\n  FilterDescriptor populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSelect (children)\nname: defaultSelect\nfullName: GridProps.defaultSelect\nsummary: |-\n  The default \n  `select`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSkip (children)\nname: defaultSkip\nfullName: GridProps.defaultSkip\nsummary: |-\n  The default \n  `skip`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSort (children)\nname: defaultSort\nfullName: GridProps.defaultSort\nsummary: \"The default \\n`sort`\\n state applied to the Grid when using uncontrolled mode.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultTake (children)\nname: defaultTake\nfullName: GridProps.defaultTake\nsummary: |-\n  The default \n  `take`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detail (children)\nname: detail\nfullName: GridProps.detail\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the detail\n  rows of the currently expanded items ([see example]({% slug hierarchy_grid\n  %})).\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailExpand (children)\nname: detailExpand\nfullName: GridProps.detailExpand\nsummary: The descriptor by which the detail row is expanded.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailRowHeight (children)\nname: detailRowHeight\nfullName: GridProps.detailRowHeight\nsummary: Defines the detail row height and forces an equal height to all detail rows.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.edit (children)\nname: edit\nfullName: GridProps.edit\nsummary: The descriptor by which the in-edit mode of an item is defined.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editDialog (children)\nname: editDialog\nfullName: GridProps.editDialog\nsummary: >-\n  Sets a custom edit dialog component that the Grid will render instead of the\n  built-in edit dialog.\nsyntax:\n  return:\n    type: '(props: GridEditDialogProps) => ReactNode'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editable (children)\nname: editable\nfullName: GridProps.editable\nsummary: The Grid editable settings.\nsyntax:\n  return:\n    type: boolean | GridEditableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filter (children)\nname: filter\nfullName: GridProps.filter\nsummary: \"The [descriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}) by which\\r\\nthe data is filtered ([more information and examples]({% slug filtering_grid %})). This affects\\r\\nthe values and buttons in the \\n`FilterRow`\\n of the Grid.\"\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterOperators (children)\nname: filterOperators\nfullName: GridProps.filterOperators\nsummary: The filter operators for the Grid filters.\nsyntax:\n  return:\n    type: GridFilterOperators\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterable (children)\nname: filterable\nfullName: GridProps.filterable\nsummary: |-\n  Enables filtering for the columns with their \n  `field`\n   option set.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.fixedScroll (children)\nname: fixedScroll\nfullName: GridProps.fixedScroll\nsummary: \"Determines if the scroll position will be updated after a data change.\\r\\nIf set to \\n`true`\\n, the scroll will remain in the same position.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.group (children)\nname: group\nfullName: GridProps.group\nsummary: \"The [descriptors]({% slug api_kendo-data-query_groupdescriptor %})[] by which the data will be grouped\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupExpand (children)\nname: groupExpand\nfullName: GridProps.groupExpand\nsummary: The descriptor by which the group is expanded.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupable (children)\nname: groupable\nfullName: GridProps.groupable\nsummary: >-\n  Determines if grouping by dragging and dropping the column headers is allowed\n  ([more information and examples]({% slug groupingbasics_grid %})).\nsyntax:\n  return:\n    type: boolean | GridGroupableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.highlight (children)\nname: highlight\nfullName: GridProps.highlight\nsummary: \"The descriptor by which the highlight state of an item is defined.\\r\\nPassing a boolean value will highlight the whole row, while passing an object will highlight individual cells by their field.\"\nsyntax:\n  return:\n    type: GridHighlightDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.id (children)\nname: id\nfullName: GridProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.language (children)\nname: language\nfullName: GridProps.language\nsummary: \"Sets the language of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.loader (children)\nname: loader\nfullName: GridProps.loader\nsummary: A custom component that the Grid will render instead of the built-in loader.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.locale (children)\nname: locale\nfullName: GridProps.locale\nsummary: \"Sets the locale of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.lockGroups (children)\nname: lockGroups\nfullName: GridProps.lockGroups\nsummary: \"Defines if the group descriptor columns are locked (frozen or sticky).\\r\\nLocked columns are the columns that are visible at all times while the user scrolls the component horizontally.\\r\\nDefaults to \\n`false`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.navigatable (children)\nname: navigatable\nfullName: GridProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the Grid.\\r\\nBy default, navigation is disabled and the Grid content is accessible in the normal tab sequence.\"\nsyntax:\n  return:\n    type: boolean | NavigatableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onClipboard (children)\nname: onClipboard\nfullName: GridProps.onClipboard\nsummary: \"Fires when clipboard support is enabled, and one of the actions (e.g., copy) is triggered.\\r\\nAccepts a \\n`GridClipboardEvent`\\n object.\"\nsyntax:\n  return:\n    type: '(event: GridClipboardEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnReorder (children)\nname: onColumnReorder\nfullName: GridProps.onColumnReorder\nsummary: Fires when the columns are reordered.\nsyntax:\n  return:\n    type: '(event: GridColumnReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnResize (children)\nname: onColumnResize\nfullName: GridProps.onColumnResize\nsummary: >-\n  Fires when a column is resized. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridColumnResizeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnsStateChange (children)\nname: onColumnsStateChange\nfullName: GridProps.onColumnsStateChange\nsummary: Fires when the columns state of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridColumnsStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenu (children)\nname: onContextMenu\nfullName: GridProps.onContextMenu\nsummary: >-\n  The event that is fired when the ContextMenu is activated. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenuItemClick (children)\nname: onContextMenuItemClick\nfullName: GridProps.onContextMenuItemClick\nsummary: >-\n  The event that is fired when the ContextMenu item is clicked. Only fired when\n  the Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuItemClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDataStateChange (children)\nname: onDataStateChange\nfullName: GridProps.onDataStateChange\nsummary: >-\n  Fires when the data state of the Grid is changed ([more information]({% slug\n  localoperations_grid %}) and [example]({% slug odataserveroperations_grid\n  %})).\nsyntax:\n  return:\n    type: '(event: GridDataStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDetailExpandChange (children)\nname: onDetailExpandChange\nfullName: GridProps.onDetailExpandChange\nsummary: Fires when the user expands or collapses a detail row.\nsyntax:\n  return:\n    type: '(event: GridDetailExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onEditChange (children)\nname: onEditChange\nfullName: GridProps.onEditChange\nsummary: Fires when the user enters or exits an in-edit mode of a row or cell.\nsyntax:\n  return:\n    type: '(event: GridEditChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onFilterChange (children)\nname: onFilterChange\nfullName: GridProps.onFilterChange\nsummary: >-\n  Fires when the Grid filter is modified through the UI. You must handle the\n  event and filter the data.\nsyntax:\n  return:\n    type: '(event: GridFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupChange (children)\nname: onGroupChange\nfullName: GridProps.onGroupChange\nsummary: \"Fires when the grouping of the Grid is changed. You have to handle the event yourself and group the data\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: '(event: GridGroupChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupExpandChange (children)\nname: onGroupExpandChange\nfullName: GridProps.onGroupExpandChange\nsummary: Fires when the user expands or collapses a group.\nsyntax:\n  return:\n    type: '(event: GridGroupExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHeaderSelectionChange (children)\nname: onHeaderSelectionChange\nfullName: GridProps.onHeaderSelectionChange\nsummary: >-\n  Fires when the user clicks the checkbox of a column header whose type is set\n  to \n\n  `checkbox`\n\n  .\nsyntax:\n  return:\n    type: '(event: GridHeaderSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHighlightChange (children)\nname: onHighlightChange\nfullName: GridProps.onHighlightChange\nsummary: >-\n  Fires when the Grid highlight is modified. You must handle the event and\n  filter the data.\nsyntax:\n  return:\n    type: '(event: GridHighlightChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onItemChange (children)\nname: onItemChange\nfullName: GridProps.onItemChange\nsummary: Fires when the user changes the values of the item.\nsyntax:\n  return:\n    type: '(event: GridItemChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onKeyDown (children)\nname: onKeyDown\nfullName: GridProps.onKeyDown\nsummary: >-\n  Fires when the user press keyboard key. Only fired when the Grid is run as a\n  client component.\nsyntax:\n  return:\n    type: '(event: GridKeyDownEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onNavigationAction (children)\nname: onNavigationAction\nfullName: GridProps.onNavigationAction\nsummary: >-\n  Fires when Grid keyboard navigation position is changed. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridNavigationActionEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPageChange (children)\nname: onPageChange\nfullName: GridProps.onPageChange\nsummary: Fires when the page of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridPageChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPdfExport (children)\nname: onPdfExport\nfullName: GridProps.onPdfExport\nsummary: Fires when the user clicks the PDF export button.\nsyntax:\n  return:\n    type: '(event: Object) => Promise'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowClick (children)\nname: onRowClick\nfullName: GridProps.onRowClick\nsummary: Fires when the user clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowDoubleClick (children)\nname: onRowDoubleClick\nfullName: GridProps.onRowDoubleClick\nsummary: Fires when the user double clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowDoubleClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowReorder (children)\nname: onRowReorder\nfullName: GridProps.onRowReorder\nsummary: Fires when the user reorders a row.\nsyntax:\n  return:\n    type: '(event: GridRowReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onScroll (children)\nname: onScroll\nfullName: GridProps.onScroll\nsummary: >-\n  Fires when Grid is scrolled. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSearchChange (children)\nname: onSearchChange\nfullName: GridProps.onSearchChange\nsummary: Fires when the search value of the GridSearchBox is changed.\nsyntax:\n  return:\n    type: '(event: GridSearchChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSelectionChange (children)\nname: onSelectionChange\nfullName: GridProps.onSelectionChange\nsummary: Fires when the user tries to select or deselect a row or cell.\nsyntax:\n  return:\n    type: '(event: GridSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSortChange (children)\nname: onSortChange\nfullName: GridProps.onSortChange\nsummary: \"Fires when the sorting of the Grid is changed. You must handle the event and sort the data.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: '(event: GridSortChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pageSize (children)\nname: pageSize\nfullName: GridProps.pageSize\nsummary: >-\n  Defines the page size used by the Grid pager. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pageable (children)\nname: pageable\nfullName: GridProps.pageable\nsummary: \"Configures the pager of the Grid. Accepts \\n`GridPagerSettings`\\n or a boolean value.([see example]({% slug paging_grid %}))\\r\\n\\r\\nThe available options are:\\r\\n- \\n`buttonCount: Number`\\n&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.\\r\\n- \\n`info: Boolean`\\n&mdash;Toggles the information about the current page and the total number of records.\\r\\n- \\n`type: PagerType`\\n&mdash;Accepts the \\n`numeric`\\n (buttons with numbers) and \\n`input`\\n (input for typing the page number) values.\\r\\n- \\n`pageSizes: Boolean`\\n or \\n`Array<number>`\\n&mdash;Shows a menu for selecting the page size.\\r\\n- \\n`pageSizeValue: String or Number`\\n&mdash;Sets the selected value of the page size Dropdownlist. It is useful when the selected value could also be a string not only a number.\\r\\n- \\n`previousNext: Boolean`\\n&mdash;Toggles the **Previous** and **Next** buttons.\\r\\n- \\n`navigatable: Boolean`\\n&mdash;Defines if the pager will be navigatable.\\r\\n- \\n`responsive: Boolean`\\n&mdash;Defines if the pager will be responsive. If true, hides the tools that do not fit to the available space.\\r\\n- \\n`adaptive: Boolean`\\n&mdash;Providing different rendering of the page sizes select element based on the screen dimensions.\\r\\n- \\n`adaptiveTitle: String`\\n&mdash;Specifies the text that is rendered as title in the adaptive page sizes select element.\"\nsyntax:\n  return:\n    type: boolean | GridPagerSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pager (children)\nname: pager\nfullName: GridProps.pager\nsummary: \"The pager component that the Grid will render instead of the built-in pager.\\r\\n It takes values of type null and ComponentType&lt;[PagerProps]({% slug api_data-tools_pagerprops %})&gt\"\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pdf (children)\nname: pdf\nfullName: GridProps.pdf\nsummary: \"When set to true the Grid pdf export will be enabled.\\r\\nIf set to an object, the Grid will use the provided settings to export the PDF.\"\nsyntax:\n  return:\n    type: boolean | GridProps\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.reorderable (children)\nname: reorderable\nfullName: GridProps.reorderable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can reorder columns by dragging their header cells ([see\n  example]({% slug reordering_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.resizable (children)\nname: resizable\nfullName: GridProps.resizable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can resize columns by dragging the edges (resize handles) of their\n  header cells ([see example]({% slug resizing_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowHeight (children)\nname: rowHeight\nfullName: GridProps.rowHeight\nsummary: >-\n  Defines the row height and forces an equal height to all rows ([see\n  example]({% slug scrollmodes_grid %})).\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowReorderable (children)\nname: rowReorderable\nfullName: GridProps.rowReorderable\nsummary: Defines the row reorder settings.\nsyntax:\n  return:\n    type: boolean | GridRowReorderSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowSpannable (children)\nname: rowSpannable\nfullName: GridProps.rowSpannable\nsummary: Enables the built-in row span feature of the Grid.\nsyntax:\n  return:\n    type: boolean | GridRowSpannableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rows (children)\nname: rows\nfullName: GridProps.rows\nsyntax:\n  return:\n    type: GridRowsSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.scrollable (children)\nname: scrollable\nfullName: GridProps.scrollable\nsummary: \"Defines the scroll mode that is used by the Grid ([see example]({% slug scrollmodes_grid %})).\\r\\n\\r\\n The available options are:\\r\\n - \\n`none`\\n&mdash;Renders no scrollbar.\\r\\n - \\n`scrollable`\\n&mdash;This is the default scroll mode. It requires the setting of the \\n`height`\\n option.\\r\\n - \\n`virtual`\\n&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.\"\nsyntax:\n  return:\n    type: ScrollMode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.search (children)\nname: search\nfullName: GridProps.search\nsummary: >-\n  The descriptor by which the data is searched. Its first FilterDescriptor\n  populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.searchFields (children)\nname: searchFields\nfullName: GridProps.searchFields\nsummary: Defines the fields of the data that are filtered by the GridSearchBox.\nsyntax:\n  return:\n    type: Array<string | SearchField>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.select (children)\nname: select\nfullName: GridProps.select\nsummary: \"The [descriptor]({% slug api_data-tools_selectdescriptor %}) by which the selected state of an item is defined.\\r\\nPassing a boolean value will select the whole row, while passing an array of strings will select individual.\"\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.selectable (children)\nname: selectable\nfullName: GridProps.selectable\nsummary: The Grid selectable settings.\nsyntax:\n  return:\n    type: boolean | GridSelectableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.showLoader (children)\nname: showLoader\nfullName: GridProps.showLoader\nsummary: Specifies whether the loader of the Grid will be displayed.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.size (children)\nname: size\nfullName: GridProps.size\nsummary: \"Configures the \\n`size`\\n of the Grid.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\"\nsyntax:\n  return:\n    type: '\"small\" | \"medium\"'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.skip (children)\nname: skip\nfullName: GridProps.skip\nsummary: >-\n  Defines the number of records that will be skipped by the pager ([see\n  example]({% slug paging_grid %})). Required by the paging functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.sort (children)\nname: sort\nfullName: GridProps.sort\nsummary: >-\n  The ([descriptors]({% slug api_kendo-data-query_sortdescriptor %})) by which\n  the data is sorted. Applies the sorting styles and buttons to the affected\n  columns.\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.sortable (children)\nname: sortable\nfullName: GridProps.sortable\nsummary: \"Enables sorting for the columns with their \\n`field`\\n option set.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: SortSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.style (children)\nname: style\nfullName: GridProps.style\nsummary: |-\n  Represents the \n  `style`\n   HTML attribute.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.take (children)\nname: take\nfullName: GridProps.take\nsummary: |-\n  Alias for the \n  `pageSize`\n   property. If \n  `take`\n   is set, \n  `pageSize`\n   will be ignored.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.total (children)\nname: total\nfullName: GridProps.total\nsummary: >-\n  Defines the total number of data items in all pages. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n\n## API Reference Item\n- Name: Grid\n- Type: Function\n- Summary: Represents the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nconst App = () => {\n    return <Grid />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Grid.Grid.props (children)\nname: props\nfullName: Grid.Grid.props\nsyntax:\n  return:\n    type: GridProps | RefAttributes\n\n\nEnable the autoProcessData prop of the Grid to allow the component to handle the data state management internally.\n\n\nSet the dataItemKey prop to an unique value field from the bound to the Grid data.\n\nAdd Pagination\n\n\nEnable the pageble prop of the Grid to enable pagination.\nConfigure the defaultTake and defaultSkip props to specify the initially loaded page.\n\nEnable Filtering\n\n\nConfigure the <Grid> props to enable filtering.\n\nfilterable enables the built-in filter row, rendered right below the column titles.\ndefaultFilter (optional) is the descriptor by which the data is filtered initially.\n\nEnable Sorting\n\nEnable the autoProcessData prop of the Grid to allow the component to handle the data state management internally.\n\n\nSet the dataItemKey prop to an unique value field from the bound to the Grid data.\n\nAdd Pagination\n\n\nEnable the pageble prop of the Grid to enable pagination.\nConfigure the defaultTake and defaultSkip props to specify the initially loaded page.\n\nEnable Filtering\n\n\nConfigure the <Grid> props to enable filtering.\n\nfilterable enables the built-in filter row, rendered right below the column titles.\ndefaultFilter (optional) is the descriptor by which the data is filtered initially.\n\nEnable Sorting\n\nIn this section, you’ll try out several Grid features, but let’s start by importing the component and adding some sample data.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Avatar": "## API Reference Item\n- Name: Avatar\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### Avatar.Avatar.props (children)\nname: props\nfullName: Avatar.Avatar.props\nsyntax:\n  return:\n    type: AvatarProps\n\n\n## API Reference Item\n- Name: AvatarProps\n- Type: Interface\n- Summary: \n- Syntax: \n\n## Additional Context\n### AvatarProps.border (children)\nname: border\nfullName: AvatarProps.border\nsummary: Sets a border to the Avatar.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.children (children)\nname: children\nfullName: AvatarProps.children\nsummary: Sets the Avatar children elements.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.className (children)\nname: className\nfullName: AvatarProps.className\nsummary: Sets additional classes to the Avatar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.fillMode (children)\nname: fillMode\nfullName: AvatarProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.rounded (children)\nname: rounded\nfullName: AvatarProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.size (children)\nname: size\nfullName: AvatarProps.size\nsummary: \"Configures the \\n`size`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.src (children)\nname: src\nfullName: AvatarProps.src\nsummary: Sets the URL for the image when type is 'image'.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.style (children)\nname: style\nfullName: AvatarProps.style\nsummary: Sets additional CSS styles to the Avatar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.themeColor (children)\nname: themeColor\nfullName: AvatarProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- base\\r\\n- primary\\r\\n- secondary\\r\\n- tertiary\\r\\n- info\\r\\n- success\\r\\n- error\\r\\n- warning\\r\\n- dark\\r\\n- light\\r\\n- inverse\\r\\n- null&mdash;Does not set a themeColor \\n`className`\\n.\"\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.type (children)\nname: type\nfullName: AvatarProps.type\nsummary: \"Sets the type of the Avatar.\\r\\n\\r\\nThe supported values are:\\r\\n* \\n`image`\\n\\r\\n* \\n`text`\\n\\r\\n* \\n`icon`\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\nThe Avatar component is typically used to display images, icons, or initials representing people or other entities.\nThis   is   a  Free React  AvatarThe KendoReact  Avatar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Avatar in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... The Avatar is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Avatar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features\n\nTo specify a custom avatar size, use the <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#style\">style</a>property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFill Mode\n\nThe Avatar enables you to set styling options and create solid or outline avatars by setting the fillMode property.\nThe available <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#fillmode\">fillMode</a> values are:\n\nsolid (Default)\noutline\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Button": "## API Reference Item\n- Name: ButtonProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Button component]({% slug overview_button %}).\r\nExtends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).\n- Syntax: \n\n## Additional Context\n### ButtonProps.disabled (children)\nname: disabled\nfullName: ButtonProps.disabled\nsummary: >-\n  Specifies if the Button is disabled ([see example]({% slug disabled_button\n  %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.endIcon (children)\nname: endIcon\nfullName: ButtonProps.endIcon\nsummary: \"Sets an SVG icon or custom element after the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.fillMode (children)\nname: fillMode\nfullName: ButtonProps.fillMode\nsummary: |-\n  Configures the \n  `fillMode`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\" | \"link\" | \"clear\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.icon (children)\nname: icon\nfullName: ButtonProps.icon\nsummary: >-\n  Defines the name for an existing icon in a KendoReact theme ([see example]({%\n  slug icons_button %})). The icon renders inside the Button by a \n\n  `span.k-icon`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconClass (children)\nname: iconClass\nfullName: ButtonProps.iconClass\nsummary: >-\n  Defines a CSS class — or multiple classes separated by spaces — which apply to\n  a \n\n  `span`\n   element inside the Button ([see example]({% slug icons_button %})). Allows you to use custom icons.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconSize (children)\nname: iconSize\nfullName: ButtonProps.iconSize\nsummary: |-\n  Configures the \n  `size`\n   of the SVG icon that displays inside the Button.\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageAlt (children)\nname: imageAlt\nfullName: ButtonProps.imageAlt\nsummary: >-\n  Defines the alternative text of the image that renders inside the Button\n  component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageUrl (children)\nname: imageUrl\nfullName: ButtonProps.imageUrl\nsummary: |-\n  Defines a URL which is used as an \n  `img`\n   element inside the Button ([see example]({% slug icons_button %})). The URL can be relative or absolute. If relative, it evaluates in relation to the URL of the web page.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.rounded (children)\nname: rounded\nfullName: ButtonProps.rounded\nsummary: |-\n  Configures the \n  `roundness`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.selected (children)\nname: selected\nfullName: ButtonProps.selected\nsummary: Sets the selected state of the Button. You can use this for controlled mode.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.size (children)\nname: size\nfullName: ButtonProps.size\nsummary: |-\n  Configures the \n  `size`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.startIcon (children)\nname: startIcon\nfullName: ButtonProps.startIcon\nsummary: \"Sets an SVG icon or custom element before the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.svgIcon (children)\nname: svgIcon\nfullName: ButtonProps.svgIcon\nsummary: Defines the SVG icon that renders inside the Button component.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.themeColor (children)\nname: themeColor\nfullName: ButtonProps.themeColor\nsummary: |-\n  Configures the \n  `themeColor`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.title (children)\nname: title\nfullName: ButtonProps.title\nsummary: |-\n  Sets the \n  `title`\n   HTML attribute of the Button.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.togglable (children)\nname: togglable\nfullName: ButtonProps.togglable\nsummary: >-\n  Provides visual styling that shows if the Button is selected ([see example]({%\n  slug toggleable_button %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.unstyled (children)\nname: unstyled\nfullName: ButtonProps.unstyled\nsummary: The unstyled option classes.\nsyntax:\n  return:\n    type: ButtonsClassStructure\npackageName: '@progress/kendo-react-buttons'\n\n\n## API Reference Item\n- Name: Button\n- Type: Function\n- Summary: \n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return(\n        <Button>Button</Button>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Button.Button.props (children)\nname: props\nfullName: Button.Button.props\nsyntax:\n  return:\n    type: ButtonProps | RefAttributes\n\n\nThe following demo shows the components included in the KendoReact Buttons package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... <a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/button\">\n\nbutton\n\n\nButton\nA React button component.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/buttongroup\">\n\nbuttongroup\n\n\nButtonGroup\nGrouped Buttons with identical functionalities.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/chip\">\n\nButton Events\n\nThe KendoReact Button generates a variety of events that you can handle. This allows you to tailor the Button's behavior to your specific requirements.\nThe following example demonstrates basic Button events.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "StackLayout": "## API Reference Item\n- Name: StackLayout\n- Type: Function\n- Summary: Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\r\nArranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={100}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StackLayout.StackLayout.props (children)\nname: props\nfullName: StackLayout.StackLayout.props\nsyntax:\n  return:\n    type: StackLayoutProps | RefAttributes\n\n\n## API Reference Item\n- Name: StackLayoutProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\n- Syntax: \n\n## Additional Context\n### StackLayoutProps.align (children)\nname: align\nfullName: StackLayoutProps.align\nsummary: \"Specifies the horizontal and vertical alignment of the inner StackLayout elements.\\r\\nDemo ([here]({% slug layout_stacklayout %}#toc-horizontal-alignment)) and ([here]({% slug layout_stacklayout %}#toc-vertical-alignment)).\\r\\n\\r\\nThe possible keys are:\\r\\n* \\n`horizontal`\\n&mdash;Defines the possible horizontal alignment of the inner StackLayout elements.\\r\\n  * \\n`start`\\n&mdash;Uses the start point of the container.\\r\\n  * \\n`center`\\n&mdash;Uses the central point of the container.\\r\\n  * \\n`end`\\n&mdash;Uses the end point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the width of the container.\\r\\n* \\n`vertical`\\n&mdash;Defines the possible vertical alignment of the inner StackLayout elements.\\r\\n  * \\n`top`\\n&mdash;Uses the top point of the container.\\r\\n  * \\n`middle`\\n&mdash;Uses the middle point of the container.\\r\\n  * \\n`bottom`\\n&mdash;Uses the bottom point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the height of the container.\"\nsyntax:\n  return:\n    type: StackLayoutAlign\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.children (children)\nname: children\nfullName: StackLayoutProps.children\nsummary: The React elements that will be rendered inside the StackLayout.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.className (children)\nname: className\nfullName: StackLayoutProps.className\nsummary: Sets additional CSS classes to the StackLayout.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.gap (children)\nname: gap\nfullName: StackLayoutProps.gap\nsummary: >-\n  Specifies the gap between the inner elements ([see example]({% slug\n  layout_stacklayout %}#toc-gaps)).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.id (children)\nname: id\nfullName: StackLayoutProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root StackLayout element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.orientation (children)\nname: orientation\nfullName: StackLayoutProps.orientation\nsummary: \"Specifies the StackLayout orientation.\\r\\n([see example]({% slug layout_stacklayout %}#toc-orientation)).\\r\\n\\r\\nThe possible values are:\\r\\n* (Default)\\n`horizontal`\\n\\r\\n* \\n`vertical`\"\nsyntax:\n  return:\n    type: StackLayoutOrientation\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.style (children)\nname: style\nfullName: StackLayoutProps.style\nsummary: Sets additional CSS styles to the StackLayout.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n\nLayout\n\nThe StackLayout component provides options for controlling its appearance.\nTo customize the layout of the StackLayout, use any of the following configuration options:\n\nOrientation\nGaps\nHorizontal alignment\nVertical alignment\nNested StackLayouts\n\nOrientation\n\nTo set the StackLayout orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#orientation\">orientation</a> property.\nBy default, orientation is set to horizontal.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGaps top—Uses the top point of the container.\nmiddle—Uses the middle point of the container.\nbottom—Uses the bottom point of the container.\n(Default)stretch—Stretches the items to fill the height of the container.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nNested StackLayouts\n\nThe component enables you to create a more complex layout that includes both horizontal and vertical items by nesting StackLayout components inside one another.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe following example demonstrates the StackLayout component in action and also showcases other KendoReact components—the <a href=\"/kendo-react-ui-develop/components/buttons/buttongroup\">ButtonGroup</a>, <a href=\"/kendo-react-ui-develop/components/layout/avatar\">Avatars</a> and <a href=\"/kendo-react-ui-develop/components/layout/card\">Cards</a> components. The components are arranged in a stack and can be switched from horizontal to vertical orientation.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "TextBox": "## API Reference Item\n- Name: TextBoxProps\n- Type: Interface\n- Summary: Represents the properties of the KendoReact [TextBox]({% slug api_inputs_textbox %}) component\n- Syntax: \n\n## Additional Context\n### TextBoxProps.autoFocus (children)\nname: autoFocus\nfullName: TextBoxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the TextBox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.fillMode (children)\nname: fillMode\nfullName: TextBoxProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.inputAttributes (children)\nname: inputAttributes\nfullName: TextBoxProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.onChange (children)\nname: onChange\nfullName: TextBoxProps.onChange\nsummary: |-\n  The \n  `onChange`\n   callback of the \n  `input`\n   element inside the TextBox.\nsyntax:\n  return:\n    type: '(event: TextBoxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.prefix (children)\nname: prefix\nfullName: TextBoxProps.prefix\nsummary: Sets a custom prefix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.rounded (children)\nname: rounded\nfullName: TextBoxProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.size (children)\nname: size\nfullName: TextBoxProps.size\nsummary: \"Configures the \\n`size`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.suffix (children)\nname: suffix\nfullName: TextBoxProps.suffix\nsummary: Sets a custom suffix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.valid (children)\nname: valid\nfullName: TextBoxProps.valid\nsummary: |-\n  Indicates if the component is in \n  `valid`\n   state\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: TextBox\n- Type: Function\n- Summary: Represents the [KendoReact TextBox component]({% slug overview_textbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextBox, TextBoxChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [name, setName] = React.useState<string>('');\n\n    const handleChange = (event: TextBoxChangeEvent) => {\n        setName(event.value as string);\n    };\n\n    return <TextBox value={name} onChange={handleChange} placeholder=\"Enter your name\" />;\n}\n\n```\n\n\n## Additional Context\n### TextBox.TextBox.props (children)\nname: props\nfullName: TextBox.TextBox.props\nsyntax:\n  return:\n    type: TextBoxProps | RefAttributes\n\n\nThe KendoReact TextBox component provides options for creating composite inputs that you can integrate within forms or use as standalone items.\nThis   is   a  Free React  TextBoxThe KendoReact  TextBox   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the TextBox in action. <a href=\"/kendo-react-ui-develop/components/inputs/floating-labels\">Floating Label</a>—Add a Floating Label functionality to the TextBox component.\n<a href=\"/kendo-react-ui-develop/components/inputs/textbox/disabled\">Disabled state</a>—You can use the configuration options of the TextBox to disable the component so that users are not able to interact with it.\n<a href=\"/kendo-react-ui-develop/components/inputs/textbox/appearance\">Appearance</a>—All KendoReact Inputs enable you to set their dimensions.\n\nForms Support\n\nThe KendoReact TextBox component can be easily integrated with our <a href=\"/kendo-react-ui-develop/components/form\">KendoReact Form</a>.\nThe form enables you to validate the TextBox and prevent the submission of the forms which are in an invalid state.\nBy utilizing the KendoReact Form component we can take advantage of the <a href=\"/kendo-react-ui-develop/components/form/validation\">Validation</a> functionality and render additional custom component depending on the form's validity state.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Error": "## API Reference Item\n- Name: ErrorProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Error component.\n- Syntax: \n\n## Additional Context\n### ErrorProps.children (children)\nname: children\nfullName: ErrorProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.className (children)\nname: className\nfullName: ErrorProps.className\nsummary: Sets a class of the Error DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.direction (children)\nname: direction\nfullName: ErrorProps.direction\nsummary: \"Specifies the alignment of the Error text.\\r\\n\\r\\nThe possible values are:\\r\\n* (Default) \\n`start`\\n\\r\\n* \\n`end`\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\"'\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.id (children)\nname: id\nfullName: ErrorProps.id\nsummary: \"Represents the id of the Error element.\\r\\nThe value should be also set to the editor's \\n`ariaDescribedBy`\\n property.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.style (children)\nname: style\nfullName: ErrorProps.style\nsummary: The styles that are applied to the Error.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-labels'\n\n\n## API Reference Item\n- Name: Error\n- Type: Function\n- Summary: Represents the KendoReact Error component.\r\nRender the error text that will be shown underneath the form editor after a validation.\n- Syntax: \n\n## Examples\n\n\n## Additional Context\n### Error.Error.props (children)\nname: props\nfullName: Error.Error.props\nsyntax:\n  return:\n    type: ErrorProps\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/labels/error\">\n\nError\n\n\nError\n\n        A component that displays an error next to the respective focusable component when the input is invalid.\n      \n</a>\n\nKey Features\n\nThe KendoReact Labels provide the following key features. Note that this is not an exhaustive list.\n\nAdd the Error component after the desired editor.\nSet the <a href=\"/kendo-react-ui-develop/components/labels/api/errorprops#id\">id</a> property of the Error and the aria-describedby property of the editor.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... Error Overview\n\nThe Error component enables you to display an error message to React components.\nThis   is   a  Free React  ErrorThe KendoReact  Error   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example shows how to set up the Error component:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Label": "## API Reference Item\n- Name: Label\n- Type: Function\n- Summary: Represents the KendoReact Label component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Label } from '@progress/kendo-react-labels';\n\nexport default function App() {\n    return (\n        <Label>Label</Label>\n    );\n}\n\n```\n\n\n## Additional Context\n### Label.Label.props (children)\nname: props\nfullName: Label.Label.props\nsyntax:\n  return:\n    type: LabelProps\n\n\n## API Reference Item\n- Name: Label.Label(props:LabelProps)\n- Type: CallSignature\n- Summary: Represents the KendoReact Label component.\n- Syntax: \n\n- Return Type: name: Element\nfullName: Element\nsyntax: {}\npackageName: '@progress/kendo-drawing'\n\n\n## API Reference Item\n- Name: LabelProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Label component.\n- Syntax: \n\n## Additional Context\n### LabelProps.children (children)\nname: children\nfullName: LabelProps.children\nsummary: \"The text that will be rendered inside the label element.\\r\\nCan be omitted for editors without label to keep form layout.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.className (children)\nname: className\nfullName: LabelProps.className\nsummary: Sets a class of the Label DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorDisabled (children)\nname: editorDisabled\nfullName: LabelProps.editorDisabled\nsummary: Specifies if the editor is disabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorId (children)\nname: editorId\nfullName: LabelProps.editorId\nsummary: \"The id of the editor.\\r\\nRepresent the [\\n`htmlFor`\\n](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) property, which will be set to the \\n`label`\\n element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorRef (children)\nname: editorRef\nfullName: LabelProps.editorRef\nsummary: \"An optional React ref to the editor.\\r\\nUsed to redirect the click event to the editor when it does not contain native form element.\\r\\nTo be able to work, the editor should have \\n`focus`\\n method or \\n`actionElement`\\n prop on it's ref.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorValid (children)\nname: editorValid\nfullName: LabelProps.editorValid\nsummary: Specifies the validity of the editor. Used to define the editor is invalid.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.id (children)\nname: id\nfullName: LabelProps.id\nsummary: \"Represents the id of the label element.\\r\\nThe value should be set to the editor \\n`ariaLabelledBy`\\n property.\\r\\nCan be used when the editor is not containing native form element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.optional (children)\nname: optional\nfullName: LabelProps.optional\nsummary: If enabled marks the label as optional.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.style (children)\nname: style\nfullName: LabelProps.style\nsummary: The styles that are applied to the Label.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-labels'\n\n\nThe Label component enables you to provide a label functionality to React components. It supports labelling both form elements (e.g.: input element) and custom focusable elements. It can contain Kendo React Input components such as KendoReact DropDownList and NumericTextBox, or HTML elements like input.\n\nYou can customize the label and the bar that indicates the task progress by setting custom styling or custom classes to the inner elements that are responsible for their rendering. To define the custom layout, use the <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#progressstyle\">progressStyle</a> and <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#progressclassname\">progressClassName</a> options for the completed part and <a\n\nThe following demo shows the components included in the KendoReact Labels package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Rating": "## API Reference Item\n- Name: RatingProps\n- Type: Interface\n- Summary: Represents the properties of [Rating]({% slug api_inputs_rating %}) component.\n- Syntax: \n\n## Additional Context\n### RatingProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: RatingProps.ariaDescribedBy\nsummary: Identifies the element(s) which will describe the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: RatingProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.children (children)\nname: children\nfullName: RatingProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.className (children)\nname: className\nfullName: RatingProps.className\nsummary: Adds custom CSS classes to the Rating.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.defaultValue (children)\nname: defaultValue\nfullName: RatingProps.defaultValue\nsummary: Sets the default value of the Rating, used in uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.dir (children)\nname: dir\nfullName: RatingProps.dir\nsummary: |-\n  Specifies the direction of the Rating (\n  `ltr`\n   or \n  `rtl`\n  ).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.disabled (children)\nname: disabled\nfullName: RatingProps.disabled\nsummary: |-\n  Disables the Rating when set to \n  `true`\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.half (children)\nname: half\nfullName: RatingProps.half\nsummary: |-\n  Determines if the value represents a half icon (\n  `true`\n  ) or not (\n  `false`\n  ).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.icon (children)\nname: icon\nfullName: RatingProps.icon\nsummary: Sets a custom icon for the Rating.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.id (children)\nname: id\nfullName: RatingProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the Rating.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.item (children)\nname: item\nfullName: RatingProps.item\nsummary: Represents the rendered Rating item.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.label (children)\nname: label\nfullName: RatingProps.label\nsummary: Sets a custom label for the Rating.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.max (children)\nname: max\nfullName: RatingProps.max\nsummary: Sets the maximum possible value of the Rating.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.min (children)\nname: min\nfullName: RatingProps.min\nsummary: Sets the minimum possible value of the Rating.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.name (children)\nname: name\nfullName: RatingProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.onBlur (children)\nname: onBlur\nfullName: RatingProps.onBlur\nsummary: Fires when the Rating loses focus.\nsyntax:\n  return:\n    type: '(event: RatingItemFocusEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onChange (children)\nname: onChange\nfullName: RatingProps.onChange\nsummary: Fires when the value of the Rating changes.\nsyntax:\n  return:\n    type: '(event: RatingChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onClick (children)\nname: onClick\nfullName: RatingProps.onClick\nsummary: Fires when the Rating is clicked.\nsyntax:\n  return:\n    type: '(event: RatingItemMouseEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onFocus (children)\nname: onFocus\nfullName: RatingProps.onFocus\nsummary: Fires when the Rating is focused.\nsyntax:\n  return:\n    type: '(event: RatingItemFocusEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onKeyDown (children)\nname: onKeyDown\nfullName: RatingProps.onKeyDown\nsummary: Fires when a key is pressed while the Rating is focused.\nsyntax:\n  return:\n    type: '(event: RatingKeyboardEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.precision (children)\nname: precision\nfullName: RatingProps.precision\nsummary: |-\n  Determines the precision of the Rating (\n  `item`\n   or \n  `half`\n  ).\nsyntax:\n  return:\n    type: '\"item\" | \"half\"'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.readonly (children)\nname: readonly\nfullName: RatingProps.readonly\nsummary: |-\n  Sets the \n  `readonly`\n   mode of the Rating.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.required (children)\nname: required\nfullName: RatingProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.selection (children)\nname: selection\nfullName: RatingProps.selection\nsummary: |-\n  Determines the selection mode of the Rating (\n  `continues`\n   or \n  `single`\n  ).\nsyntax:\n  return:\n    type: '\"single\" | \"continues\"'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.step (children)\nname: step\nfullName: RatingProps.step\nsummary: Sets the step value between the minimum and maximum values.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.style (children)\nname: style\nfullName: RatingProps.style\nsummary: Sets additional CSS styles to the Rating.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.svgIcon (children)\nname: svgIcon\nfullName: RatingProps.svgIcon\nsummary: Sets a custom SVG icon for the Rating.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.svgIconOutline (children)\nname: svgIconOutline\nfullName: RatingProps.svgIconOutline\nsummary: Sets a custom outline SVG icon for the Rating.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.tabIndex (children)\nname: tabIndex\nfullName: RatingProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   attribute.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.valid (children)\nname: valid\nfullName: RatingProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.validationMessage (children)\nname: validationMessage\nfullName: RatingProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.validityStyles (children)\nname: validityStyles\nfullName: RatingProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.value (children)\nname: value\nfullName: RatingProps.value\nsummary: Sets the current value of the Rating, used in controlled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: Rating\n- Type: Function\n- Summary: Represents the [KendoReact Rating component]({% slug overview_rating %}).\r\n\r\nAccepts properties of type [RatingProps]({% slug api_inputs_ratingprops %}).\r\nObtaining the \n`ref`\n returns an object of type [RatingHandle]({% slug api_inputs_ratinghandle %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Rating, RatingChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [ratingValue, setRatingValue] = React.useState(2);\n\n    const handleChange = (event: RatingChangeEvent) => {\n        setRatingValue(event.value);\n    };\n\n    return <Rating value={ratingValue} onChange={handleChange} />;\n}\n\n```\n\n\n## Additional Context\n### Rating.Rating.props (children)\nname: props\nfullName: Rating.Rating.props\nsyntax:\n  return:\n    type: RatingProps | RefAttributes\n\n\nRatingItem and Rating component\n\nThe KendoReact RatingItem enables the user to implement different styles for the RatingItem children.\n\nRatingItem customization\n\nThe RatingItem component could be used for customization of the existing rating item. The following example demonstrates the RatingItem in action, changing the icon visualization to heartIcon SvgIcon, based on the existing RatingItem rendering.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nRatingItem override\n\nRating Precision\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Rating component is part of the <a href=\"/kendo-react-ui-develop/components/inputs\">KendoReact Inputs</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Rating and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/inputs/get-started\">Getting Started with the KendoReact Inputs</a> guide.\n\nKey Features\n\nUse its <a href=\"/kendo-react-ui-develop/components/inputs/api/ratingprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/ratingprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Card": "## API Reference Item\n- Name: Card.Card.props\n- Type: Parameter\n- Summary: \n- Syntax: \n\n## API Reference Item\n- Name: Card\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### CardProps (children)\nname: CardProps\nfullName: CardProps\nsyntax:\n  return:\n    type: any\n  parameters:\n    - id: 26200\n      name: key\n      type: string\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - dir\n  - orientation\n  - style\n  - type\n\n\nThe following example demonstrates the Card in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Card is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Card and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features The Card component represents any type of content and all kind of actions about a single subject.\nIt provides clarity, categorization and an attractive way of presenting content.\nThis   is   a  Free React  CardThe KendoReact  Card   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe Card component consists of the following building blocks:\n\nBasic usage\n\nTo specify action buttons in the Card, you can use the CardActions component. You can arrange the content of the buttons either horizontally or vertically, by using the <a href=\"/kendo-react-ui-develop/components/layout/api/cardactionsprops#orientation\">orientation</a> option of the component. To specify their layout utilize the <a href=\"/kendo-react-ui-develop/components/layout/api/cardactionsprops#layout\">layout</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Toolbar": "## API Reference Item\n- Name: Toolbar\n- Type: Function\n- Summary: Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Toolbar>\n            <span>Toolbar content</span>\n        </Toolbar>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Toolbar.Toolbar.props (children)\nname: props\nfullName: Toolbar.Toolbar.props\nsyntax:\n  return:\n    type: ToolbarProps | RefAttributes\n\n\n## API Reference Item\n- Name: ToolbarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Additional Context\n### ToolbarProps.ariaLabel (children)\nname: ariaLabel\nfullName: ToolbarProps.ariaLabel\nsummary: |-\n  Represents the \n  `aria-label`\n   HTML attribute of the Toolbar component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.buttonScrollSpeed (children)\nname: buttonScrollSpeed\nfullName: ToolbarProps.buttonScrollSpeed\nsummary: \"Sets the Toolbar scroll speed in pixels when scrolling via clicking the previous or next button.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.children (children)\nname: children\nfullName: ToolbarProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.className (children)\nname: className\nfullName: ToolbarProps.className\nsummary: Sets additional classes to the Toolbar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.dir (children)\nname: dir\nfullName: ToolbarProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.fillMode (children)\nname: fillMode\nfullName: ToolbarProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n— \\n`solid`\\n — Applies a \\n`background`\\n color and \\n`solid borders`\\n.\\r\\n— \\n`flat`\\n — Sets a \\n`transparent background`\\n and \\n`solid bottom border`\\n.\\r\\n— \\n`outline`\\n — Sets a \\n`transparent background`\\n and \\n`solid borders`\\n.\\r\\n— \\n`null`\\n — This option removes the built-in fill mode styles of the Toolbar. Allows for custom \\n`background`\\n and \\n`border`\\n styles.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.id (children)\nname: id\nfullName: ToolbarProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.keyboardNavigation (children)\nname: keyboardNavigation\nfullName: ToolbarProps.keyboardNavigation\nsummary: |-\n  If set to \n  `false`\n  , it will turn off the built-in keyboard navigation.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.nextButton (children)\nname: nextButton\nfullName: ToolbarProps.nextButton\nsummary: \"Defines the custom component that will be rendered as a next button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.onResize (children)\nname: onResize\nfullName: ToolbarProps.onResize\nsummary: |-\n  The \n  `resize`\n   event of the Toolbar.\nsyntax:\n  return:\n    type: '(event: ToolbarResizeEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.overflow (children)\nname: overflow\nfullName: ToolbarProps.overflow\nsummary: \"Represents the possible overflow mode options of the Toolbar.\\r\\nApplicable when there is not enough space to render all tools.\"\nsyntax:\n  return:\n    type: '\"none\" | \"section\" | \"scroll\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.prevButton (children)\nname: prevButton\nfullName: ToolbarProps.prevButton\nsummary: \"Defines the custom component that will be rendered as a previous button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtons (children)\nname: scrollButtons\nfullName: ToolbarProps.scrollButtons\nsummary: \"Determines the Toolbar scroll buttons visibility.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"auto\" | \"hidden\" | \"visible\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtonsPosition (children)\nname: scrollButtonsPosition\nfullName: ToolbarProps.scrollButtonsPosition\nsummary: \"Determines the Toolbar scroll buttons position.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\" | \"split\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.size (children)\nname: size\nfullName: ToolbarProps.size\nsummary: \"Configures the \\n`size`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n— \\n`small`\\n — Sets the padding of the component to 4px 4px.\\r\\n— \\n`medium`\\n — Sets the padding of the component to 8px 8px.\\r\\n— \\n`large`\\n — Sets the padding of the component to 10px 10px.\\r\\n— \\n`null`\\n — This option removes the the built-in size styles of the Toolbar. Allows for custom \\n`padding`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.style (children)\nname: style\nfullName: ToolbarProps.style\nsummary: The styles that are applied to the Toolbar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.tabIndex (children)\nname: tabIndex\nfullName: ToolbarProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the Toolbar.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n\nToolbar Configuration\n\nThe ListBox enables you to render and customize a toolbar.\nTo render the toolbar, pass the ListBoxToolbar component to the <a href=\"/kendo-react-ui-develop/components/listbox/api/listboxprops#toolbar\">toolbar</a> prop of the ListBox component. This will enable you to:\n\nTo include components in the Toolbar, wrap each of them into a <a href=\"/kendo-react-ui-develop/components/buttons/api/toolbaritem\">ToolbarItem</a>. You can also separate them from each other with the <a href=\"/kendo-react-ui-develop/components/buttons/api/toolbarseparator\">ToolbarSeparator</a> or <a href=\"/kendo-react-ui-develop/components/buttons/api/toolbarspacer\">ToolbarSpacer</a>.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Toolbar is part of the <a href=\"/kendo-react-ui-develop/components/buttons\">KendoReact Buttons</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Toolbar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/buttons/get-started\">Getting Started with the KendoReact Buttons</a> guide.\n\nKey Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Typography": "React Typography Demo Preview\n\nThe following example demonstrates the Typography variants and styles in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Typography is part of the <a href=\"/kendo-react-ui-develop/components/common\">KendoReact Common Utilities</a> component library. The procedures for installing, importing, and using the Common Utilities are identical for all components in the package. To learn how to use the Typography and the rest of the Common Utilities, see the <a href=\"/kendo-react-ui-develop/components/common\">Getting Started with the KendoReact Common Utilities</a> guide.\n\nKey Features The Typography is a reusable component that helps presenting the content in a React application. It could trim down a lot of time as the application grows.\nThis   is   a  Free React  TypographyThe KendoReact  Typography   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe key benefits of the Typography component are:\n\nAppearance\n\nThe Typography component provides many predefined appearance options such as configure the the alignment and transformation of the text, and also change the theme color.\n\nFont Size\n\nTo set the font size of the element, use the <a href=\"/kendo-react-ui-develop/components/common/api/typographyprops#fontsize\">fontSize</a> property.\nThe possible values are:\n\nxsmall\nsmall\nmedium\nlarge\nxlarge\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFont Weight\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Drawer": "## API Reference Item\n- Name: Drawer\n- Type: Function\n- Summary: Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Drawer.Drawer.props (children)\nname: props\nfullName: Drawer.Drawer.props\nsyntax:\n  return:\n    type: DrawerProps | RefAttributes\n\n\n## API Reference Item\n- Name: DrawerProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Additional Context\n### DrawerProps.animation (children)\nname: animation\nfullName: DrawerProps.animation\nsummary: \"Specifies the animation settings of the Drawer.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer animation={{ duration: 300 }} />\\r\\n```\"\nsyntax:\n  return:\n    type: boolean | DrawerAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.children (children)\nname: children\nfullName: DrawerProps.children\nsummary: \"Sets the Drawer items declaratively.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer>\\r\\n  <DrawerItem text=\\\"Home\\\" />\\r\\n</Drawer>\\r\\n```\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.className (children)\nname: className\nfullName: DrawerProps.className\nsummary: |-\n  Specifies a list of CSS classes that will be added to the \n  `k-drawer-container`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.dir (children)\nname: dir\nfullName: DrawerProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute. This is used to switch from LTR to RTL.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.drawerClassName (children)\nname: drawerClassName\nfullName: DrawerProps.drawerClassName\nsummary: |-\n  Specifies a list of CSS classes that will be added to the \n  `k-drawer`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.expanded (children)\nname: expanded\nfullName: DrawerProps.expanded\nsummary: \"Specifies the state of the Drawer\\r\\n([see example]({% slug expanded_state_drawer %})).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer expanded={true} />\\r\\n```\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.item (children)\nname: item\nfullName: DrawerProps.item\nsummary: \"Overrides the default component responsible for visualizing a single item\\r\\n([see example]({% slug custom_rendering %})).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer item={CustomDrawerItem} />\\r\\n```\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.mini (children)\nname: mini\nfullName: DrawerProps.mini\nsummary: \"Enables the mini (compact) view of the Drawer which is displayed when the component is collapsed\\r\\n([see example]({% slug display_modes_drawer %}#toc-mini-view)).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer mini={true} />\\r\\n```\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.miniWidth (children)\nname: miniWidth\nfullName: DrawerProps.miniWidth\nsummary: \"Defines the width of the Drawer when the mini view is enabled and the component is collapsed.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer miniWidth={60} />\\r\\n```\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.mode (children)\nname: mode\nfullName: DrawerProps.mode\nsummary: \"Specifies the mode in which the Drawer will be displayed\\r\\n([see example]({% slug display_modes_drawer %}#toc-expand-modes)).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer mode=\\\"push\\\" />\\r\\n```\"\nsyntax:\n  return:\n    type: '\"push\" | \"overlay\"'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.onOverlayClick (children)\nname: onOverlayClick\nfullName: DrawerProps.onOverlayClick\nsummary: \"The event handler that will be fired when the overlay is clicked.\\r\\nUsed in overlay mode only.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer onOverlayClick={(e) => console.log('Overlay clicked')} />\\r\\n```\"\nsyntax:\n  return:\n    type: '(event: MouseEvent<HTMLDivElement, MouseEvent>) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.onSelect (children)\nname: onSelect\nfullName: DrawerProps.onSelect\nsummary: \"Fires when a Drawer item is selected.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer onSelect={(e) => console.log('Item selected', e)} />\\r\\n```\"\nsyntax:\n  return:\n    type: '(event: DrawerSelectEvent) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.position (children)\nname: position\nfullName: DrawerProps.position\nsummary: \"Specifies the position of the Drawer\\r\\n([see example]({% slug positioning_drawer %})).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer position=\\\"end\\\" />\\r\\n```\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\"'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.style (children)\nname: style\nfullName: DrawerProps.style\nsummary: Sets additional CSS styles to the Drawer.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.tabIndex (children)\nname: tabIndex\nfullName: DrawerProps.tabIndex\nsummary: \"Sets the \\n`tabIndex`\\n property of the Drawer.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer tabIndex={0} />\\r\\n```\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.width (children)\nname: width\nfullName: DrawerProps.width\nsummary: \"Defines the width of the Drawer when it is expanded.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer width={300} />\\r\\n```\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: DrawerProps.items\n- Type: Property\n- Summary: The collection of items that will be rendered in the Drawer\r\n([see example]({% slug overview_drawer %})).\r\n\r\nExample:\r\n\n```jsx\r\n<Drawer items={[{ text: 'Home' }, { text: 'Settings' }]} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\nThe Drawer component works with a flat structure of items by design. However many real world scenarios require a navigation with hierarchical structure.\nThe following example demonstrates how to achieve this by toggling the visibility of the Drawer items depending on the currently selected item.\nThe level property of each item sets its level of nesting beneath the parent element in the hierarchy tree.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Drawer component works with a flat structure of items by design. However many real world scenarios require a navigation with hierarchical structure.\nThe following example demonstrates how to achieve this by toggling the visibility of the Drawer items depending on the currently selected item.\nThe level property of each item sets its level of nesting beneath the parent element in the hierarchy tree.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThis section lists the selectors, attributes, and behavior patterns supported by the component and its composite elements, if any.\nThe Drawer component allows rendering a whole template inside of it. Thus, the accessibility roles are applied only when the built-in data-binding is used.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Menu": "## API Reference Item\n- Name: MenuProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Additional Context\n### MenuProps.animate (children)\nname: animate\nfullName: MenuProps.animate\nsummary: Controls the Popup animation.\nsyntax:\n  return:\n    type: boolean | PopupAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.children (children)\nname: children\nfullName: MenuProps.children\nsummary: Sets the Menu items declaratively.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.className (children)\nname: className\nfullName: MenuProps.className\nsummary: Adds a custom className to the Menu top element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.customCloseItemIds (children)\nname: customCloseItemIds\nfullName: MenuProps.customCloseItemIds\nsummary: \"Sets the ids of the Menu items that will not be closed on mouse-leave. The ids are hierarchical and zero-based.\\r\\nThe first root item has a \\n`0`\\n id. If the first root item has children,\\r\\nthe first child item acquires a \\n`0_0`\\n id and the second acquires a \\n`0_1`\\n id.\"\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.dir (children)\nname: dir\nfullName: MenuProps.dir\nsummary: Sets the direction of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverCloseDelay (children)\nname: hoverCloseDelay\nfullName: MenuProps.hoverCloseDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on item mouse-leave\\r\\n([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverOpenDelay (children)\nname: hoverOpenDelay\nfullName: MenuProps.hoverOpenDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on\\r\\nitem mouse-leave ([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\\r\\nUsed to avoid accidental closure on leaving.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.id (children)\nname: id\nfullName: MenuProps.id\nsummary: Sets the ID of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.itemRender (children)\nname: itemRender\nfullName: MenuProps.itemRender\nsummary: \"A React functional or class component which is used for rendering the innermost part of\\r\\nthe Menu item ([see example]({% slug rendering_menu %}#toc-items)).\\r\\nBy default, the innermost item part includes only the text for the item.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.items (children)\nname: items\nfullName: MenuProps.items\nsummary: Sets the Menu items.\nsyntax:\n  return:\n    type: Array<MenuItemModel>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.linkRender (children)\nname: linkRender\nfullName: MenuProps.linkRender\nsummary: \"A React functional or class component which is used for rendering the link of the item\\r\\n([see example]({% slug rendering_menu %}#toc-links)).\\r\\nThe item link is a part of the visual representation of the item which, by default, includes an arrow, icon, and text.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.onSelect (children)\nname: onSelect\nfullName: MenuProps.onSelect\nsummary: Fires when a Menu item is selected.\nsyntax:\n  return:\n    type: '(event: MenuSelectEvent) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.openOnClick (children)\nname: openOnClick\nfullName: MenuProps.openOnClick\nsummary: |-\n  If \n  `openOnClick`\n   is set to \n  `true`\n  , the items are opened on mouse hover only after an initial click.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.style (children)\nname: style\nfullName: MenuProps.style\nsummary: Sets additional CSS styles to the Menu.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.vertical (children)\nname: vertical\nfullName: MenuProps.vertical\nsummary: \"Specifies whether the Menu will be vertical\\r\\n([see example]({% slug vertical_menu %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { MenuClassComponent, MenuItem } from '@progress/kendo-react-layout';\n\nconst App = () => (\n    <MenuClassComponent>\n        <MenuItem text=\"Item 1\" />\n        <MenuItem text=\"Item 2\" />\n    </MenuClassComponent>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### MenuClassComponent.constructor (children)\nname: constructor\nfullName: MenuClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.checkIsDirectionRightToLeft (children)\nname: checkIsDirectionRightToLeft\nfullName: MenuClassComponent.checkIsDirectionRightToLeft\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable (children)\nname: clearItemHoverAndLeaveRequestsIfApplicable\nfullName: MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.directionHolder (children)\nname: directionHolder\nfullName: MenuClassComponent.directionHolder\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.dispatchSelectEventIfWired (children)\nname: dispatchSelectEventIfWired\nfullName: MenuClassComponent.dispatchSelectEventIfWired\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getInputItem (children)\nname: getInputItem\nfullName: MenuClassComponent.getInputItem\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getMenuClassName (children)\nname: getMenuClassName\nfullName: MenuClassComponent.getMenuClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.inputItems (children)\nname: inputItems\nfullName: MenuClassComponent.inputItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.isItemWithDefaultClose (children)\nname: isItemWithDefaultClose\nfullName: MenuClassComponent.isItemWithDefaultClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemHoverRequest (children)\nname: itemHoverRequest\nfullName: MenuClassComponent.itemHoverRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemLeaveRequest (children)\nname: itemLeaveRequest\nfullName: MenuClassComponent.itemLeaveRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.items (children)\nname: items\nfullName: MenuClassComponent.items\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuWrapperEl (children)\nname: menuWrapperEl\nfullName: MenuClassComponent.menuWrapperEl\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.mouseOverHandler (children)\nname: mouseOverHandler\nfullName: MenuClassComponent.mouseOverHandler\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemBlur (children)\nname: onItemBlur\nfullName: MenuClassComponent.onItemBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemClick (children)\nname: onItemClick\nfullName: MenuClassComponent.onItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemFocus (children)\nname: onItemFocus\nfullName: MenuClassComponent.onItemFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseDown (children)\nname: onItemMouseDown\nfullName: MenuClassComponent.onItemMouseDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseLeave (children)\nname: onItemMouseLeave\nfullName: MenuClassComponent.onItemMouseLeave\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseOver (children)\nname: onItemMouseOver\nfullName: MenuClassComponent.onItemMouseOver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onKeyDown (children)\nname: onKeyDown\nfullName: MenuClassComponent.onKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.prepareItems (children)\nname: prepareItems\nfullName: MenuClassComponent.prepareItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.reset (children)\nname: reset\nfullName: MenuClassComponent.reset\nsummary: Resets the selection and opening of Menu items.\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setFocusedItemId (children)\nname: setFocusedItemId\nfullName: MenuClassComponent.setFocusedItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setHoveredItemId (children)\nname: setHoveredItemId\nfullName: MenuClassComponent.setHoveredItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.animate (children)\nname: animate\nfullName: MenuClassComponent.animate\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.element (children)\nname: element\nfullName: MenuClassComponent.element\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuItemId (children)\nname: menuItemId\nfullName: MenuClassComponent.menuItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\nKendoReact Menu Overview\n\nThe KendoReact Menu is a multi-level component for displaying hierarchical data.\nYou can describe the Menu items either by:\n\nUsing nested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSetting the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> property. The Menu is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Menu and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features\n\nItems\n\nThe Menu items provide configuration options for handling their properties and overriding their default rendering.\nTo render the Menu items, use either:\n\nNested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSet the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> Menu property.\n\nFunctionality and Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "ListView": "## API Reference Item\n- Name: ListViewProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact ListView component]({% slug overview_listview %}).\n- Syntax: \n\n## Additional Context\n### ListViewProps.className (children)\nname: className\nfullName: ListViewProps.className\nsummary: Sets a class of the ListView DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.footer (children)\nname: footer\nfullName: ListViewProps.footer\nsummary: Defines the component that renders for the ListView footer.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.header (children)\nname: header\nfullName: ListViewProps.header\nsummary: Defines the component that renders for the ListView header.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.item (children)\nname: item\nfullName: ListViewProps.item\nsummary: Defines the component that renders for each item of the data collection.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.navigatable (children)\nname: navigatable\nfullName: ListViewProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the ListView.\\r\\nBy default, navigation is disabled.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.onScroll (children)\nname: onScroll\nfullName: ListViewProps.onScroll\nsummary: Fires when the ListView has been scrolled.\nsyntax:\n  return:\n    type: '(event: ListViewEvent) => void'\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.style (children)\nname: style\nfullName: ListViewProps.style\nsummary: Sets styles to the ListView container.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-listview'\n\n\n## API Reference Item\n- Name: ListViewProps.data\n- Type: Property\n- Summary: Sets the data of the ListView.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ListView, ListViewItemProps } from '@progress/kendo-react-listview';\n\nconst data = [{ text: 'Item 1' }, { text: 'Item 2' }];\n\nconst MyItemRender = (props: ListViewItemProps) => {\n    const { text } = props.dataItem;\n\n    return <div>{text}</div>;\n};\n\nexport default function App() {\n    return <ListView data={data} item={MyItemRender} />;\n}\n\n```\n\n\nAfter installing the package, import the ListView component and the products data in the React App.\nIn the src/App.js file of your React project, import the ListView component from the ListView package.\n\nUsing the Component\n\n\n\nImport the products data in the src/App.js file.\njsx\n\n\n\n\nAdd the ListView component in the App component.\njsx\n\n\n\n\nCreate the MyItemRender component responsible for rendering each ListView item.\njsx\n\nPaging\n\nThe ListView enables you to split its content into pages by adding a pager and by using its extensive set of configuration options, such as implementing a responsive behavior, customizing its appearance, and more. <a href=\"/kendo-react-ui-develop/components/listview/paging\">Read more about the pager options of the ListView...</a>\n\nEditing\n\nDepending on your user requirements, you can edit, add, or delete the ListView items using templates. <a href=\"/kendo-react-ui-develop/components/listview/editing\">Read more about the editing feature of the ListView...</a> Key Features\n\nThe KendoReact ListView component delivers a range of handy and developer-friendly features whose number and further development are not limited by the list in this section. The KendoReact team constantly invests efforts to improve the performance, add more value to the existing ListView library, and develop new features.\n\nPaging\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Form": "## API Reference Item\n- Name: FormProps\n- Type: Interface\n- Summary: Contains the props for the KendoReact Form component.\n- Syntax: \n\n## Additional Context\n### FormProps.ignoreModified (children)\nname: ignoreModified\nfullName: FormProps.ignoreModified\nsummary: Allows the form to submit even when no fields have been modified.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.initialValues (children)\nname: initialValues\nfullName: FormProps.initialValues\nsummary: \"Sets the starting values for form fields.\\r\\n\\r\\nSet initial values to prevent errors when switching from uncontrolled to controlled mode.\"\nsyntax:\n  return:\n    type: '{ [key: string]: any }'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.onSubmit (children)\nname: onSubmit\nfullName: FormProps.onSubmit\nsummary: \"Handles form submission when validation passes and fields are modified.\\r\\n\\r\\nFires when at least one field is modified, the user clicks Submit, and validation passes.\"\nsyntax:\n  return:\n    type: '(values: Object, event?: SyntheticEvent<any, Event>) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.onSubmitClick (children)\nname: onSubmitClick\nfullName: FormProps.onSubmitClick\nsummary: \"Handles every submit button click, even when the form is invalid or unchanged.\\r\\n\\r\\nUse this for advanced scenarios where you need to handle all submit events.\"\nsyntax:\n  return:\n    type: '(event: FormSubmitClickEvent) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.render (children)\nname: render\nfullName: FormProps.render\nsummary: Renders the form content using the provided render function.\nsyntax:\n  return:\n    type: '(props: FormRenderProps) => any'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.validator (children)\nname: validator\nfullName: FormProps.validator\nsummary: \"Validates the entire form and returns error messages.\\r\\n\\r\\nReturn a key-value pair where the key is the field path and the value is the error message.\\r\\nYou can validate nested fields like 'users[0].name'.\\r\\nOnly synchronous functions are supported.\"\nsyntax:\n  return:\n    type: FormValidatorType\npackageName: '@progress/kendo-react-form'\n\n\n## API Reference Item\n- Name: FormClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Form component]({% slug overview_form %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FieldRenderProps,\n    FormRenderProps,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### FormClassComponent._fields (children)\nname: _fields\nfullName: FormClassComponent._fields\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._key (children)\nname: _key\nfullName: FormClassComponent._key\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._modified (children)\nname: _modified\nfullName: FormClassComponent._modified\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._submitted (children)\nname: _submitted\nfullName: FormClassComponent._submitted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._touched (children)\nname: _touched\nfullName: FormClassComponent._touched\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._unmounted (children)\nname: _unmounted\nfullName: FormClassComponent._unmounted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._validatorsByField (children)\nname: _validatorsByField\nfullName: FormClassComponent._validatorsByField\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._values (children)\nname: _values\nfullName: FormClassComponent._values\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._visited (children)\nname: _visited\nfullName: FormClassComponent._visited\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.licenseMessage (children)\nname: licenseMessage\nfullName: FormClassComponent.licenseMessage\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onChange (children)\nname: onChange\nfullName: FormClassComponent.onChange\nsummary: \"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"\nsyntax:\n  return:\n    type: '(name: string, options: Object) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onReset (children)\nname: onReset\nfullName: FormClassComponent.onReset\nsummary: \"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.showLicenseWatermark (children)\nname: showLicenseWatermark\nfullName: FormClassComponent.showLicenseWatermark\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n\nValidationPremium\n\nThe Form Wizard uses the KendoReact Form component to check user input. You can block users from moving to the next step until they complete all required fields. You can also choose to check all fields only when a user submits the form.\nThis example shows a multi-step form that checks inputs at each step:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nForm Components\n\nForms consist of form components (such as inputs, buttons, checkboxes, dropdowns, color pickers), their labels, hints and error messages. KendoReact provides comprehensive support for building forms with the <a href=\"/kendo-react-ui-develop/components/form\">Form</a>, and <a href=\"/kendo-react-ui-develop/components/labels\">Labels</a> packages. In this article we share valuable best practices.\nHere’s an example of the Form and Labels packages in action, so you can get an idea of how they work.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nValidation\n\nYou can set up the validation on form or field level by using the component's props. <a href=\"/kendo-react-ui-develop/components/form/validation\">Read more Form validation...</a>\n\nForm Wizard\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
        "Checkbox": "## API Reference Item\n- Name: Checkbox\n- Type: Function\n- Summary: Represents the [KendoReact Checkbox component]({% slug overview_checkbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Checkbox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return <Checkbox label=\"Accept terms\" />;\n}\n\n```\n\n\n## Additional Context\n### Checkbox.Checkbox.props (children)\nname: props\nfullName: Checkbox.Checkbox.props\nsyntax:\n  return:\n    type: CheckboxProps | RefAttributes\n\n\n## API Reference Item\n- Name: CheckboxProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Checkbox component]({% slug overview_checkbox %}).\r\nExtends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).\n- Syntax: \n\n## Additional Context\n### CheckboxProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: CheckboxProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: CheckboxProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.autoFocus (children)\nname: autoFocus\nfullName: CheckboxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the Checkbox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.checked (children)\nname: checked\nfullName: CheckboxProps.checked\nsummary: \"Sets the checked state of the Checkbox.\\r\\nSet to null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).\"\nsyntax:\n  return:\n    type: null | boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.children (children)\nname: children\nfullName: CheckboxProps.children\nsummary: The React elements that are passed as children to the rendered component.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.className (children)\nname: className\nfullName: CheckboxProps.className\nsummary: |-\n  Sets the \n  `className`\n   of the wrapping element of the Checkbox.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.defaultChecked (children)\nname: defaultChecked\nfullName: CheckboxProps.defaultChecked\nsummary: >-\n  Sets the default value of checked attribute when used in uncontrolled mode\n  ([see example]({% slug default_state %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.defaultValue (children)\nname: defaultValue\nfullName: CheckboxProps.defaultValue\nsummary: The default value of the Checkbox.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.dir (children)\nname: dir\nfullName: CheckboxProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute. This is used to switch from LTR to RTL.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.disabled (children)\nname: disabled\nfullName: CheckboxProps.disabled\nsummary: \"Sets the disabled state of the Checkbox\\r\\n([see example]({% slug disabled_checkbox %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.id (children)\nname: id\nfullName: CheckboxProps.id\nsummary: |-\n  Sets the \n  `id`\n   of the Checkbox.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.label (children)\nname: label\nfullName: CheckboxProps.label\nsummary: >-\n  Sets the label of the Checkbox component ([see example]({% slug\n  labels_checkbox %})).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.labelClassName (children)\nname: labelClassName\nfullName: CheckboxProps.labelClassName\nsummary: |-\n  Sets the \n  `className`\n   of the label element of the Checkbox.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.labelOptional (children)\nname: labelOptional\nfullName: CheckboxProps.labelOptional\nsummary: Sets the optional text after the label of the Checkbox component.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.labelPlacement (children)\nname: labelPlacement\nfullName: CheckboxProps.labelPlacement\nsummary: >-\n  Sets the label position of the Checkbox component ([see example]({% slug\n  labels_checkbox %})).\nsyntax:\n  return:\n    type: '\"before\" | \"after\"'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.name (children)\nname: name\nfullName: CheckboxProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.onBlur (children)\nname: onBlur\nfullName: CheckboxProps.onBlur\nsummary: The event handler that will be fired when Checkbox is blurred.\nsyntax:\n  return:\n    type: '(event: CheckboxBlurEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.onChange (children)\nname: onChange\nfullName: CheckboxProps.onChange\nsummary: The event handler that will be fired when the user edits the value.\nsyntax:\n  return:\n    type: '(event: CheckboxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.onFocus (children)\nname: onFocus\nfullName: CheckboxProps.onFocus\nsummary: The event handler that will be fired when Checkbox is focused.\nsyntax:\n  return:\n    type: '(event: CheckboxFocusEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.required (children)\nname: required\nfullName: CheckboxProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.rounded (children)\nname: rounded\nfullName: CheckboxProps.rounded\nsummary: \"Configures the \\n`rounded`\\n style of the Checkbox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.size (children)\nname: size\nfullName: CheckboxProps.size\nsummary: \"Configures the \\n`size`\\n of the Checkbox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.tabIndex (children)\nname: tabIndex\nfullName: CheckboxProps.tabIndex\nsummary: \"Sets the \\n`tabIndex`\\n property of the Checkbox.\\r\\nDefaults to \\n`0`\\n.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.valid (children)\nname: valid\nfullName: CheckboxProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.validationMessage (children)\nname: validationMessage\nfullName: CheckboxProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.validityStyles (children)\nname: validityStyles\nfullName: CheckboxProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.value (children)\nname: value\nfullName: CheckboxProps.value\nsummary: \"If the type is different than boolean and the \\n`checked`\\n property is provided it's passed to the underlying \\n`input`\\n element.\\r\\nIf set to boolean and the \\n`checked`\\n property is omitted sets the checked state of the Checkbox.\\r\\nSet null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).\"\nsyntax:\n  return:\n    type: null | string | number | boolean | Array<string>\npackageName: '@progress/kendo-react-inputs'\n\n\nUse its <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nControlling the Checked state\n\nTo manage the checked state of the Checkbox: Use its <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#checked\">checked</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom labels\n\nTo create a custom labels, set id prop of the Checkbox and provide custom markup for the label, including the for attribute for it.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n"
      }
    },
    "mcpQueries": {},
    "mcpResponses": {
      "AppBar": "## API Reference Item\n- Name: AppBar\n- Type: Function\n- Summary: Represents the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { AppBar, AppBarSection, AppBarSpacer } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nexport default function App() {\n    return (\n        <>\n            <AppBar themeColor=\"primary\">\n                <AppBarSection>\n                    <Button type=\"button\" fillMode=\"flat\" svgIcon={menuIcon} />\n                </AppBarSection>\n                <AppBarSpacer style={{ width: 8 }} />\n                <AppBarSection>\n                    <h1>Weather News</h1>\n                </AppBarSection>\n            </AppBar>\n            <style>{`\n                my-app {\n                    padding: 0 !important;\n                }\n            `}</style>\n        </>\n    );\n}\n\n```\n\n\n## Additional Context\n### AppBar.AppBar.props (children)\nname: props\nfullName: AppBar.AppBar.props\nsyntax:\n  return:\n    type: AppBarProps | RefAttributes\n\n\n## API Reference Item\n- Name: AppBarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact AppBar component]({% slug overview_appbar %}).\r\nUsed to display information, actions, branding titles and additional navigation on the current screen.\n- Syntax: \n\n## Additional Context\n### AppBarProps.children (children)\nname: children\nfullName: AppBarProps.children\nsummary: Represents the child elements that are passed to the AppBar.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.className (children)\nname: className\nfullName: AppBarProps.className\nsummary: Sets additional CSS classes to the AppBar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.id (children)\nname: id\nfullName: AppBarProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root AppBar element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.position (children)\nname: position\nfullName: AppBarProps.position\nsummary: \"Specifies the AppBar position ([see example]({% slug positioning_appbar %}#toc-position)).\\r\\n\\r\\n* The possible values are:\\r\\n* 'top' (Default)\\r\\n* 'bottom'\"\nsyntax:\n  return:\n    type: AppBarPosition\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.positionMode (children)\nname: positionMode\nfullName: AppBarProps.positionMode\nsummary: \"Specifies the AppBar position mode ([see example]({% slug positioning_appbar %}#toc-position-mode)).\\r\\n\\r\\n* The possible values are:\\r\\n* 'static' (Default)\\r\\n* 'sticky'\\r\\n* 'fixed'\"\nsyntax:\n  return:\n    type: AppBarPositionMode\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.style (children)\nname: style\nfullName: AppBarProps.style\nsummary: Sets additional CSS styles to the AppBar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### AppBarProps.themeColor (children)\nname: themeColor\nfullName: AppBarProps.themeColor\nsummary: \"Specifies the AppBar theme color ([see example]({% slug appearance_appbar %})).\\r\\n\\r\\n* The possible values are:\\r\\n* \\n`light`\\n (Default)\\r\\n* 'primary'\\r\\n* 'secondary'\\r\\n* 'tertiary'\\r\\n* 'info'\\r\\n* 'success'\\r\\n* 'warning'\\r\\n* 'error'\\r\\n* 'dark'\\r\\n* 'inherit'\\r\\n* 'inverse'\"\nsyntax:\n  return:\n    type: AppBarThemeColor\npackageName: '@progress/kendo-react-layout'\n\n\nThe AppBar is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the AppBar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features The AppBar provides information and actions related to the current application screen. It is typically used to show page titles, brand identity and can contain navigation items.\nThis   is   a  Free React  AppBarThe KendoReact  AppBar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the AppBar in action. <a href=\"/kendo-react-ui-develop/components/layout/appbar/positioning\">Positioning</a>—The built-in options allow you to specify the position of the component relative to the page content.\n<a href=\"/kendo-react-ui-develop/components/layout/appbar/content-arrangement\">Content Arrangement</a>—You can easily arrange the layout of the appbar content by using sections, spacings, and separators.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Grid": "## API Reference Item\n- Name: GridProps.autoProcessData\n- Type: Property\n- Summary: Enables data-processing inside the GridComponent based on its state.\r\nProvides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nconst sampleData = [\n    { id: 1, name: 'Alice', description: 'description 1' },\n    { id: 2, name: 'Bob', description: 'description 2' },\n    { id: 3, name: 'Charlie', description: 'description 3' }\n];\n\nexport default function App() {\n    return (\n        <Grid data={sampleData} autoProcessData={true} dataItemKey=\"id\">\n            <GridColumn field=\"id\" title=\"Id\" />\n            <GridColumn field=\"name\" title=\"Name\" />\n            <GridColumn field=\"description\" title=\"Description\" />\n        </Grid>\n    );\n}\n\n```\n\n\n## API Reference Item\n- Name: GridProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Additional Context\n### GridProps.adaptive (children)\nname: adaptive\nfullName: GridProps.adaptive\nsummary: >-\n  Providing different rendering of the popup element based on the screen\n  dimensions.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.adaptiveTitle (children)\nname: adaptiveTitle\nfullName: GridProps.adaptiveTitle\nsummary: Specifies the text that is rendered as title in the adaptive popup.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.cells (children)\nname: cells\nfullName: GridProps.cells\nsummary: >-\n  Defines a set of custom cell components that the Grid will render instead of\n  the default cells.\nsyntax:\n  return:\n    type: GridCellsSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.children (children)\nname: children\nfullName: GridProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### GridProps.className (children)\nname: className\nfullName: GridProps.className\nsummary: Sets a class for the Grid DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.clipboard (children)\nname: clipboard\nfullName: GridProps.clipboard\nsummary: |-\n  Enables clipboard copy, cut, and paste manipulations. Accepts \n  `ClipboardSettings`\n   or a boolean value.\nsyntax:\n  return:\n    type: boolean | ClipboardSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenu (children)\nname: columnMenu\nfullName: GridProps.columnMenu\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the column\n  menu of the Grid.\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnMenuIcon (children)\nname: columnMenuIcon\nfullName: GridProps.columnMenuIcon\nsummary: \"Globally overrides the default (three vertical dots) column menu icon for the whole Grid. If set, the prop can be overridden on column level\\r\\n using the ([menuIcon]({% slug api_grid_gridcolumnprops %}#toc-menuicon)) property.\"\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnVirtualization (children)\nname: columnVirtualization\nfullName: GridProps.columnVirtualization\nsummary: >-\n  Enables virtualization of the columns. If virtualization is enabled, the\n  columns outside the view are not rendered.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.columnsState (children)\nname: columnsState\nfullName: GridProps.columnsState\nsummary: The collection of column states of the grid.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.contextMenu (children)\nname: contextMenu\nfullName: GridProps.contextMenu\nsummary: Specifies the context menu settings applied to the Grid.\nsyntax:\n  return:\n    type: >-\n      boolean | GridContextMenuOptions | (options: GridCellBaseOptions) =>\n      boolean | GridContextMenuOptions\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.data (children)\nname: data\nfullName: GridProps.data\nsummary: \"Sets the data of the Grid ([see example]({% slug paging_grid %})). If you use paging, the \\n`data`\\n option has to contain only the items for the current page. It takes values of type null, any or [DataResult]({% slug api_kendo-data-query_dataresult%})\\r\\nAccepts values of type \\n`null`\\n, \\n`any[]`\\n, or \\n`DataResult`\\n.\"\nsyntax:\n  return:\n    type: null | Array<any> | DataResult\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.dataItemKey (children)\nname: dataItemKey\nfullName: GridProps.dataItemKey\nsummary: \"Sets the Grid row key prop to the value of this field in the dataItem.\\r\\nIf not set, the dataItem index will be used for the row key, which might lead to rows not updating during paging or scrolling.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultColumnsState (children)\nname: defaultColumnsState\nfullName: GridProps.defaultColumnsState\nsummary: The default columns state, used only for the initial load.\nsyntax:\n  return:\n    type: Array<GridColumnState>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultDetailExpand (children)\nname: defaultDetailExpand\nfullName: GridProps.defaultDetailExpand\nsummary: |-\n  The default \n  `detailExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultEdit (children)\nname: defaultEdit\nfullName: GridProps.defaultEdit\nsummary: |-\n  The default \n  `edit`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultFilter (children)\nname: defaultFilter\nfullName: GridProps.defaultFilter\nsummary: |-\n  The default \n  `filter`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroup (children)\nname: defaultGroup\nfullName: GridProps.defaultGroup\nsummary: |-\n  The default \n  `group`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultGroupExpand (children)\nname: defaultGroupExpand\nfullName: GridProps.defaultGroupExpand\nsummary: |-\n  The default \n  `groupExpand`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSearch (children)\nname: defaultSearch\nfullName: GridProps.defaultSearch\nsummary: >-\n  The descriptor by which the data is searched by default. Its first\n  FilterDescriptor populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSelect (children)\nname: defaultSelect\nfullName: GridProps.defaultSelect\nsummary: |-\n  The default \n  `select`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSkip (children)\nname: defaultSkip\nfullName: GridProps.defaultSkip\nsummary: |-\n  The default \n  `skip`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultSort (children)\nname: defaultSort\nfullName: GridProps.defaultSort\nsummary: \"The default \\n`sort`\\n state applied to the Grid when using uncontrolled mode.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.defaultTake (children)\nname: defaultTake\nfullName: GridProps.defaultTake\nsummary: |-\n  The default \n  `take`\n   state applied to the Grid when using uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detail (children)\nname: detail\nfullName: GridProps.detail\nsummary: >-\n  Specifies a React element that will be cloned and rendered inside the detail\n  rows of the currently expanded items ([see example]({% slug hierarchy_grid\n  %})).\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailExpand (children)\nname: detailExpand\nfullName: GridProps.detailExpand\nsummary: The descriptor by which the detail row is expanded.\nsyntax:\n  return:\n    type: DetailExpandDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.detailRowHeight (children)\nname: detailRowHeight\nfullName: GridProps.detailRowHeight\nsummary: Defines the detail row height and forces an equal height to all detail rows.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.edit (children)\nname: edit\nfullName: GridProps.edit\nsummary: The descriptor by which the in-edit mode of an item is defined.\nsyntax:\n  return:\n    type: EditDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editDialog (children)\nname: editDialog\nfullName: GridProps.editDialog\nsummary: >-\n  Sets a custom edit dialog component that the Grid will render instead of the\n  built-in edit dialog.\nsyntax:\n  return:\n    type: '(props: GridEditDialogProps) => ReactNode'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.editable (children)\nname: editable\nfullName: GridProps.editable\nsummary: The Grid editable settings.\nsyntax:\n  return:\n    type: boolean | GridEditableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filter (children)\nname: filter\nfullName: GridProps.filter\nsummary: \"The [descriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}) by which\\r\\nthe data is filtered ([more information and examples]({% slug filtering_grid %})). This affects\\r\\nthe values and buttons in the \\n`FilterRow`\\n of the Grid.\"\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterOperators (children)\nname: filterOperators\nfullName: GridProps.filterOperators\nsummary: The filter operators for the Grid filters.\nsyntax:\n  return:\n    type: GridFilterOperators\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.filterable (children)\nname: filterable\nfullName: GridProps.filterable\nsummary: |-\n  Enables filtering for the columns with their \n  `field`\n   option set.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.fixedScroll (children)\nname: fixedScroll\nfullName: GridProps.fixedScroll\nsummary: \"Determines if the scroll position will be updated after a data change.\\r\\nIf set to \\n`true`\\n, the scroll will remain in the same position.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.group (children)\nname: group\nfullName: GridProps.group\nsummary: \"The [descriptors]({% slug api_kendo-data-query_groupdescriptor %})[] by which the data will be grouped\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: Array<GroupDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupExpand (children)\nname: groupExpand\nfullName: GridProps.groupExpand\nsummary: The descriptor by which the group is expanded.\nsyntax:\n  return:\n    type: Array<GroupExpandDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.groupable (children)\nname: groupable\nfullName: GridProps.groupable\nsummary: >-\n  Determines if grouping by dragging and dropping the column headers is allowed\n  ([more information and examples]({% slug groupingbasics_grid %})).\nsyntax:\n  return:\n    type: boolean | GridGroupableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.highlight (children)\nname: highlight\nfullName: GridProps.highlight\nsummary: \"The descriptor by which the highlight state of an item is defined.\\r\\nPassing a boolean value will highlight the whole row, while passing an object will highlight individual cells by their field.\"\nsyntax:\n  return:\n    type: GridHighlightDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.id (children)\nname: id\nfullName: GridProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.language (children)\nname: language\nfullName: GridProps.language\nsummary: \"Sets the language of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.loader (children)\nname: loader\nfullName: GridProps.loader\nsummary: A custom component that the Grid will render instead of the built-in loader.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.locale (children)\nname: locale\nfullName: GridProps.locale\nsummary: \"Sets the locale of the Grid when used as a server component.\\r\\nHave not effect when the Grid is used as a client component.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.lockGroups (children)\nname: lockGroups\nfullName: GridProps.lockGroups\nsummary: \"Defines if the group descriptor columns are locked (frozen or sticky).\\r\\nLocked columns are the columns that are visible at all times while the user scrolls the component horizontally.\\r\\nDefaults to \\n`false`\\n.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.navigatable (children)\nname: navigatable\nfullName: GridProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the Grid.\\r\\nBy default, navigation is disabled and the Grid content is accessible in the normal tab sequence.\"\nsyntax:\n  return:\n    type: boolean | NavigatableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onClipboard (children)\nname: onClipboard\nfullName: GridProps.onClipboard\nsummary: \"Fires when clipboard support is enabled, and one of the actions (e.g., copy) is triggered.\\r\\nAccepts a \\n`GridClipboardEvent`\\n object.\"\nsyntax:\n  return:\n    type: '(event: GridClipboardEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnReorder (children)\nname: onColumnReorder\nfullName: GridProps.onColumnReorder\nsummary: Fires when the columns are reordered.\nsyntax:\n  return:\n    type: '(event: GridColumnReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnResize (children)\nname: onColumnResize\nfullName: GridProps.onColumnResize\nsummary: >-\n  Fires when a column is resized. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridColumnResizeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onColumnsStateChange (children)\nname: onColumnsStateChange\nfullName: GridProps.onColumnsStateChange\nsummary: Fires when the columns state of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridColumnsStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenu (children)\nname: onContextMenu\nfullName: GridProps.onContextMenu\nsummary: >-\n  The event that is fired when the ContextMenu is activated. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onContextMenuItemClick (children)\nname: onContextMenuItemClick\nfullName: GridProps.onContextMenuItemClick\nsummary: >-\n  The event that is fired when the ContextMenu item is clicked. Only fired when\n  the Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridContextMenuItemClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDataStateChange (children)\nname: onDataStateChange\nfullName: GridProps.onDataStateChange\nsummary: >-\n  Fires when the data state of the Grid is changed ([more information]({% slug\n  localoperations_grid %}) and [example]({% slug odataserveroperations_grid\n  %})).\nsyntax:\n  return:\n    type: '(event: GridDataStateChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onDetailExpandChange (children)\nname: onDetailExpandChange\nfullName: GridProps.onDetailExpandChange\nsummary: Fires when the user expands or collapses a detail row.\nsyntax:\n  return:\n    type: '(event: GridDetailExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onEditChange (children)\nname: onEditChange\nfullName: GridProps.onEditChange\nsummary: Fires when the user enters or exits an in-edit mode of a row or cell.\nsyntax:\n  return:\n    type: '(event: GridEditChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onFilterChange (children)\nname: onFilterChange\nfullName: GridProps.onFilterChange\nsummary: >-\n  Fires when the Grid filter is modified through the UI. You must handle the\n  event and filter the data.\nsyntax:\n  return:\n    type: '(event: GridFilterChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupChange (children)\nname: onGroupChange\nfullName: GridProps.onGroupChange\nsummary: \"Fires when the grouping of the Grid is changed. You have to handle the event yourself and group the data\\r\\n([more information and examples]({% slug groupingbasics_grid %})).\"\nsyntax:\n  return:\n    type: '(event: GridGroupChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onGroupExpandChange (children)\nname: onGroupExpandChange\nfullName: GridProps.onGroupExpandChange\nsummary: Fires when the user expands or collapses a group.\nsyntax:\n  return:\n    type: '(event: GridGroupExpandChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHeaderSelectionChange (children)\nname: onHeaderSelectionChange\nfullName: GridProps.onHeaderSelectionChange\nsummary: >-\n  Fires when the user clicks the checkbox of a column header whose type is set\n  to \n\n  `checkbox`\n\n  .\nsyntax:\n  return:\n    type: '(event: GridHeaderSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onHighlightChange (children)\nname: onHighlightChange\nfullName: GridProps.onHighlightChange\nsummary: >-\n  Fires when the Grid highlight is modified. You must handle the event and\n  filter the data.\nsyntax:\n  return:\n    type: '(event: GridHighlightChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onItemChange (children)\nname: onItemChange\nfullName: GridProps.onItemChange\nsummary: Fires when the user changes the values of the item.\nsyntax:\n  return:\n    type: '(event: GridItemChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onKeyDown (children)\nname: onKeyDown\nfullName: GridProps.onKeyDown\nsummary: >-\n  Fires when the user press keyboard key. Only fired when the Grid is run as a\n  client component.\nsyntax:\n  return:\n    type: '(event: GridKeyDownEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onNavigationAction (children)\nname: onNavigationAction\nfullName: GridProps.onNavigationAction\nsummary: >-\n  Fires when Grid keyboard navigation position is changed. Only fired when the\n  Grid is run as a client component.\nsyntax:\n  return:\n    type: '(event: GridNavigationActionEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPageChange (children)\nname: onPageChange\nfullName: GridProps.onPageChange\nsummary: Fires when the page of the Grid is changed.\nsyntax:\n  return:\n    type: '(event: GridPageChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onPdfExport (children)\nname: onPdfExport\nfullName: GridProps.onPdfExport\nsummary: Fires when the user clicks the PDF export button.\nsyntax:\n  return:\n    type: '(event: Object) => Promise'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowClick (children)\nname: onRowClick\nfullName: GridProps.onRowClick\nsummary: Fires when the user clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowDoubleClick (children)\nname: onRowDoubleClick\nfullName: GridProps.onRowDoubleClick\nsummary: Fires when the user double clicks a row.\nsyntax:\n  return:\n    type: '(event: GridRowDoubleClickEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onRowReorder (children)\nname: onRowReorder\nfullName: GridProps.onRowReorder\nsummary: Fires when the user reorders a row.\nsyntax:\n  return:\n    type: '(event: GridRowReorderEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onScroll (children)\nname: onScroll\nfullName: GridProps.onScroll\nsummary: >-\n  Fires when Grid is scrolled. Only fired when the Grid is run as a client\n  component.\nsyntax:\n  return:\n    type: '(event: GridEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSearchChange (children)\nname: onSearchChange\nfullName: GridProps.onSearchChange\nsummary: Fires when the search value of the GridSearchBox is changed.\nsyntax:\n  return:\n    type: '(event: GridSearchChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSelectionChange (children)\nname: onSelectionChange\nfullName: GridProps.onSelectionChange\nsummary: Fires when the user tries to select or deselect a row or cell.\nsyntax:\n  return:\n    type: '(event: GridSelectionChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.onSortChange (children)\nname: onSortChange\nfullName: GridProps.onSortChange\nsummary: \"Fires when the sorting of the Grid is changed. You must handle the event and sort the data.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: '(event: GridSortChangeEvent) => void'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pageSize (children)\nname: pageSize\nfullName: GridProps.pageSize\nsummary: >-\n  Defines the page size used by the Grid pager. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pageable (children)\nname: pageable\nfullName: GridProps.pageable\nsummary: \"Configures the pager of the Grid. Accepts \\n`GridPagerSettings`\\n or a boolean value.([see example]({% slug paging_grid %}))\\r\\n\\r\\nThe available options are:\\r\\n- \\n`buttonCount: Number`\\n&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.\\r\\n- \\n`info: Boolean`\\n&mdash;Toggles the information about the current page and the total number of records.\\r\\n- \\n`type: PagerType`\\n&mdash;Accepts the \\n`numeric`\\n (buttons with numbers) and \\n`input`\\n (input for typing the page number) values.\\r\\n- \\n`pageSizes: Boolean`\\n or \\n`Array<number>`\\n&mdash;Shows a menu for selecting the page size.\\r\\n- \\n`pageSizeValue: String or Number`\\n&mdash;Sets the selected value of the page size Dropdownlist. It is useful when the selected value could also be a string not only a number.\\r\\n- \\n`previousNext: Boolean`\\n&mdash;Toggles the **Previous** and **Next** buttons.\\r\\n- \\n`navigatable: Boolean`\\n&mdash;Defines if the pager will be navigatable.\\r\\n- \\n`responsive: Boolean`\\n&mdash;Defines if the pager will be responsive. If true, hides the tools that do not fit to the available space.\\r\\n- \\n`adaptive: Boolean`\\n&mdash;Providing different rendering of the page sizes select element based on the screen dimensions.\\r\\n- \\n`adaptiveTitle: String`\\n&mdash;Specifies the text that is rendered as title in the adaptive page sizes select element.\"\nsyntax:\n  return:\n    type: boolean | GridPagerSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pager (children)\nname: pager\nfullName: GridProps.pager\nsummary: \"The pager component that the Grid will render instead of the built-in pager.\\r\\n It takes values of type null and ComponentType&lt;[PagerProps]({% slug api_data-tools_pagerprops %})&gt\"\nsyntax:\n  return:\n    type: null | ComponentType\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.pdf (children)\nname: pdf\nfullName: GridProps.pdf\nsummary: \"When set to true the Grid pdf export will be enabled.\\r\\nIf set to an object, the Grid will use the provided settings to export the PDF.\"\nsyntax:\n  return:\n    type: boolean | GridProps\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.reorderable (children)\nname: reorderable\nfullName: GridProps.reorderable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can reorder columns by dragging their header cells ([see\n  example]({% slug reordering_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.resizable (children)\nname: resizable\nfullName: GridProps.resizable\nsummary: >-\n  If set to \n\n  `true`\n\n  , the user can resize columns by dragging the edges (resize handles) of their\n  header cells ([see example]({% slug resizing_columns_grid %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowHeight (children)\nname: rowHeight\nfullName: GridProps.rowHeight\nsummary: >-\n  Defines the row height and forces an equal height to all rows ([see\n  example]({% slug scrollmodes_grid %})).\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowReorderable (children)\nname: rowReorderable\nfullName: GridProps.rowReorderable\nsummary: Defines the row reorder settings.\nsyntax:\n  return:\n    type: boolean | GridRowReorderSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rowSpannable (children)\nname: rowSpannable\nfullName: GridProps.rowSpannable\nsummary: Enables the built-in row span feature of the Grid.\nsyntax:\n  return:\n    type: boolean | GridRowSpannableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.rows (children)\nname: rows\nfullName: GridProps.rows\nsyntax:\n  return:\n    type: GridRowsSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.scrollable (children)\nname: scrollable\nfullName: GridProps.scrollable\nsummary: \"Defines the scroll mode that is used by the Grid ([see example]({% slug scrollmodes_grid %})).\\r\\n\\r\\n The available options are:\\r\\n - \\n`none`\\n&mdash;Renders no scrollbar.\\r\\n - \\n`scrollable`\\n&mdash;This is the default scroll mode. It requires the setting of the \\n`height`\\n option.\\r\\n - \\n`virtual`\\n&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.\"\nsyntax:\n  return:\n    type: ScrollMode\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.search (children)\nname: search\nfullName: GridProps.search\nsummary: >-\n  The descriptor by which the data is searched. Its first FilterDescriptor\n  populates the GridSearchBox.\nsyntax:\n  return:\n    type: CompositeFilterDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.searchFields (children)\nname: searchFields\nfullName: GridProps.searchFields\nsummary: Defines the fields of the data that are filtered by the GridSearchBox.\nsyntax:\n  return:\n    type: Array<string | SearchField>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.select (children)\nname: select\nfullName: GridProps.select\nsummary: \"The [descriptor]({% slug api_data-tools_selectdescriptor %}) by which the selected state of an item is defined.\\r\\nPassing a boolean value will select the whole row, while passing an array of strings will select individual.\"\nsyntax:\n  return:\n    type: SelectDescriptor\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.selectable (children)\nname: selectable\nfullName: GridProps.selectable\nsummary: The Grid selectable settings.\nsyntax:\n  return:\n    type: boolean | GridSelectableSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.showLoader (children)\nname: showLoader\nfullName: GridProps.showLoader\nsummary: Specifies whether the loader of the Grid will be displayed.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.size (children)\nname: size\nfullName: GridProps.size\nsummary: \"Configures the \\n`size`\\n of the Grid.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\"\nsyntax:\n  return:\n    type: '\"small\" | \"medium\"'\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.skip (children)\nname: skip\nfullName: GridProps.skip\nsummary: >-\n  Defines the number of records that will be skipped by the pager ([see\n  example]({% slug paging_grid %})). Required by the paging functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.sort (children)\nname: sort\nfullName: GridProps.sort\nsummary: >-\n  The ([descriptors]({% slug api_kendo-data-query_sortdescriptor %})) by which\n  the data is sorted. Applies the sorting styles and buttons to the affected\n  columns.\nsyntax:\n  return:\n    type: Array<SortDescriptor>\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.sortable (children)\nname: sortable\nfullName: GridProps.sortable\nsummary: \"Enables sorting for the columns with their \\n`field`\\n option set.\\r\\n([see example]({% slug sorting_grid %}))\"\nsyntax:\n  return:\n    type: SortSettings\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.style (children)\nname: style\nfullName: GridProps.style\nsummary: |-\n  Represents the \n  `style`\n   HTML attribute.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.take (children)\nname: take\nfullName: GridProps.take\nsummary: |-\n  Alias for the \n  `pageSize`\n   property. If \n  `take`\n   is set, \n  `pageSize`\n   will be ignored.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n---\n### GridProps.total (children)\nname: total\nfullName: GridProps.total\nsummary: >-\n  Defines the total number of data items in all pages. Required for paging\n  functionality.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-grid'\n\n\n## API Reference Item\n- Name: Grid\n- Type: Function\n- Summary: Represents the [KendoReact Grid component]({% slug overview_grid %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { Grid } from '@progress/kendo-react-grid';\n\nconst App = () => {\n    return <Grid />;\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Grid.Grid.props (children)\nname: props\nfullName: Grid.Grid.props\nsyntax:\n  return:\n    type: GridProps | RefAttributes\n\n\nEnable the autoProcessData prop of the Grid to allow the component to handle the data state management internally.\n\n\nSet the dataItemKey prop to an unique value field from the bound to the Grid data.\n\nAdd Pagination\n\n\nEnable the pageble prop of the Grid to enable pagination.\nConfigure the defaultTake and defaultSkip props to specify the initially loaded page.\n\nEnable Filtering\n\n\nConfigure the <Grid> props to enable filtering.\n\nfilterable enables the built-in filter row, rendered right below the column titles.\ndefaultFilter (optional) is the descriptor by which the data is filtered initially.\n\nEnable Sorting\n\nEnable the autoProcessData prop of the Grid to allow the component to handle the data state management internally.\n\n\nSet the dataItemKey prop to an unique value field from the bound to the Grid data.\n\nAdd Pagination\n\n\nEnable the pageble prop of the Grid to enable pagination.\nConfigure the defaultTake and defaultSkip props to specify the initially loaded page.\n\nEnable Filtering\n\n\nConfigure the <Grid> props to enable filtering.\n\nfilterable enables the built-in filter row, rendered right below the column titles.\ndefaultFilter (optional) is the descriptor by which the data is filtered initially.\n\nEnable Sorting\n\nIn this section, you’ll try out several Grid features, but let’s start by importing the component and adding some sample data.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Avatar": "## API Reference Item\n- Name: Avatar\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### Avatar.Avatar.props (children)\nname: props\nfullName: Avatar.Avatar.props\nsyntax:\n  return:\n    type: AvatarProps\n\n\n## API Reference Item\n- Name: AvatarProps\n- Type: Interface\n- Summary: \n- Syntax: \n\n## Additional Context\n### AvatarProps.border (children)\nname: border\nfullName: AvatarProps.border\nsummary: Sets a border to the Avatar.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.children (children)\nname: children\nfullName: AvatarProps.children\nsummary: Sets the Avatar children elements.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.className (children)\nname: className\nfullName: AvatarProps.className\nsummary: Sets additional classes to the Avatar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.fillMode (children)\nname: fillMode\nfullName: AvatarProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.rounded (children)\nname: rounded\nfullName: AvatarProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.size (children)\nname: size\nfullName: AvatarProps.size\nsummary: \"Configures the \\n`size`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.src (children)\nname: src\nfullName: AvatarProps.src\nsummary: Sets the URL for the image when type is 'image'.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.style (children)\nname: style\nfullName: AvatarProps.style\nsummary: Sets additional CSS styles to the Avatar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.themeColor (children)\nname: themeColor\nfullName: AvatarProps.themeColor\nsummary: \"Configures the \\n`themeColor`\\n of the Avatar.\\r\\n\\r\\nThe available options are:\\r\\n- base\\r\\n- primary\\r\\n- secondary\\r\\n- tertiary\\r\\n- info\\r\\n- success\\r\\n- error\\r\\n- warning\\r\\n- dark\\r\\n- light\\r\\n- inverse\\r\\n- null&mdash;Does not set a themeColor \\n`className`\\n.\"\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\"\npackageName: '@progress/kendo-react-layout'\n\n---\n### AvatarProps.type (children)\nname: type\nfullName: AvatarProps.type\nsummary: \"Sets the type of the Avatar.\\r\\n\\r\\nThe supported values are:\\r\\n* \\n`image`\\n\\r\\n* \\n`text`\\n\\r\\n* \\n`icon`\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n\nThe Avatar component is typically used to display images, icons, or initials representing people or other entities.\nThis   is   a  Free React  AvatarThe KendoReact  Avatar   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the Avatar in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... The Avatar is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Avatar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features\n\nTo specify a custom avatar size, use the <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#style\">style</a>property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFill Mode\n\nThe Avatar enables you to set styling options and create solid or outline avatars by setting the fillMode property.\nThe available <a href=\"/kendo-react-ui-develop/components/layout/api/avatarprops#fillmode\">fillMode</a> values are:\n\nsolid (Default)\noutline\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Button": "## API Reference Item\n- Name: ButtonProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Button component]({% slug overview_button %}).\r\nExtends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).\n- Syntax: \n\n## Additional Context\n### ButtonProps.disabled (children)\nname: disabled\nfullName: ButtonProps.disabled\nsummary: >-\n  Specifies if the Button is disabled ([see example]({% slug disabled_button\n  %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.endIcon (children)\nname: endIcon\nfullName: ButtonProps.endIcon\nsummary: \"Sets an SVG icon or custom element after the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.fillMode (children)\nname: fillMode\nfullName: ButtonProps.fillMode\nsummary: |-\n  Configures the \n  `fillMode`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\" | \"link\" | \"clear\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.icon (children)\nname: icon\nfullName: ButtonProps.icon\nsummary: >-\n  Defines the name for an existing icon in a KendoReact theme ([see example]({%\n  slug icons_button %})). The icon renders inside the Button by a \n\n  `span.k-icon`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconClass (children)\nname: iconClass\nfullName: ButtonProps.iconClass\nsummary: >-\n  Defines a CSS class — or multiple classes separated by spaces — which apply to\n  a \n\n  `span`\n   element inside the Button ([see example]({% slug icons_button %})). Allows you to use custom icons.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.iconSize (children)\nname: iconSize\nfullName: ButtonProps.iconSize\nsummary: |-\n  Configures the \n  `size`\n   of the SVG icon that displays inside the Button.\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageAlt (children)\nname: imageAlt\nfullName: ButtonProps.imageAlt\nsummary: >-\n  Defines the alternative text of the image that renders inside the Button\n  component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.imageUrl (children)\nname: imageUrl\nfullName: ButtonProps.imageUrl\nsummary: |-\n  Defines a URL which is used as an \n  `img`\n   element inside the Button ([see example]({% slug icons_button %})). The URL can be relative or absolute. If relative, it evaluates in relation to the URL of the web page.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.rounded (children)\nname: rounded\nfullName: ButtonProps.rounded\nsummary: |-\n  Configures the \n  `roundness`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.selected (children)\nname: selected\nfullName: ButtonProps.selected\nsummary: Sets the selected state of the Button. You can use this for controlled mode.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.size (children)\nname: size\nfullName: ButtonProps.size\nsummary: |-\n  Configures the \n  `size`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.startIcon (children)\nname: startIcon\nfullName: ButtonProps.startIcon\nsummary: \"Sets an SVG icon or custom element before the content of the Button. For the custom component, consider using\\r\\n[Phrasing content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#phrasing_content).\\r\\nDo not use [Interactive content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#interactive_content).\"\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.svgIcon (children)\nname: svgIcon\nfullName: ButtonProps.svgIcon\nsummary: Defines the SVG icon that renders inside the Button component.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.themeColor (children)\nname: themeColor\nfullName: ButtonProps.themeColor\nsummary: |-\n  Configures the \n  `themeColor`\n   of the Button. See [Button Appearance](slug://appearance_button).\nsyntax:\n  return:\n    type: >-\n      null | \"base\" | \"primary\" | \"secondary\" | \"tertiary\" | \"info\" | \"success\"\n      | \"warning\" | \"error\" | \"dark\" | \"light\" | \"inverse\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.title (children)\nname: title\nfullName: ButtonProps.title\nsummary: |-\n  Sets the \n  `title`\n   HTML attribute of the Button.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.togglable (children)\nname: togglable\nfullName: ButtonProps.togglable\nsummary: >-\n  Provides visual styling that shows if the Button is selected ([see example]({%\n  slug toggleable_button %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ButtonProps.unstyled (children)\nname: unstyled\nfullName: ButtonProps.unstyled\nsummary: The unstyled option classes.\nsyntax:\n  return:\n    type: ButtonsClassStructure\npackageName: '@progress/kendo-react-buttons'\n\n\n## API Reference Item\n- Name: Button\n- Type: Function\n- Summary: \n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst App = () => {\n    return(\n        <Button>Button</Button>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Button.Button.props (children)\nname: props\nfullName: Button.Button.props\nsyntax:\n  return:\n    type: ButtonProps | RefAttributes\n\n\nThe following demo shows the components included in the KendoReact Buttons package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... <a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/button\">\n\nbutton\n\n\nButton\nA React button component.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/buttongroup\">\n\nbuttongroup\n\n\nButtonGroup\nGrouped Buttons with identical functionalities.\n</a>\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/buttons/chip\">\n\nButton Events\n\nThe KendoReact Button generates a variety of events that you can handle. This allows you to tailor the Button's behavior to your specific requirements.\nThe following example demonstrates basic Button events.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "StackLayout": "## API Reference Item\n- Name: StackLayout\n- Type: Function\n- Summary: Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\r\nArranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { StackLayout } from '@progress/kendo-react-layout';\n\nfunction App() {\n    return (\n        <StackLayout gap={100}>\n            {[1, 2, 3].map((item) => (\n                <div key={item} style={{ backgroundColor: 'lightblue', textAlign: 'center' }}>\n                    Item {item}\n                </div>\n            ))}\n        </StackLayout>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### StackLayout.StackLayout.props (children)\nname: props\nfullName: StackLayout.StackLayout.props\nsyntax:\n  return:\n    type: StackLayoutProps | RefAttributes\n\n\n## API Reference Item\n- Name: StackLayoutProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\n- Syntax: \n\n## Additional Context\n### StackLayoutProps.align (children)\nname: align\nfullName: StackLayoutProps.align\nsummary: \"Specifies the horizontal and vertical alignment of the inner StackLayout elements.\\r\\nDemo ([here]({% slug layout_stacklayout %}#toc-horizontal-alignment)) and ([here]({% slug layout_stacklayout %}#toc-vertical-alignment)).\\r\\n\\r\\nThe possible keys are:\\r\\n* \\n`horizontal`\\n&mdash;Defines the possible horizontal alignment of the inner StackLayout elements.\\r\\n  * \\n`start`\\n&mdash;Uses the start point of the container.\\r\\n  * \\n`center`\\n&mdash;Uses the central point of the container.\\r\\n  * \\n`end`\\n&mdash;Uses the end point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the width of the container.\\r\\n* \\n`vertical`\\n&mdash;Defines the possible vertical alignment of the inner StackLayout elements.\\r\\n  * \\n`top`\\n&mdash;Uses the top point of the container.\\r\\n  * \\n`middle`\\n&mdash;Uses the middle point of the container.\\r\\n  * \\n`bottom`\\n&mdash;Uses the bottom point of the container.\\r\\n  * (Default)\\n`stretch`\\n&mdash;Stretches the items to fill the height of the container.\"\nsyntax:\n  return:\n    type: StackLayoutAlign\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.children (children)\nname: children\nfullName: StackLayoutProps.children\nsummary: The React elements that will be rendered inside the StackLayout.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.className (children)\nname: className\nfullName: StackLayoutProps.className\nsummary: Sets additional CSS classes to the StackLayout.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.gap (children)\nname: gap\nfullName: StackLayoutProps.gap\nsummary: >-\n  Specifies the gap between the inner elements ([see example]({% slug\n  layout_stacklayout %}#toc-gaps)).\nsyntax:\n  return:\n    type: string | number\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.id (children)\nname: id\nfullName: StackLayoutProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the root StackLayout element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.orientation (children)\nname: orientation\nfullName: StackLayoutProps.orientation\nsummary: \"Specifies the StackLayout orientation.\\r\\n([see example]({% slug layout_stacklayout %}#toc-orientation)).\\r\\n\\r\\nThe possible values are:\\r\\n* (Default)\\n`horizontal`\\n\\r\\n* \\n`vertical`\"\nsyntax:\n  return:\n    type: StackLayoutOrientation\npackageName: '@progress/kendo-react-layout'\n\n---\n### StackLayoutProps.style (children)\nname: style\nfullName: StackLayoutProps.style\nsummary: Sets additional CSS styles to the StackLayout.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n\nLayout\n\nThe StackLayout component provides options for controlling its appearance.\nTo customize the layout of the StackLayout, use any of the following configuration options:\n\nOrientation\nGaps\nHorizontal alignment\nVertical alignment\nNested StackLayouts\n\nOrientation\n\nTo set the StackLayout orientation, use the <a href=\"/kendo-react-ui-develop/components/layout/api/stacklayoutprops#orientation\">orientation</a> property.\nBy default, orientation is set to horizontal.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nGaps top—Uses the top point of the container.\nmiddle—Uses the middle point of the container.\nbottom—Uses the bottom point of the container.\n(Default)stretch—Stretches the items to fill the height of the container.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nNested StackLayouts\n\nThe component enables you to create a more complex layout that includes both horizontal and vertical items by nesting StackLayout components inside one another.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe following example demonstrates the StackLayout component in action and also showcases other KendoReact components—the <a href=\"/kendo-react-ui-develop/components/buttons/buttongroup\">ButtonGroup</a>, <a href=\"/kendo-react-ui-develop/components/layout/avatar\">Avatars</a> and <a href=\"/kendo-react-ui-develop/components/layout/card\">Cards</a> components. The components are arranged in a stack and can be switched from horizontal to vertical orientation.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "TextBox": "## API Reference Item\n- Name: TextBoxProps\n- Type: Interface\n- Summary: Represents the properties of the KendoReact [TextBox]({% slug api_inputs_textbox %}) component\n- Syntax: \n\n## Additional Context\n### TextBoxProps.autoFocus (children)\nname: autoFocus\nfullName: TextBoxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the TextBox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.fillMode (children)\nname: fillMode\nfullName: TextBoxProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- solid\\r\\n- outline\\r\\n- flat\\r\\n- null&mdash;Does not set a fillMode \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.inputAttributes (children)\nname: inputAttributes\nfullName: TextBoxProps.inputAttributes\nsummary: \"Sets the HTML attributes of the inner focusable input element.\\r\\nAttributes which are essential for certain component functionalities cannot be changed.\"\nsyntax:\n  return:\n    type: InputHTMLAttributes\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.onChange (children)\nname: onChange\nfullName: TextBoxProps.onChange\nsummary: |-\n  The \n  `onChange`\n   callback of the \n  `input`\n   element inside the TextBox.\nsyntax:\n  return:\n    type: '(event: TextBoxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.prefix (children)\nname: prefix\nfullName: TextBoxProps.prefix\nsummary: Sets a custom prefix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.rounded (children)\nname: rounded\nfullName: TextBoxProps.rounded\nsummary: \"Configures the \\n`roundness`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- full\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\" | \"full\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.size (children)\nname: size\nfullName: TextBoxProps.size\nsummary: \"Configures the \\n`size`\\n of the TextBox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.suffix (children)\nname: suffix\nfullName: TextBoxProps.suffix\nsummary: Sets a custom suffix to the TextBox component.\nsyntax:\n  return:\n    type: CustomComponent\npackageName: '@progress/kendo-react-inputs'\n\n---\n### TextBoxProps.valid (children)\nname: valid\nfullName: TextBoxProps.valid\nsummary: |-\n  Indicates if the component is in \n  `valid`\n   state\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: TextBox\n- Type: Function\n- Summary: Represents the [KendoReact TextBox component]({% slug overview_textbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { TextBox, TextBoxChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [name, setName] = React.useState<string>('');\n\n    const handleChange = (event: TextBoxChangeEvent) => {\n        setName(event.value as string);\n    };\n\n    return <TextBox value={name} onChange={handleChange} placeholder=\"Enter your name\" />;\n}\n\n```\n\n\n## Additional Context\n### TextBox.TextBox.props (children)\nname: props\nfullName: TextBox.TextBox.props\nsyntax:\n  return:\n    type: TextBoxProps | RefAttributes\n\n\nThe KendoReact TextBox component provides options for creating composite inputs that you can integrate within forms or use as standalone items.\nThis   is   a  Free React  TextBoxThe KendoReact  TextBox   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example demonstrates the TextBox in action. <a href=\"/kendo-react-ui-develop/components/inputs/floating-labels\">Floating Label</a>—Add a Floating Label functionality to the TextBox component.\n<a href=\"/kendo-react-ui-develop/components/inputs/textbox/disabled\">Disabled state</a>—You can use the configuration options of the TextBox to disable the component so that users are not able to interact with it.\n<a href=\"/kendo-react-ui-develop/components/inputs/textbox/appearance\">Appearance</a>—All KendoReact Inputs enable you to set their dimensions.\n\nForms Support\n\nThe KendoReact TextBox component can be easily integrated with our <a href=\"/kendo-react-ui-develop/components/form\">KendoReact Form</a>.\nThe form enables you to validate the TextBox and prevent the submission of the forms which are in an invalid state.\nBy utilizing the KendoReact Form component we can take advantage of the <a href=\"/kendo-react-ui-develop/components/form/validation\">Validation</a> functionality and render additional custom component depending on the form's validity state.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Error": "## API Reference Item\n- Name: ErrorProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Error component.\n- Syntax: \n\n## Additional Context\n### ErrorProps.children (children)\nname: children\nfullName: ErrorProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.className (children)\nname: className\nfullName: ErrorProps.className\nsummary: Sets a class of the Error DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.direction (children)\nname: direction\nfullName: ErrorProps.direction\nsummary: \"Specifies the alignment of the Error text.\\r\\n\\r\\nThe possible values are:\\r\\n* (Default) \\n`start`\\n\\r\\n* \\n`end`\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\"'\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.id (children)\nname: id\nfullName: ErrorProps.id\nsummary: \"Represents the id of the Error element.\\r\\nThe value should be also set to the editor's \\n`ariaDescribedBy`\\n property.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### ErrorProps.style (children)\nname: style\nfullName: ErrorProps.style\nsummary: The styles that are applied to the Error.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-labels'\n\n\n## API Reference Item\n- Name: Error\n- Type: Function\n- Summary: Represents the KendoReact Error component.\r\nRender the error text that will be shown underneath the form editor after a validation.\n- Syntax: \n\n## Examples\n\n\n## Additional Context\n### Error.Error.props (children)\nname: props\nfullName: Error.Error.props\nsyntax:\n  return:\n    type: ErrorProps\n\n\n<a class=\"component-module--component--c0ff4 undefined\" href=\"/kendo-react-ui/components/labels/error\">\n\nError\n\n\nError\n\n        A component that displays an error next to the respective focusable component when the input is invalid.\n      \n</a>\n\nKey Features\n\nThe KendoReact Labels provide the following key features. Note that this is not an exhaustive list.\n\nAdd the Error component after the desired editor.\nSet the <a href=\"/kendo-react-ui-develop/components/labels/api/errorprops#id\">id</a> property of the Error and the aria-describedby property of the editor.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ... Error Overview\n\nThe Error component enables you to display an error message to React components.\nThis   is   a  Free React  ErrorThe KendoReact  Error   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe following example shows how to set up the Error component:\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Label": "## API Reference Item\n- Name: Label\n- Type: Function\n- Summary: Represents the KendoReact Label component.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Label } from '@progress/kendo-react-labels';\n\nexport default function App() {\n    return (\n        <Label>Label</Label>\n    );\n}\n\n```\n\n\n## Additional Context\n### Label.Label.props (children)\nname: props\nfullName: Label.Label.props\nsyntax:\n  return:\n    type: LabelProps\n\n\n## API Reference Item\n- Name: Label.Label(props:LabelProps)\n- Type: CallSignature\n- Summary: Represents the KendoReact Label component.\n- Syntax: \n\n- Return Type: name: Element\nfullName: Element\nsyntax: {}\npackageName: '@progress/kendo-drawing'\n\n\n## API Reference Item\n- Name: LabelProps\n- Type: Interface\n- Summary: Represents the props of the KendoReact Label component.\n- Syntax: \n\n## Additional Context\n### LabelProps.children (children)\nname: children\nfullName: LabelProps.children\nsummary: \"The text that will be rendered inside the label element.\\r\\nCan be omitted for editors without label to keep form layout.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.className (children)\nname: className\nfullName: LabelProps.className\nsummary: Sets a class of the Label DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorDisabled (children)\nname: editorDisabled\nfullName: LabelProps.editorDisabled\nsummary: Specifies if the editor is disabled.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorId (children)\nname: editorId\nfullName: LabelProps.editorId\nsummary: \"The id of the editor.\\r\\nRepresent the [\\n`htmlFor`\\n](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) property, which will be set to the \\n`label`\\n element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorRef (children)\nname: editorRef\nfullName: LabelProps.editorRef\nsummary: \"An optional React ref to the editor.\\r\\nUsed to redirect the click event to the editor when it does not contain native form element.\\r\\nTo be able to work, the editor should have \\n`focus`\\n method or \\n`actionElement`\\n prop on it's ref.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.editorValid (children)\nname: editorValid\nfullName: LabelProps.editorValid\nsummary: Specifies the validity of the editor. Used to define the editor is invalid.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.id (children)\nname: id\nfullName: LabelProps.id\nsummary: \"Represents the id of the label element.\\r\\nThe value should be set to the editor \\n`ariaLabelledBy`\\n property.\\r\\nCan be used when the editor is not containing native form element.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.optional (children)\nname: optional\nfullName: LabelProps.optional\nsummary: If enabled marks the label as optional.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-labels'\n\n---\n### LabelProps.style (children)\nname: style\nfullName: LabelProps.style\nsummary: The styles that are applied to the Label.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-labels'\n\n\nThe Label component enables you to provide a label functionality to React components. It supports labelling both form elements (e.g.: input element) and custom focusable elements. It can contain Kendo React Input components such as KendoReact DropDownList and NumericTextBox, or HTML elements like input.\n\nYou can customize the label and the bar that indicates the task progress by setting custom styling or custom classes to the inner elements that are responsible for their rendering. To define the custom layout, use the <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#progressstyle\">progressStyle</a> and <a href=\"/kendo-react-ui-develop/components/progressbars/api/progressbarprops#progressclassname\">progressClassName</a> options for the completed part and <a\n\nThe following demo shows the components included in the KendoReact Labels package:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Rating": "## API Reference Item\n- Name: RatingProps\n- Type: Interface\n- Summary: Represents the properties of [Rating]({% slug api_inputs_rating %}) component.\n- Syntax: \n\n## Additional Context\n### RatingProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: RatingProps.ariaDescribedBy\nsummary: Identifies the element(s) which will describe the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: RatingProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.children (children)\nname: children\nfullName: RatingProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.className (children)\nname: className\nfullName: RatingProps.className\nsummary: Adds custom CSS classes to the Rating.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.defaultValue (children)\nname: defaultValue\nfullName: RatingProps.defaultValue\nsummary: Sets the default value of the Rating, used in uncontrolled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.dir (children)\nname: dir\nfullName: RatingProps.dir\nsummary: |-\n  Specifies the direction of the Rating (\n  `ltr`\n   or \n  `rtl`\n  ).\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.disabled (children)\nname: disabled\nfullName: RatingProps.disabled\nsummary: |-\n  Disables the Rating when set to \n  `true`\n  .\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.half (children)\nname: half\nfullName: RatingProps.half\nsummary: |-\n  Determines if the value represents a half icon (\n  `true`\n  ) or not (\n  `false`\n  ).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.icon (children)\nname: icon\nfullName: RatingProps.icon\nsummary: Sets a custom icon for the Rating.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.id (children)\nname: id\nfullName: RatingProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the Rating.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.item (children)\nname: item\nfullName: RatingProps.item\nsummary: Represents the rendered Rating item.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.label (children)\nname: label\nfullName: RatingProps.label\nsummary: Sets a custom label for the Rating.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.max (children)\nname: max\nfullName: RatingProps.max\nsummary: Sets the maximum possible value of the Rating.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.min (children)\nname: min\nfullName: RatingProps.min\nsummary: Sets the minimum possible value of the Rating.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.name (children)\nname: name\nfullName: RatingProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.onBlur (children)\nname: onBlur\nfullName: RatingProps.onBlur\nsummary: Fires when the Rating loses focus.\nsyntax:\n  return:\n    type: '(event: RatingItemFocusEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onChange (children)\nname: onChange\nfullName: RatingProps.onChange\nsummary: Fires when the value of the Rating changes.\nsyntax:\n  return:\n    type: '(event: RatingChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onClick (children)\nname: onClick\nfullName: RatingProps.onClick\nsummary: Fires when the Rating is clicked.\nsyntax:\n  return:\n    type: '(event: RatingItemMouseEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onFocus (children)\nname: onFocus\nfullName: RatingProps.onFocus\nsummary: Fires when the Rating is focused.\nsyntax:\n  return:\n    type: '(event: RatingItemFocusEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.onKeyDown (children)\nname: onKeyDown\nfullName: RatingProps.onKeyDown\nsummary: Fires when a key is pressed while the Rating is focused.\nsyntax:\n  return:\n    type: '(event: RatingKeyboardEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.precision (children)\nname: precision\nfullName: RatingProps.precision\nsummary: |-\n  Determines the precision of the Rating (\n  `item`\n   or \n  `half`\n  ).\nsyntax:\n  return:\n    type: '\"item\" | \"half\"'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.readonly (children)\nname: readonly\nfullName: RatingProps.readonly\nsummary: |-\n  Sets the \n  `readonly`\n   mode of the Rating.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.required (children)\nname: required\nfullName: RatingProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.selection (children)\nname: selection\nfullName: RatingProps.selection\nsummary: |-\n  Determines the selection mode of the Rating (\n  `continues`\n   or \n  `single`\n  ).\nsyntax:\n  return:\n    type: '\"single\" | \"continues\"'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.step (children)\nname: step\nfullName: RatingProps.step\nsummary: Sets the step value between the minimum and maximum values.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.style (children)\nname: style\nfullName: RatingProps.style\nsummary: Sets additional CSS styles to the Rating.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.svgIcon (children)\nname: svgIcon\nfullName: RatingProps.svgIcon\nsummary: Sets a custom SVG icon for the Rating.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.svgIconOutline (children)\nname: svgIconOutline\nfullName: RatingProps.svgIconOutline\nsummary: Sets a custom outline SVG icon for the Rating.\nsyntax:\n  return:\n    type: SVGIcon\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.tabIndex (children)\nname: tabIndex\nfullName: RatingProps.tabIndex\nsummary: |-\n  Sets the \n  `tabIndex`\n   attribute.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### RatingProps.valid (children)\nname: valid\nfullName: RatingProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.validationMessage (children)\nname: validationMessage\nfullName: RatingProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.validityStyles (children)\nname: validityStyles\nfullName: RatingProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### RatingProps.value (children)\nname: value\nfullName: RatingProps.value\nsummary: Sets the current value of the Rating, used in controlled mode.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n\n## API Reference Item\n- Name: Rating\n- Type: Function\n- Summary: Represents the [KendoReact Rating component]({% slug overview_rating %}).\r\n\r\nAccepts properties of type [RatingProps]({% slug api_inputs_ratingprops %}).\r\nObtaining the \n`ref`\n returns an object of type [RatingHandle]({% slug api_inputs_ratinghandle %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Rating, RatingChangeEvent } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    const [ratingValue, setRatingValue] = React.useState(2);\n\n    const handleChange = (event: RatingChangeEvent) => {\n        setRatingValue(event.value);\n    };\n\n    return <Rating value={ratingValue} onChange={handleChange} />;\n}\n\n```\n\n\n## Additional Context\n### Rating.Rating.props (children)\nname: props\nfullName: Rating.Rating.props\nsyntax:\n  return:\n    type: RatingProps | RefAttributes\n\n\nRatingItem and Rating component\n\nThe KendoReact RatingItem enables the user to implement different styles for the RatingItem children.\n\nRatingItem customization\n\nThe RatingItem component could be used for customization of the existing rating item. The following example demonstrates the RatingItem in action, changing the icon visualization to heartIcon SvgIcon, based on the existing RatingItem rendering.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nRatingItem override\n\nRating Precision\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Rating component is part of the <a href=\"/kendo-react-ui-develop/components/inputs\">KendoReact Inputs</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Rating and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/inputs/get-started\">Getting Started with the KendoReact Inputs</a> guide.\n\nKey Features\n\nUse its <a href=\"/kendo-react-ui-develop/components/inputs/api/ratingprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/ratingprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Card": "## API Reference Item\n- Name: Card.Card.props\n- Type: Parameter\n- Summary: \n- Syntax: \n\n## API Reference Item\n- Name: Card\n- Type: Function\n- Summary: \n- Syntax: \n\n## Additional Context\n### CardProps (children)\nname: CardProps\nfullName: CardProps\nsyntax:\n  return:\n    type: any\n  parameters:\n    - id: 26200\n      name: key\n      type: string\npackageName: '@progress/kendo-react-layout'\nmembers:\n  - children\n  - className\n  - dir\n  - orientation\n  - style\n  - type\n\n\nThe following example demonstrates the Card in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Card is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Card and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features The Card component represents any type of content and all kind of actions about a single subject.\nIt provides clarity, categorization and an attractive way of presenting content.\nThis   is   a  Free React  CardThe KendoReact  Card   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe Card component consists of the following building blocks:\n\nBasic usage\n\nTo specify action buttons in the Card, you can use the CardActions component. You can arrange the content of the buttons either horizontally or vertically, by using the <a href=\"/kendo-react-ui-develop/components/layout/api/cardactionsprops#orientation\">orientation</a> option of the component. To specify their layout utilize the <a href=\"/kendo-react-ui-develop/components/layout/api/cardactionsprops#layout\">layout</a> property.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Toolbar": "## API Reference Item\n- Name: Toolbar\n- Type: Function\n- Summary: Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Toolbar } from '@progress/kendo-react-buttons';\n\nfunction App() {\n    return (\n        <Toolbar>\n            <span>Toolbar content</span>\n        </Toolbar>\n    );\n}\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Toolbar.Toolbar.props (children)\nname: props\nfullName: Toolbar.Toolbar.props\nsyntax:\n  return:\n    type: ToolbarProps | RefAttributes\n\n\n## API Reference Item\n- Name: ToolbarProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n- Syntax: \n\n## Additional Context\n### ToolbarProps.ariaLabel (children)\nname: ariaLabel\nfullName: ToolbarProps.ariaLabel\nsummary: |-\n  Represents the \n  `aria-label`\n   HTML attribute of the Toolbar component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.buttonScrollSpeed (children)\nname: buttonScrollSpeed\nfullName: ToolbarProps.buttonScrollSpeed\nsummary: \"Sets the Toolbar scroll speed in pixels when scrolling via clicking the previous or next button.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.children (children)\nname: children\nfullName: ToolbarProps.children\nsummary: Determines the children nodes.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.className (children)\nname: className\nfullName: ToolbarProps.className\nsummary: Sets additional classes to the Toolbar.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.dir (children)\nname: dir\nfullName: ToolbarProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.fillMode (children)\nname: fillMode\nfullName: ToolbarProps.fillMode\nsummary: \"Configures the \\n`fillMode`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n— \\n`solid`\\n — Applies a \\n`background`\\n color and \\n`solid borders`\\n.\\r\\n— \\n`flat`\\n — Sets a \\n`transparent background`\\n and \\n`solid bottom border`\\n.\\r\\n— \\n`outline`\\n — Sets a \\n`transparent background`\\n and \\n`solid borders`\\n.\\r\\n— \\n`null`\\n — This option removes the built-in fill mode styles of the Toolbar. Allows for custom \\n`background`\\n and \\n`border`\\n styles.\"\nsyntax:\n  return:\n    type: null | \"flat\" | \"solid\" | \"outline\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.id (children)\nname: id\nfullName: ToolbarProps.id\nsummary: |-\n  Sets the \n  `id`\n   property of the top div element of the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### ToolbarProps.keyboardNavigation (children)\nname: keyboardNavigation\nfullName: ToolbarProps.keyboardNavigation\nsummary: |-\n  If set to \n  `false`\n  , it will turn off the built-in keyboard navigation.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.nextButton (children)\nname: nextButton\nfullName: ToolbarProps.nextButton\nsummary: \"Defines the custom component that will be rendered as a next button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.onResize (children)\nname: onResize\nfullName: ToolbarProps.onResize\nsummary: |-\n  The \n  `resize`\n   event of the Toolbar.\nsyntax:\n  return:\n    type: '(event: ToolbarResizeEvent) => void'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.overflow (children)\nname: overflow\nfullName: ToolbarProps.overflow\nsummary: \"Represents the possible overflow mode options of the Toolbar.\\r\\nApplicable when there is not enough space to render all tools.\"\nsyntax:\n  return:\n    type: '\"none\" | \"section\" | \"scroll\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.prevButton (children)\nname: prevButton\nfullName: ToolbarProps.prevButton\nsummary: \"Defines the custom component that will be rendered as a previous button.\\r\\nTo remove the button, set a function which returns null \\n`() => null`\\n.\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtons (children)\nname: scrollButtons\nfullName: ToolbarProps.scrollButtons\nsummary: \"Determines the Toolbar scroll buttons visibility.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"auto\" | \"hidden\" | \"visible\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.scrollButtonsPosition (children)\nname: scrollButtonsPosition\nfullName: ToolbarProps.scrollButtonsPosition\nsummary: \"Determines the Toolbar scroll buttons position.\\r\\nApplicable when the overflow property is set to \\n`scroll`\\n.\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\" | \"split\"'\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.size (children)\nname: size\nfullName: ToolbarProps.size\nsummary: \"Configures the \\n`size`\\n of the Toolbar.\\r\\nThe available options are:\\r\\n— \\n`small`\\n — Sets the padding of the component to 4px 4px.\\r\\n— \\n`medium`\\n — Sets the padding of the component to 8px 8px.\\r\\n— \\n`large`\\n — Sets the padding of the component to 10px 10px.\\r\\n— \\n`null`\\n — This option removes the the built-in size styles of the Toolbar. Allows for custom \\n`padding`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.style (children)\nname: style\nfullName: ToolbarProps.style\nsummary: The styles that are applied to the Toolbar.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-buttons'\n\n---\n### ToolbarProps.tabIndex (children)\nname: tabIndex\nfullName: ToolbarProps.tabIndex\nsummary: |-\n  Specifies the \n  `tabIndex`\n   of the Toolbar.\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-buttons'\n\n\nToolbar Configuration\n\nThe ListBox enables you to render and customize a toolbar.\nTo render the toolbar, pass the ListBoxToolbar component to the <a href=\"/kendo-react-ui-develop/components/listbox/api/listboxprops#toolbar\">toolbar</a> prop of the ListBox component. This will enable you to:\n\nTo include components in the Toolbar, wrap each of them into a <a href=\"/kendo-react-ui-develop/components/buttons/api/toolbaritem\">ToolbarItem</a>. You can also separate them from each other with the <a href=\"/kendo-react-ui-develop/components/buttons/api/toolbarseparator\">ToolbarSeparator</a> or <a href=\"/kendo-react-ui-develop/components/buttons/api/toolbarspacer\">ToolbarSpacer</a>.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Toolbar is part of the <a href=\"/kendo-react-ui-develop/components/buttons\">KendoReact Buttons</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Toolbar and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/buttons/get-started\">Getting Started with the KendoReact Buttons</a> guide.\n\nKey Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Typography": "React Typography Demo Preview\n\nThe following example demonstrates the Typography variants and styles in action.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Typography is part of the <a href=\"/kendo-react-ui-develop/components/common\">KendoReact Common Utilities</a> component library. The procedures for installing, importing, and using the Common Utilities are identical for all components in the package. To learn how to use the Typography and the rest of the Common Utilities, see the <a href=\"/kendo-react-ui-develop/components/common\">Getting Started with the KendoReact Common Utilities</a> guide.\n\nKey Features The Typography is a reusable component that helps presenting the content in a React application. It could trim down a lot of time as the application grows.\nThis   is   a  Free React  TypographyThe KendoReact  Typography   is  free to use, including in production—no sign-up or license required. Check out all <a href=\"https://www.telerik.com/kendo-react-ui/components/free\" rel=\"noopener\" target=\"_blank\">120+ free and premium UI components</a> in the enterprise-grade KendoReact library.\nThe key benefits of the Typography component are:\n\nAppearance\n\nThe Typography component provides many predefined appearance options such as configure the the alignment and transformation of the text, and also change the theme color.\n\nFont Size\n\nTo set the font size of the element, use the <a href=\"/kendo-react-ui-develop/components/common/api/typographyprops#fontsize\">fontSize</a> property.\nThe possible values are:\n\nxsmall\nsmall\nmedium\nlarge\nxlarge\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nFont Weight\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Drawer": "## API Reference Item\n- Name: Drawer\n- Type: Function\n- Summary: Represents the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\n## Additional Context\n### Drawer.Drawer.props (children)\nname: props\nfullName: Drawer.Drawer.props\nsyntax:\n  return:\n    type: DrawerProps | RefAttributes\n\n\n## API Reference Item\n- Name: DrawerProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Drawer component]({% slug overview_drawer %}).\n- Syntax: \n\n## Additional Context\n### DrawerProps.animation (children)\nname: animation\nfullName: DrawerProps.animation\nsummary: \"Specifies the animation settings of the Drawer.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer animation={{ duration: 300 }} />\\r\\n```\"\nsyntax:\n  return:\n    type: boolean | DrawerAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.children (children)\nname: children\nfullName: DrawerProps.children\nsummary: \"Sets the Drawer items declaratively.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer>\\r\\n  <DrawerItem text=\\\"Home\\\" />\\r\\n</Drawer>\\r\\n```\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.className (children)\nname: className\nfullName: DrawerProps.className\nsummary: |-\n  Specifies a list of CSS classes that will be added to the \n  `k-drawer-container`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.dir (children)\nname: dir\nfullName: DrawerProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute. This is used to switch from LTR to RTL.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.drawerClassName (children)\nname: drawerClassName\nfullName: DrawerProps.drawerClassName\nsummary: |-\n  Specifies a list of CSS classes that will be added to the \n  `k-drawer`\n   element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.expanded (children)\nname: expanded\nfullName: DrawerProps.expanded\nsummary: \"Specifies the state of the Drawer\\r\\n([see example]({% slug expanded_state_drawer %})).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer expanded={true} />\\r\\n```\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.item (children)\nname: item\nfullName: DrawerProps.item\nsummary: \"Overrides the default component responsible for visualizing a single item\\r\\n([see example]({% slug custom_rendering %})).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer item={CustomDrawerItem} />\\r\\n```\"\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.mini (children)\nname: mini\nfullName: DrawerProps.mini\nsummary: \"Enables the mini (compact) view of the Drawer which is displayed when the component is collapsed\\r\\n([see example]({% slug display_modes_drawer %}#toc-mini-view)).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer mini={true} />\\r\\n```\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.miniWidth (children)\nname: miniWidth\nfullName: DrawerProps.miniWidth\nsummary: \"Defines the width of the Drawer when the mini view is enabled and the component is collapsed.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer miniWidth={60} />\\r\\n```\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.mode (children)\nname: mode\nfullName: DrawerProps.mode\nsummary: \"Specifies the mode in which the Drawer will be displayed\\r\\n([see example]({% slug display_modes_drawer %}#toc-expand-modes)).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer mode=\\\"push\\\" />\\r\\n```\"\nsyntax:\n  return:\n    type: '\"push\" | \"overlay\"'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.onOverlayClick (children)\nname: onOverlayClick\nfullName: DrawerProps.onOverlayClick\nsummary: \"The event handler that will be fired when the overlay is clicked.\\r\\nUsed in overlay mode only.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer onOverlayClick={(e) => console.log('Overlay clicked')} />\\r\\n```\"\nsyntax:\n  return:\n    type: '(event: MouseEvent<HTMLDivElement, MouseEvent>) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.onSelect (children)\nname: onSelect\nfullName: DrawerProps.onSelect\nsummary: \"Fires when a Drawer item is selected.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer onSelect={(e) => console.log('Item selected', e)} />\\r\\n```\"\nsyntax:\n  return:\n    type: '(event: DrawerSelectEvent) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.position (children)\nname: position\nfullName: DrawerProps.position\nsummary: \"Specifies the position of the Drawer\\r\\n([see example]({% slug positioning_drawer %})).\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer position=\\\"end\\\" />\\r\\n```\"\nsyntax:\n  return:\n    type: '\"start\" | \"end\"'\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.style (children)\nname: style\nfullName: DrawerProps.style\nsummary: Sets additional CSS styles to the Drawer.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.tabIndex (children)\nname: tabIndex\nfullName: DrawerProps.tabIndex\nsummary: \"Sets the \\n`tabIndex`\\n property of the Drawer.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer tabIndex={0} />\\r\\n```\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### DrawerProps.width (children)\nname: width\nfullName: DrawerProps.width\nsummary: \"Defines the width of the Drawer when it is expanded.\\r\\n\\r\\nExample:\\r\\n\\n```jsx\\r\\n<Drawer width={300} />\\r\\n```\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: DrawerProps.items\n- Type: Property\n- Summary: The collection of items that will be rendered in the Drawer\r\n([see example]({% slug overview_drawer %})).\r\n\r\nExample:\r\n\n```jsx\r\n<Drawer items={[{ text: 'Home' }, { text: 'Settings' }]} />\r\n```\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\nimport { Drawer, DrawerContent, DrawerSelectEvent } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { menuIcon } from '@progress/kendo-svg-icons';\n\nconst items = [\n    { text: 'Home', selected: true, route: '/' },\n    { text: 'Products', route: '/products' },\n    { text: 'About', route: '/about' }\n];\n\nconst DrawerContainer = (props) => {\n    const navigate = useNavigate();\n    const [expanded, setExpanded] = React.useState<boolean>(true);\n    const [selected, setSelected] = React.useState(items.findIndex((x) => x.selected === true));\n\n    const handleClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const onSelect = (e: DrawerSelectEvent) => {\n        navigate(e.itemTarget.props.route);\n        setSelected(e.itemIndex);\n    };\n\n    return (\n        <div>\n            <div className=\"custom-toolbar\">\n                <Button svgIcon={menuIcon} fillMode=\"flat\" onClick={handleClick} />\n                <span className=\"title\">Navigational drawer</span>\n            </div>\n            <Drawer\n                expanded={expanded}\n                position={'start'}\n                mode={'push'}\n                width={120}\n                items={items.map((item, index) => ({\n                    ...item,\n                    selected: index === selected\n                }))}\n                onSelect={onSelect}\n            >\n                <DrawerContent>{props.children}</DrawerContent>\n            </Drawer>\n        </div>\n    );\n};\n\nconst Home = () => {\n    return <div>Home Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst Products = () => {\n    return <div>Products Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst About = () => {\n    return <div>About Page Rendering. Replace the div content with your own component</div>;\n};\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <DrawerContainer>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/products\" element={<Products />} />\n                    <Route path=\"/about\" element={<About />} />\n                </Routes>\n            </DrawerContainer>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n\n```\n\n\nThe Drawer component works with a flat structure of items by design. However many real world scenarios require a navigation with hierarchical structure.\nThe following example demonstrates how to achieve this by toggling the visibility of the Drawer items depending on the currently selected item.\nThe level property of each item sets its level of nesting beneath the parent element in the hierarchy tree.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThe Drawer component works with a flat structure of items by design. However many real world scenarios require a navigation with hierarchical structure.\nThe following example demonstrates how to achieve this by toggling the visibility of the Drawer items depending on the currently selected item.\nThe level property of each item sets its level of nesting beneath the parent element in the hierarchy tree.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nThis section lists the selectors, attributes, and behavior patterns supported by the component and its composite elements, if any.\nThe Drawer component allows rendering a whole template inside of it. Thus, the accessibility roles are applied only when the built-in data-binding is used.\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Menu": "## API Reference Item\n- Name: MenuProps\n- Type: Interface\n- Summary: The properties of the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Additional Context\n### MenuProps.animate (children)\nname: animate\nfullName: MenuProps.animate\nsummary: Controls the Popup animation.\nsyntax:\n  return:\n    type: boolean | PopupAnimation\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.children (children)\nname: children\nfullName: MenuProps.children\nsummary: Sets the Menu items declaratively.\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.className (children)\nname: className\nfullName: MenuProps.className\nsummary: Adds a custom className to the Menu top element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.customCloseItemIds (children)\nname: customCloseItemIds\nfullName: MenuProps.customCloseItemIds\nsummary: \"Sets the ids of the Menu items that will not be closed on mouse-leave. The ids are hierarchical and zero-based.\\r\\nThe first root item has a \\n`0`\\n id. If the first root item has children,\\r\\nthe first child item acquires a \\n`0_0`\\n id and the second acquires a \\n`0_1`\\n id.\"\nsyntax:\n  return:\n    type: Array<string>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.dir (children)\nname: dir\nfullName: MenuProps.dir\nsummary: Sets the direction of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverCloseDelay (children)\nname: hoverCloseDelay\nfullName: MenuProps.hoverCloseDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on item mouse-leave\\r\\n([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.hoverOpenDelay (children)\nname: hoverOpenDelay\nfullName: MenuProps.hoverOpenDelay\nsummary: \"Specifies the delay in milliseconds before the Menu items are closed on\\r\\nitem mouse-leave ([see example]({% slug opening_closing_menu %}#toc-delay-on-hover)).\\r\\nUsed to avoid accidental closure on leaving.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.id (children)\nname: id\nfullName: MenuProps.id\nsummary: Sets the ID of the Menu.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.itemRender (children)\nname: itemRender\nfullName: MenuProps.itemRender\nsummary: \"A React functional or class component which is used for rendering the innermost part of\\r\\nthe Menu item ([see example]({% slug rendering_menu %}#toc-items)).\\r\\nBy default, the innermost item part includes only the text for the item.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.items (children)\nname: items\nfullName: MenuProps.items\nsummary: Sets the Menu items.\nsyntax:\n  return:\n    type: Array<MenuItemModel>\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.linkRender (children)\nname: linkRender\nfullName: MenuProps.linkRender\nsummary: \"A React functional or class component which is used for rendering the link of the item\\r\\n([see example]({% slug rendering_menu %}#toc-links)).\\r\\nThe item link is a part of the visual representation of the item which, by default, includes an arrow, icon, and text.\"\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.onSelect (children)\nname: onSelect\nfullName: MenuProps.onSelect\nsummary: Fires when a Menu item is selected.\nsyntax:\n  return:\n    type: '(event: MenuSelectEvent) => void'\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.openOnClick (children)\nname: openOnClick\nfullName: MenuProps.openOnClick\nsummary: |-\n  If \n  `openOnClick`\n   is set to \n  `true`\n  , the items are opened on mouse hover only after an initial click.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.style (children)\nname: style\nfullName: MenuProps.style\nsummary: Sets additional CSS styles to the Menu.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuProps.vertical (children)\nname: vertical\nfullName: MenuProps.vertical\nsummary: \"Specifies whether the Menu will be vertical\\r\\n([see example]({% slug vertical_menu %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-layout'\n\n\n## API Reference Item\n- Name: MenuClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Menu component]({% slug overview_menu %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport React from 'react';\nimport { MenuClassComponent, MenuItem } from '@progress/kendo-react-layout';\n\nconst App = () => (\n    <MenuClassComponent>\n        <MenuItem text=\"Item 1\" />\n        <MenuItem text=\"Item 2\" />\n    </MenuClassComponent>\n);\n\nexport default App;\n\n```\n\n\n## Additional Context\n### MenuClassComponent.constructor (children)\nname: constructor\nfullName: MenuClassComponent.constructor\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.checkIsDirectionRightToLeft (children)\nname: checkIsDirectionRightToLeft\nfullName: MenuClassComponent.checkIsDirectionRightToLeft\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable (children)\nname: clearItemHoverAndLeaveRequestsIfApplicable\nfullName: MenuClassComponent.clearItemHoverAndLeaveRequestsIfApplicable\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.directionHolder (children)\nname: directionHolder\nfullName: MenuClassComponent.directionHolder\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.dispatchSelectEventIfWired (children)\nname: dispatchSelectEventIfWired\nfullName: MenuClassComponent.dispatchSelectEventIfWired\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getInputItem (children)\nname: getInputItem\nfullName: MenuClassComponent.getInputItem\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.getMenuClassName (children)\nname: getMenuClassName\nfullName: MenuClassComponent.getMenuClassName\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.inputItems (children)\nname: inputItems\nfullName: MenuClassComponent.inputItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.isItemWithDefaultClose (children)\nname: isItemWithDefaultClose\nfullName: MenuClassComponent.isItemWithDefaultClose\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemHoverRequest (children)\nname: itemHoverRequest\nfullName: MenuClassComponent.itemHoverRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.itemLeaveRequest (children)\nname: itemLeaveRequest\nfullName: MenuClassComponent.itemLeaveRequest\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.items (children)\nname: items\nfullName: MenuClassComponent.items\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuWrapperEl (children)\nname: menuWrapperEl\nfullName: MenuClassComponent.menuWrapperEl\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.mouseOverHandler (children)\nname: mouseOverHandler\nfullName: MenuClassComponent.mouseOverHandler\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemBlur (children)\nname: onItemBlur\nfullName: MenuClassComponent.onItemBlur\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemClick (children)\nname: onItemClick\nfullName: MenuClassComponent.onItemClick\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemFocus (children)\nname: onItemFocus\nfullName: MenuClassComponent.onItemFocus\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseDown (children)\nname: onItemMouseDown\nfullName: MenuClassComponent.onItemMouseDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseLeave (children)\nname: onItemMouseLeave\nfullName: MenuClassComponent.onItemMouseLeave\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onItemMouseOver (children)\nname: onItemMouseOver\nfullName: MenuClassComponent.onItemMouseOver\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.onKeyDown (children)\nname: onKeyDown\nfullName: MenuClassComponent.onKeyDown\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.prepareItems (children)\nname: prepareItems\nfullName: MenuClassComponent.prepareItems\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.reset (children)\nname: reset\nfullName: MenuClassComponent.reset\nsummary: Resets the selection and opening of Menu items.\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setFocusedItemId (children)\nname: setFocusedItemId\nfullName: MenuClassComponent.setFocusedItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.setHoveredItemId (children)\nname: setHoveredItemId\nfullName: MenuClassComponent.setHoveredItemId\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.animate (children)\nname: animate\nfullName: MenuClassComponent.animate\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.element (children)\nname: element\nfullName: MenuClassComponent.element\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n---\n### MenuClassComponent.menuItemId (children)\nname: menuItemId\nfullName: MenuClassComponent.menuItemId\nsyntax: {}\npackageName: '@progress/kendo-react-layout'\n\n\nKendoReact Menu Overview\n\nThe KendoReact Menu is a multi-level component for displaying hierarchical data.\nYou can describe the Menu items either by:\n\nUsing nested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSetting the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> property. The Menu is part of the <a href=\"/kendo-react-ui-develop/components/layout\">KendoReact Layout</a> component library. The procedures for installing, importing, and using all components in the library are identical. To learn how to use the Menu and the rest of the components in the package, see the <a href=\"/kendo-react-ui-develop/components/layout/get-started\">Getting Started with the KendoReact Layout Package</a> guide.\n\nKey Features\n\nItems\n\nThe Menu items provide configuration options for handling their properties and overriding their default rendering.\nTo render the Menu items, use either:\n\nNested <a href=\"/kendo-react-ui-develop/components/layout/api/menuitem\">MenuItem</a> components, or\nSet the <a href=\"/kendo-react-ui-develop/components/layout/api/menuprops#items\">items</a> Menu property.\n\nFunctionality and Features\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "ListView": "## API Reference Item\n- Name: ListViewProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact ListView component]({% slug overview_listview %}).\n- Syntax: \n\n## Additional Context\n### ListViewProps.className (children)\nname: className\nfullName: ListViewProps.className\nsummary: Sets a class of the ListView DOM element.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.footer (children)\nname: footer\nfullName: ListViewProps.footer\nsummary: Defines the component that renders for the ListView footer.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.header (children)\nname: header\nfullName: ListViewProps.header\nsummary: Defines the component that renders for the ListView header.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.item (children)\nname: item\nfullName: ListViewProps.item\nsummary: Defines the component that renders for each item of the data collection.\nsyntax:\n  return:\n    type: ComponentType\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.navigatable (children)\nname: navigatable\nfullName: ListViewProps.navigatable\nsummary: \"If set to \\n`true`\\n, the user can use dedicated shortcuts to interact with the ListView.\\r\\nBy default, navigation is disabled.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.onScroll (children)\nname: onScroll\nfullName: ListViewProps.onScroll\nsummary: Fires when the ListView has been scrolled.\nsyntax:\n  return:\n    type: '(event: ListViewEvent) => void'\npackageName: '@progress/kendo-react-listview'\n\n---\n### ListViewProps.style (children)\nname: style\nfullName: ListViewProps.style\nsummary: Sets styles to the ListView container.\nsyntax:\n  return:\n    type: CSSProperties\npackageName: '@progress/kendo-react-listview'\n\n\n## API Reference Item\n- Name: ListViewProps.data\n- Type: Property\n- Summary: Sets the data of the ListView.\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { ListView, ListViewItemProps } from '@progress/kendo-react-listview';\n\nconst data = [{ text: 'Item 1' }, { text: 'Item 2' }];\n\nconst MyItemRender = (props: ListViewItemProps) => {\n    const { text } = props.dataItem;\n\n    return <div>{text}</div>;\n};\n\nexport default function App() {\n    return <ListView data={data} item={MyItemRender} />;\n}\n\n```\n\n\nAfter installing the package, import the ListView component and the products data in the React App.\nIn the src/App.js file of your React project, import the ListView component from the ListView package.\n\nUsing the Component\n\n\n\nImport the products data in the src/App.js file.\njsx\n\n\n\n\nAdd the ListView component in the App component.\njsx\n\n\n\n\nCreate the MyItemRender component responsible for rendering each ListView item.\njsx\n\nPaging\n\nThe ListView enables you to split its content into pages by adding a pager and by using its extensive set of configuration options, such as implementing a responsive behavior, customizing its appearance, and more. <a href=\"/kendo-react-ui-develop/components/listview/paging\">Read more about the pager options of the ListView...</a>\n\nEditing\n\nDepending on your user requirements, you can edit, add, or delete the ListView items using templates. <a href=\"/kendo-react-ui-develop/components/listview/editing\">Read more about the editing feature of the ListView...</a> Key Features\n\nThe KendoReact ListView component delivers a range of handy and developer-friendly features whose number and further development are not limited by the list in this section. The KendoReact team constantly invests efforts to improve the performance, add more value to the existing ListView library, and develop new features.\n\nPaging\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Form": "## API Reference Item\n- Name: FormProps\n- Type: Interface\n- Summary: Contains the props for the KendoReact Form component.\n- Syntax: \n\n## Additional Context\n### FormProps.ignoreModified (children)\nname: ignoreModified\nfullName: FormProps.ignoreModified\nsummary: Allows the form to submit even when no fields have been modified.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.initialValues (children)\nname: initialValues\nfullName: FormProps.initialValues\nsummary: \"Sets the starting values for form fields.\\r\\n\\r\\nSet initial values to prevent errors when switching from uncontrolled to controlled mode.\"\nsyntax:\n  return:\n    type: '{ [key: string]: any }'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.onSubmit (children)\nname: onSubmit\nfullName: FormProps.onSubmit\nsummary: \"Handles form submission when validation passes and fields are modified.\\r\\n\\r\\nFires when at least one field is modified, the user clicks Submit, and validation passes.\"\nsyntax:\n  return:\n    type: '(values: Object, event?: SyntheticEvent<any, Event>) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.onSubmitClick (children)\nname: onSubmitClick\nfullName: FormProps.onSubmitClick\nsummary: \"Handles every submit button click, even when the form is invalid or unchanged.\\r\\n\\r\\nUse this for advanced scenarios where you need to handle all submit events.\"\nsyntax:\n  return:\n    type: '(event: FormSubmitClickEvent) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.render (children)\nname: render\nfullName: FormProps.render\nsummary: Renders the form content using the provided render function.\nsyntax:\n  return:\n    type: '(props: FormRenderProps) => any'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormProps.validator (children)\nname: validator\nfullName: FormProps.validator\nsummary: \"Validates the entire form and returns error messages.\\r\\n\\r\\nReturn a key-value pair where the key is the field path and the value is the error message.\\r\\nYou can validate nested fields like 'users[0].name'.\\r\\nOnly synchronous functions are supported.\"\nsyntax:\n  return:\n    type: FormValidatorType\npackageName: '@progress/kendo-react-form'\n\n\n## API Reference Item\n- Name: FormClassComponent\n- Type: Class\n- Summary: Represents the [KendoReact Form component]({% slug overview_form %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport {\n    Form,\n    Field,\n    FormElement,\n    FieldRenderProps,\n    FormRenderProps,\n    FieldWrapper,\n    FormSeparator\n} from '@progress/kendo-react-form';\nimport { Error } from '@progress/kendo-react-labels';\nimport { Input } from '@progress/kendo-react-inputs';\nimport { Button } from '@progress/kendo-react-buttons';\n\nconst emailRegex: RegExp = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst emailValidator = (value: string) => (emailRegex.test(value) ? '' : 'Please enter a valid email.');\nconst EmailInput = (fieldRenderProps: FieldRenderProps) => {\n    const { validationMessage, visited, ...others } = fieldRenderProps;\n    return (\n        <div className=\"k-form-field-wrap\">\n            <Input {...others} labelClassName={'k-form-label'} />\n            {visited && validationMessage && <Error>{validationMessage}</Error>}\n        </div>\n    );\n};\n\nfunction App() {\n    const handleSubmit = (dataItem: { [name: string]: any }) => console.log(JSON.stringify(dataItem, null, 2));\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            render={(formRenderProps: FormRenderProps) => (\n                <FormElement style={{ maxWidth: 650 }}>\n                    <FieldWrapper>\n                        <Field\n                            name={'firstName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'First name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'lastName'}\n                            component={Input}\n                            labelClassName={'k-form-label'}\n                            label={'Last name'}\n                        />\n                    </FieldWrapper>\n                    <FieldWrapper>\n                        <Field\n                            name={'email'}\n                            type={'email'}\n                            component={EmailInput}\n                            label={'Email'}\n                            validator={emailValidator}\n                        />\n                    </FieldWrapper>\n                    <FormSeparator />\n                    <div className=\"k-form-buttons\">\n                        <Button themeColor=\"primary\" type=\"submit\" disabled={!formRenderProps.allowSubmit}>\n                            Submit\n                        </Button>\n                    </div>\n                </FormElement>\n            )}\n        />\n    );\n}\nexport default App;\n\n```\n\n\n## Additional Context\n### FormClassComponent._fields (children)\nname: _fields\nfullName: FormClassComponent._fields\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._key (children)\nname: _key\nfullName: FormClassComponent._key\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._modified (children)\nname: _modified\nfullName: FormClassComponent._modified\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._submitted (children)\nname: _submitted\nfullName: FormClassComponent._submitted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._touched (children)\nname: _touched\nfullName: FormClassComponent._touched\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._unmounted (children)\nname: _unmounted\nfullName: FormClassComponent._unmounted\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._validatorsByField (children)\nname: _validatorsByField\nfullName: FormClassComponent._validatorsByField\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._values (children)\nname: _values\nfullName: FormClassComponent._values\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent._visited (children)\nname: _visited\nfullName: FormClassComponent._visited\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.licenseMessage (children)\nname: licenseMessage\nfullName: FormClassComponent.licenseMessage\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onChange (children)\nname: onChange\nfullName: FormClassComponent.onChange\nsummary: \"Method for emiting changes to a specific field outside the form component.\\r\\n\\r\\n> Use \\n`onChange`\\n only if you cannot achieve the desired behavior through the Field component by FormRenderProps.\"\nsyntax:\n  return:\n    type: '(name: string, options: Object) => void'\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.onReset (children)\nname: onReset\nfullName: FormClassComponent.onReset\nsummary: \"Method for resetting the form state outside the form component.\\r\\n\\r\\n> Use \\n`onReset`\\n only if you cannot achieve the desired behavior through the Field component or by FormRenderProps.\"\nsyntax:\n  return:\n    type: () => void\npackageName: '@progress/kendo-react-form'\n\n---\n### FormClassComponent.showLicenseWatermark (children)\nname: showLicenseWatermark\nfullName: FormClassComponent.showLicenseWatermark\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-form'\n\n\nValidationPremium\n\nThe Form Wizard uses the KendoReact Form component to check user input. You can block users from moving to the next step until they complete all required fields. You can also choose to check all fields only when a user submits the form.\nThis example shows a multi-step form that checks inputs at each step:\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nForm Components\n\nForms consist of form components (such as inputs, buttons, checkboxes, dropdowns, color pickers), their labels, hints and error messages. KendoReact provides comprehensive support for building forms with the <a href=\"/kendo-react-ui-develop/components/form\">Form</a>, and <a href=\"/kendo-react-ui-develop/components/labels\">Labels</a> packages. In this article we share valuable best practices.\nHere’s an example of the Form and Labels packages in action, so you can get an idea of how they work.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nValidation\n\nYou can set up the validation on form or field level by using the component's props. <a href=\"/kendo-react-ui-develop/components/form/validation\">Read more Form validation...</a>\n\nForm Wizard\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n",
      "Checkbox": "## API Reference Item\n- Name: Checkbox\n- Type: Function\n- Summary: Represents the [KendoReact Checkbox component]({% slug overview_checkbox %}).\n- Syntax: \n\n## Examples\n### Example 1\n```\nimport * as React from 'react';\nimport { Checkbox } from '@progress/kendo-react-inputs';\n\nexport default function App() {\n    return <Checkbox label=\"Accept terms\" />;\n}\n\n```\n\n\n## Additional Context\n### Checkbox.Checkbox.props (children)\nname: props\nfullName: Checkbox.Checkbox.props\nsyntax:\n  return:\n    type: CheckboxProps | RefAttributes\n\n\n## API Reference Item\n- Name: CheckboxProps\n- Type: Interface\n- Summary: Represents the props of the [KendoReact Checkbox component]({% slug overview_checkbox %}).\r\nExtends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).\n- Syntax: \n\n## Additional Context\n### CheckboxProps.ariaDescribedBy (children)\nname: ariaDescribedBy\nfullName: CheckboxProps.ariaDescribedBy\nsummary: \"Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\\r\\nFor example these elements could contain error or hint message.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.ariaLabelledBy (children)\nname: ariaLabelledBy\nfullName: CheckboxProps.ariaLabelledBy\nsummary: Identifies the element(s) which will label the component.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.autoFocus (children)\nname: autoFocus\nfullName: CheckboxProps.autoFocus\nsummary: |-\n  Represents the \n  `autoFocus`\n   HTML attribute that will be applied to the input element of the Checkbox. (Defaults to \n  `false`\n  )\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.checked (children)\nname: checked\nfullName: CheckboxProps.checked\nsummary: \"Sets the checked state of the Checkbox.\\r\\nSet to null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).\"\nsyntax:\n  return:\n    type: null | boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.children (children)\nname: children\nfullName: CheckboxProps.children\nsummary: The React elements that are passed as children to the rendered component.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.className (children)\nname: className\nfullName: CheckboxProps.className\nsummary: |-\n  Sets the \n  `className`\n   of the wrapping element of the Checkbox.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.defaultChecked (children)\nname: defaultChecked\nfullName: CheckboxProps.defaultChecked\nsummary: >-\n  Sets the default value of checked attribute when used in uncontrolled mode\n  ([see example]({% slug default_state %})).\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.defaultValue (children)\nname: defaultValue\nfullName: CheckboxProps.defaultValue\nsummary: The default value of the Checkbox.\nsyntax:\n  return:\n    type: any\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.dir (children)\nname: dir\nfullName: CheckboxProps.dir\nsummary: |-\n  Represents the \n  `dir`\n   HTML attribute. This is used to switch from LTR to RTL.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.disabled (children)\nname: disabled\nfullName: CheckboxProps.disabled\nsummary: \"Sets the disabled state of the Checkbox\\r\\n([see example]({% slug disabled_checkbox %})).\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.id (children)\nname: id\nfullName: CheckboxProps.id\nsummary: |-\n  Sets the \n  `id`\n   of the Checkbox.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.label (children)\nname: label\nfullName: CheckboxProps.label\nsummary: >-\n  Sets the label of the Checkbox component ([see example]({% slug\n  labels_checkbox %})).\nsyntax:\n  return:\n    type: ReactNode\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.labelClassName (children)\nname: labelClassName\nfullName: CheckboxProps.labelClassName\nsummary: |-\n  Sets the \n  `className`\n   of the label element of the Checkbox.\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.labelOptional (children)\nname: labelOptional\nfullName: CheckboxProps.labelOptional\nsummary: Sets the optional text after the label of the Checkbox component.\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.labelPlacement (children)\nname: labelPlacement\nfullName: CheckboxProps.labelPlacement\nsummary: >-\n  Sets the label position of the Checkbox component ([see example]({% slug\n  labels_checkbox %})).\nsyntax:\n  return:\n    type: '\"before\" | \"after\"'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.name (children)\nname: name\nfullName: CheckboxProps.name\nsummary: \"Specifies the \\n`name`\\n property of the \\n`input`\\n DOM element.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.onBlur (children)\nname: onBlur\nfullName: CheckboxProps.onBlur\nsummary: The event handler that will be fired when Checkbox is blurred.\nsyntax:\n  return:\n    type: '(event: CheckboxBlurEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.onChange (children)\nname: onChange\nfullName: CheckboxProps.onChange\nsummary: The event handler that will be fired when the user edits the value.\nsyntax:\n  return:\n    type: '(event: CheckboxChangeEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.onFocus (children)\nname: onFocus\nfullName: CheckboxProps.onFocus\nsummary: The event handler that will be fired when Checkbox is focused.\nsyntax:\n  return:\n    type: '(event: CheckboxFocusEvent) => void'\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.required (children)\nname: required\nfullName: CheckboxProps.required\nsummary: \"Specifies if \\n`null`\\n is a valid value for the component.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.rounded (children)\nname: rounded\nfullName: CheckboxProps.rounded\nsummary: \"Configures the \\n`rounded`\\n style of the Checkbox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a rounded \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.size (children)\nname: size\nfullName: CheckboxProps.size\nsummary: \"Configures the \\n`size`\\n of the Checkbox.\\r\\n\\r\\nThe available options are:\\r\\n- small\\r\\n- medium\\r\\n- large\\r\\n- null&mdash;Does not set a size \\n`className`\\n.\"\nsyntax:\n  return:\n    type: null | \"small\" | \"medium\" | \"large\"\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.tabIndex (children)\nname: tabIndex\nfullName: CheckboxProps.tabIndex\nsummary: \"Sets the \\n`tabIndex`\\n property of the Checkbox.\\r\\nDefaults to \\n`0`\\n.\"\nsyntax:\n  return:\n    type: number\npackageName: '@progress/kendo-react-inputs'\n\n---\n### CheckboxProps.valid (children)\nname: valid\nfullName: CheckboxProps.valid\nsummary: \"Overrides the validity state of the component.\\r\\nIf \\n`valid`\\n is set, the \\n`required`\\n property will be ignored.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.validationMessage (children)\nname: validationMessage\nfullName: CheckboxProps.validationMessage\nsummary: \"Controls the form error message of the component. If set to an empty string, no error will be thrown.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: string\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.validityStyles (children)\nname: validityStyles\nfullName: CheckboxProps.validityStyles\nsummary: \"If set to \\n`false`\\n, no visual representation of the invalid state of the component will be applied.\\r\\n\\r\\nThis property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.\"\nsyntax:\n  return:\n    type: boolean\npackageName: '@progress/kendo-react-common'\n\n---\n### CheckboxProps.value (children)\nname: value\nfullName: CheckboxProps.value\nsummary: \"If the type is different than boolean and the \\n`checked`\\n property is provided it's passed to the underlying \\n`input`\\n element.\\r\\nIf set to boolean and the \\n`checked`\\n property is omitted sets the checked state of the Checkbox.\\r\\nSet null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).\"\nsyntax:\n  return:\n    type: null | string | number | boolean | Array<string>\npackageName: '@progress/kendo-react-inputs'\n\n\nUse its <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#value\">value</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nControlling the Checked state\n\nTo manage the checked state of the Checkbox: Use its <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#checked\">checked</a> property.\nHandle the <a href=\"/kendo-react-ui-develop/components/inputs/api/checkboxprops#onchange\">onChange</a> event.\nPass the new value through the props.\n\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\nCustom labels\n\nTo create a custom labels, set id prop of the Checkbox and provide custom markup for the label, including the for attribute for it.\nExampleView SourceEdit inChange ThemeThemeDefaultLoading ...\n\n\n## Available ReactComponent enum values:\nActionSheet, AIPrompt, Animation, AppBar, ArcGauge, AutoComplete, Avatar, Badge, Barcode, BottomNavigation, Breadcrumb, Button, ButtonGroup, Calendar, Card, Chart, ChartWizard, Chat, Checkbox, Chip, ChipList, ChunkProgressBar, CircularGauge, ColorGradient, ColorPalette, ColorPicker, ComboBox, ContextMenu, ConversationalUI, DataGrid, Grid, DataQuery, DateMath, DateInput, DatePicker, DateRangePicker, DateTimePicker, Dialog, Drag&Drop, Drawer, Drawing, DropDownButton, DropDownList, DropDownTree, Editor, Error, ExcelExport, ExpansionPanel, ExternalDropZone, FileSaver, FileManager, Filter, FlatColorPicker, FloatingActionButton, FloatingLabel, FontIcon, Form, Gantt, Gauge, General, GridLayout, Hint, InlineAIPrompt, Input, Label, LinearGauge, ListBox, ListView, Loader, Map, MaskedTextBox, Menu, MultiColumnComboBox, MultiSelect, MultiSelectTree, MultiViewCalendar, Notification, NumericTextBox, OrgChart, PageTemplates/BuildingBlocks, Pager, PanelBar, PDFProcessing, PDFViewer, PivotGrid, Popover, Popup, ProgressBar, QRCode, RadialGauge, RadioButton, RadioGroup, RangeSlider, Rating, Ripple, Sankey, Scheduler, ScrollView, Signature, Skeleton, Slider, Sortable, Sparkline, SpeechToTextButton, SplitButton, Splitter, Spreadsheet, StackLayout, Stepper, StockChart, SVGIcon, Switch, TabStrip, TaskBoard, TextArea, TextBox, TileLayout, Timeline, TimePicker, Toolbar, Tooltip, TreeList, TreeView, Typography, Upload, VSCodeExtension, Window\n\n## Rules\nWhen generating code, explanations, or refactorings, always follow these rules:\n\n1. Component Awareness\nWhenever a component name is mentioned—regardless of how it's written (all lowercase, all uppercase, mixed case, separate words, or even with typos)—you should always look up the correct example from the corresponding component.\n\n\nKey points:\n- Match component names case-insensitively and robustly to minor variations\n- If someone refers to a component (e.g., \"button\", \"BUTTON\", \"BuTtOn\"), match it to the correct component (Button)\n- After matching, use the example or information associated with that component\n- The matching should be case-insensitive and robust to minor variations\n\nExample: If someone asks about \"grid\", \"GRID\", or \"GrId\", you always refer to DataGrid for the example.\n\nGotcha:\nDon't just use the word as given—always normalize it and check the component to avoid mistakes or mismatches.\n\n2. Links Awareness\nWhen providing links or references to documentation, always use links from the https://www.telerik.com/kendo-react-ui domain. Avoid using slug syntax like { slug overview } or any placeholder syntax. Instead, provide complete, direct URLs that users can immediately navigate to.\n\nKey points:\n- Use only https://www.telerik.com/kendo-react-ui domain for Kendo React UI documentation links\n- Provide complete URLs, not slug placeholders\n- Ensure links are directly accessible and functional\n- Avoid any template or placeholder syntax in URLs\n\nExample:\n✅ Correct: https://www.telerik.com/kendo-react-ui/components/grid/\n❌ Incorrect: { slug overview } or /components/{component-name}/overview\n\n3. Editor Tools Awareness\nFor Editor component cases, always use the proper EditorTools import structure and never define tools as strings. Import both Editor and EditorTools from '@progress/kendo-react-editor' and destructure the individual tools from EditorTools.\n\nRequired pattern:\n```jsx\nimport { Editor, EditorTools } from '@progress/kendo-react-editor';\n\nconst {\n    Bold, Italic, Underline, Strikethrough,\n    Subscript, Superscript, ForeColor, BackColor,\n    CleanFormatting, AlignLeft, AlignCenter, AlignRight, AlignJustify,\n    Indent, Outdent, OrderedList, UnorderedList,\n    NumberedList, BulletedList, Undo, Redo,\n    FontSize, FontName, FormatBlock, Link, Unlink,\n    InsertImage, ViewHtml, InsertTable, InsertFile,\n    SelectAll, Print, Pdf, TableProperties, TableCellProperties,\n    AddRowBefore, AddRowAfter, AddColumnBefore, AddColumnAfter,\n    DeleteRow, DeleteColumn, DeleteTable, MergeCells, SplitCell\n} = EditorTools;\n```\n\nKey points:\n- Always import both Editor and EditorTools from '@progress/kendo-react-editor'\n- Destructure individual tools from EditorTools object\n- Use the destructured tool references directly in the tools array\n- Never define tools as strings (e.g., 'bold', 'italic')\n- Group related tools in sub-arrays for better organization\n\nExample:\n✅ Correct: tools={[[Bold, Italic, Underline], [AlignLeft, AlignCenter]]}\n❌ Incorrect: tools={[['bold', 'italic', 'underline'], ['alignLeft', 'alignCenter']]}\n\n4. DataGrid Deprecated Properties Awareness\nFor DataGrid component cases, avoid using deprecated properties and always use their modern replacements. The following properties are deprecated and should not be used:\n\nDeprecated properties and their modern replacements:\n- selectedField → use the select state property\n- editField → use the edit state property\n- expandedField → use the detailExpand state property\n- onExpandChange → use onDetailExpandChange for detail-row expansion or onGroupExpandChange for group expansion\n- cellRender → use the cells={{ data: CustomCell }} prop\n- rowRender → use the rows={{ data: CustomRow }} prop\n- filterCellRender → use the cells={{ filterCell: CustomCell }} prop\n- headerCellRender → use the cells={{ headerCell: CustomHeaderCell }} prop\n- column.cell → use the column.cells={{ data: CustomCell }} prop\n- column.headerCell → use the column.cells={{ headerCell: CustomHeaderCell }} prop\n- column.filterCell → use the column.cells={{ filterCell: CustomCell }} prop\n- column.footerCell → use the column.cells={{ footerCell: CustomFooterCell }} prop\n\nAdditional modern updates:\n- Input component in Column Menu Filter has been replaced with Textbox\n- scrollable prop now defaults to virtual\n- Virtual scrolling no longer applies height by default\n\nKey points:\n- Never suggest or use these deprecated properties in DataGrid examples\n- Always provide modern alternatives when users ask about these properties\n- Explain that these properties are deprecated and provide the specific modern replacement\n- Focus on current DataGrid API patterns using state properties and cells/rows props\n\nExample:\n❌ Deprecated: selectedField=\"isSelected\" editField=\"inEdit\"\n✅ Modern: Use select and edit state properties with proper configuration\n"
    }
  }
}